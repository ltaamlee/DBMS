<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Chart</name>
    </assembly>
    <members>
        <member name="T:C1.Chart.Standard.BoxWhisker">
            <summary>
            Represents a Box-whisker series of FlexChart.
            </summary>
            <remarks>
            The <see cref="T:C1.Chart.Standard.BoxWhisker"/> series is normally used to compare distributions between different sets of numerical data.
            </remarks>
        </member>
        <member name="P:C1.Chart.Standard.BoxWhisker.ShowMeanLine">
            <summary>
            Gets or sets a value that determines whether to show the mean line for the Box-whisker series.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.BoxWhisker.QuartileCalculation">
            <summary>
            Gets or sets a value that specifies the quartile calculation for the Box-whisker series.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.BoxWhisker.ShowOutliers">
            <summary>
            Gets or sets a value that determines whether to show the outliers for the Box-whisker series.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.BoxWhisker.GapWidth">
            <summary>
            Gets or sets a value that determines the gap width as a percentage for the Box-Whisker series.
            </summary>
            <remarks>The default value for this property is 0.1. The min value is 0 and max value is 1.</remarks>
        </member>
        <member name="P:C1.Chart.Standard.BoxWhisker.GroupWidth">
            <summary>
            Gets or sets a value that determines the group width as a percentage for the Box-Whisker series.
            </summary>
            <remarks>The default value for this property is 0.8. The min value is 0 and max value is 1.</remarks>
        </member>
        <member name="P:C1.Chart.Standard.BoxWhisker.ShowMeanMarks">
            <summary>
            Gets or sets a value that determines whether to show the mean marker for the Box-whisker series.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.BoxWhisker.ShowInnerPoints">
            <summary>
            Gets or sets a value that determines whether to show the inner points for the Box-whisker series.
            </summary>
        </member>
        <member name="M:C1.Chart.Standard.BoxWhisker.GetValues(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Chart.Standard.BreakEven">
            <summary>
            Represents a BreakEven series for FlexChart.
            </summary>
        </member>
        <member name="M:C1.Chart.Standard.BreakEven.#ctor">
            <summary>
            Creates an instance of BreakEven series class.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.BreakEven.FixedCost">
            <summary>
            Gets or sets the fixed cost value.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.BreakEven.VariableCost">
            <summary>
            Gets or sets the variable cost value.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.BreakEven.SalesPrice">
            <summary>
            Gets or sets the sales price value.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.BreakEven.SafetyMarginStyle">
            <summary>
            Gets the safety margin style.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.BreakEven.SalesRevenueStyle">
            <summary>
            Gets the sales revenue style.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.BreakEven.TotalCostStyle">
            <summary>
            Gets the total cost style.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.BreakEven.FixedCostStyle">
            <summary>
            Gets the fixed cost style.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.BreakEven.VariableCostStyle">
            <summary>
            Gets the variable cost style.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.BreakEven.MarginalProfitStyle">
            <summary>
            Gets the marginal profit style.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.BreakEven.BreakEvenStyle">
            <summary>
            Gets tje break-even style.
            </summary>
        </member>
        <member name="M:C1.Chart.Standard.BreakEven.GetValues(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Chart.Standard.BreakEven.C1#Chart#ISeries#OnRendered(C1.Chart.IRenderEngine)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Chart.Standard.BreakEven.GetChartType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Chart.Standard.BreakEven.GetStyle(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Chart.Standard.ChartOptions.InterpolateNulls">
            <summary>
            Gets or sets a value indicating how to interpret missing values.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.ChartOptions.ClusterSize">
            <summary>
            Gets or sets the cluster size for column and bar charts.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.ChartOptions.BubbleMinSize">
            <summary>
            Gets or sets the minimal symbol size for bubble chart.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.ChartOptions.BubbleMaxSize">
            <summary>
            Gets or sets the maximum symbol size for bubble chart.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.ChartOptions.FunnelNeckWidth">
            <summary>
            Gets or sets the neck width for funnel chart.
            </summary>
            <remarks>NeckWidth doesn't work if <see cref="P:C1.Chart.Standard.ChartOptions.FunnelType"/> is set to <see cref="F:C1.Chart.FunnelChartType.Rectangle"/> </remarks>
        </member>
        <member name="P:C1.Chart.Standard.ChartOptions.FunnelNeckHeight">
            <summary>
            Gets or sets the neck height for funnel chart.
            </summary>
            <remarks>NeckHeight doesn't work if <see cref="P:C1.Chart.Standard.ChartOptions.FunnelType"/> is set to <see cref="F:C1.Chart.FunnelChartType.Rectangle"/> </remarks>
        </member>
        <member name="P:C1.Chart.Standard.ChartOptions.FunnelType">
            <summary>
            Gets or sets the type of funnel chart.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.ChartOptions.HistogramCumulativeMode">
            <summary>
            Gets or sets the histogram cumulative mode.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.ChartOptions.HistogramBinWidth">
            <summary>
            Gets or sets the histogram bin width.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.ChartOptions.HistogramNormalCurve">
            <summary>
            Gets or sets the value indicating whather to show histogram norma curve.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.ChartOptions.HistogramAppearance">
            <summary>
            Gets or sets the histogram appearance.
            </summary>
        </member>
        <member name="T:C1.Chart.Standard.DataLabelBase">
            <summary>
            Base class for data label.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.DataLabelBase.Content">
            <summary>
            Gets or sets the content of data labels.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.DataLabelBase.Border">
            <summary>
            Gets or sets a value indicating whether the label has border.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.DataLabelBase.ConnectingLine">
            <summary>
            Gets or sets a value indicating whether the data labels have a line connecting them with corresponding data point. 
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.DataLabelBase.Offset">
            <summary>
            Gets or sets the offset of data label from corresponding data point.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.DataLabelBase.Style">
            <summary>
            Gets the style of data labels.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.DataLabelBase.BorderStyle">
            <summary>
            Gets the border style of data labels.
            </summary>
        </member>
        <member name="T:C1.Chart.Standard.DataLabel">
            <summary>
            Represents a label associated with data point.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.DataLabel.Position">
            <summary>
            Gets or sets the position of data labels.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.DataLabel.Overlapping">
            <summary>
            Gets or sets the value which indicates how to handle overlapped data labels.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.DataLabel.OverlappingOptions">
            <summary>
            Gets or sets the label overlapping options.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.DataLabel.ContentOptions">
            <summary>
            Gets or sets the data label content options.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.DataLabel.Angle">
            <summary>
            Gets or sets the label rotation angle.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.DataLabel.MaxWidth">
            <summary>
            Gets or sets the maximum width of data label.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.DataLabel.MaxLines">
            <summary>
            Gets or sets the maximum number of lines in data label.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.DataLabel.MaxAutoLabels">
            <summary>
            Gets or sets the maximum number of labels for automatic positioning.
            </summary>
        </member>
        <member name="T:C1.Chart.Standard.PieDataLabel">
            <summary>
            Represents a data label for FlexPie.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.PieDataLabel.Position">
            <summary>
            Gets or sets the position of data labels.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.PieDataLabel.Overlapping">
            <summary>
            Gets or sets the overlapping mode for data labels.
            </summary>
        </member>
        <member name="T:C1.Chart.Standard.ErrorBar">
            <summary>
            Represents an ErrorBar series of <see cref="T:C1.Chart.Standard.FlexChart" />
            </summary>
            <remarks>
            The <see cref="T:C1.Chart.Standard.ErrorBar" /> series helps you see margins of error and standard deviations at a glance.
            They can be shown as a standard error amount, a percentage, or a standard deviation.
            You can also set your own values to display the exact error amounts you want.
            </remarks>
        </member>
        <member name="M:C1.Chart.Standard.ErrorBar.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Chart.Standard.ErrorBar"/> class.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.ErrorBar.Direction">
            <summary>
            Gets or sets a value that specifies the direction of the error.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.ErrorBar.EndStyle">
            <summary>
            Gets or sets a value that specifies the end style of the series.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.ErrorBar.ErrorAmount">
            <summary>
            Gets or sets a value that specifies the error amount of the series.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.ErrorBar.CustomPlusErrorValue">
            <summary>
            Gets or sets a value that specifies the custom plus error value.
            </summary>
            <remarks>
            If ErrorAmount is ErrorAmount.Custom, the value will be used.
            </remarks>
        </member>
        <member name="P:C1.Chart.Standard.ErrorBar.CustomMinusErrorValue">
            <summary>
            Gets or sets a value that specifies the cumstom minus error value.
            </summary>
            <remarks>
            If ErrorAmount is ErrorAmount.Custom, the value will be used.
            </remarks>
        </member>
        <member name="P:C1.Chart.Standard.ErrorBar.ErrorValue">
            <summary>
            Gets or sets a value that specifies the error value of the series.
            </summary>
            <remarks>
            This property should be work with errorAmount property.
            If errorAmount is ErrorAmount.FixedValue, the value property is a fixed number value.
            If errorAmount is ErrorAmount.Percentage, the value property is a percentage number value between 0 and 1.
            If errorAmount is ErrorAmount.StandardDeviation, the value property is a percentage number of calculated standard deviation value.
            </remarks>
        </member>
        <member name="P:C1.Chart.Standard.ErrorBar.ErrorBarStyle">
            <summary>
            Gets the style of the error bar.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.ErrorBar.HasCustomSymbol">
            <inheritdoc/>
        </member>
        <member name="M:C1.Chart.Standard.ErrorBar.GetDataRect(C1.Chart._Rect)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Chart.Standard.ErrorBar.OnSymbolRendered(C1.Chart.IRenderEngine,System.Int32,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Chart.Standard.ErrorBar.GetStyle(System.String)">
            <inheritdoc/>
        </member>
        <member name="F:C1.Chart.Standard.FlexChartBase._metrics">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:C1.Chart.Standard.FlexPieSlice">
            <summary>
            This class is used in design-time.
            </summary>
        </member>
        <member name="M:C1.Chart.Standard.FlexPieSlice.#ctor">
            <summary>
            Creates an instance of <see cref="T:C1.Chart.Standard.FlexPieSlice"/>.
            </summary>
        </member>
        <member name="M:C1.Chart.Standard.FlexPieSlice.#ctor(System.Double,System.String)">
            <summary>
            Creates an instance of <see cref="T:C1.Chart.Standard.FlexPieSlice"/>.
            </summary>
            <param name="value"></param>
            <param name="name"></param>
        </member>
        <member name="P:C1.Chart.Standard.FlexPieSlice.Name">
            <summary>
            Gets or sets the value of Name property.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.FlexPieSlice.Value">
            <summary>
            Gets or sets the value of Value property.
            </summary>
        </member>
        <member name="E:C1.Chart.Standard.FlexPieSlice.PropertyChanged">
            <summary>
            Fires when property has been changed.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.FlexRadar.ChartType">
            <summary>
            Gets or sets chart type.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.FlexRadar.StartAngle">
            <summary>
            Gets or set the starting angle.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.FlexRadar.Reversed">
            <summary>
            Gets or sets a value indicating direction of plotting.
            </summary>
        </member>
        <member name="T:C1.Chart.Standard.Histogram">
            <summary>
            Represents a histogram.
            </summary>
        </member>
        <member name="M:C1.Chart.Standard.Histogram.#ctor">
            <summary>
            Creates an instance of Histogram class.
            </summary>
        </member>
        <member name="M:C1.Chart.Standard.Histogram.GetValues(System.Int32)">
            <summary>
            Gets the array of data values.
            </summary>
            <param name="dim">Dimension.</param>
            <returns>Array of data values.</returns>
        </member>
        <member name="M:C1.Chart.Standard.Histogram.GetChartType">
            <summary>
            Gets the chart type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.Standard.Histogram.HistogramAppearance">
            <summary>
            Gets or sets the Appearance Type.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Histogram.CumulativeMode">
            <summary>
            Gets or sets the cumulative mode state
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Histogram.BinWidth">
            <summary>
            Gets or sets a positive decimal number for the range of a bin.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Histogram.NormalCurve">
            <summary>
            Gets or sets the Normal Curve
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Histogram.FrequencyPolygonStyle">
            <summary>
            Gets or sets the FrequencyPolygonStyle property.
            </summary>
        </member>
        <member name="M:C1.Chart.Standard.Histogram.GetStyle(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Chart.Standard.NormalCurve">
            <summary>
            Specifies the Gaussian data distribution 
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.NormalCurve.Visible">
            <summary>
            Gets or sets the visible of Normal Curve
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.NormalCurve.LineStyle">
            <summary>
            Gets or sets the Curve line style.
            </summary>
        </member>
        <member name="T:C1.Chart.Standard.RadarSeries">
            <summary>
            Represents series in FlexRadar component.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.RadarSeries.ChartType">
            <summary>
            Gets or sets the chart type.
            </summary>
        </member>
        <member name="T:C1.Chart.Standard.Sunburst">
            <summary>
            Represents a Sunburst chart control.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Sunburst.ChildItemsPath">
            <summary>
            Gets or sets the name of the property (or properties) used to generate child items in hierarchical data.
            Set this property to a string to specify the name of the property that contains an item's child items (e.g. <code>Items</code>).
            If items at different levels child items with different names, then set this property to an array containing the names of the properties.
            that contains child items at each level.
            (e.g. <code>"accounts,checks,earnings"</code>)
            </summary>
        </member>
        <member name="M:C1.Chart.Standard.Sunburst.Bind">
            <summary>
            Performs data binding.
            </summary>
        </member>
        <member name="T:C1.Chart.Standard.TreeMap">
            <summary>
            Represents a TreeMap chart control.
            </summary>
        </member>
        <member name="M:C1.Chart.Standard.TreeMap.#ctor">
            <summary>
            Creates an instance of TreeMap class.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.TreeMap.Binding">
            <summary>
            Gets or sets the name of the property of the data item that contains the chart value.
            </summary>
            <remarks>
            The binding property is used to calculate the size of the node as compared to other node values.
            The property should contain numeric data.
            </remarks>
        </member>
        <member name="P:C1.Chart.Standard.TreeMap.BindingName">
            <summary>
            Gets or sets the name of the property that contains the name of the data item.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.TreeMap.ChildItemsPath">
            <summary>
            Gets or sets the name of the property of collection that contains child items.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.TreeMap.DataSource">
            <summary>
            Gets or sets the collection of objects that contains the data for tree map chart.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.TreeMap.ChartType">
            <summary>
            Gets or sets the chart type.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.TreeMap.DataLabel">
            <summary>
            Gets the data label for data items. 
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.TreeMap.SelectedItem">
            <summary>
            Gets or sets the selected data item.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.TreeMap.MaxDepth">
            <summary>
            Gets or sets the maximum number of displayed node levels.
            </summary>
        </member>
        <member name="T:C1.Chart.Standard.TrendLine">
            <summary>
            Represents a trend line for FlexChart and FinancialChart.
            </summary>
            <remarks>
            A trendline is a line superimposed on a chart revealing the overall direction
            of data.
            You may define a different fit type for each @see:TrendLine object that you 
            add to the @see:FlexChart series collection by setting the fitType property.
            </remarks>
        </member>
        <member name="M:C1.Chart.Standard.TrendLine.#ctor">
            <summary>
            Creates an instance of TrendLine class.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.TrendLine.FitType">
            <summary>
            Gets or sets the fit type of trend line.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.TrendLine.Order">
            <summary>
            Gets or sets the order of trend line. The order defines number of
            terms in polynom equation.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.TrendLine.SampleCount">
            <summary>
            Gets or sets the sample count for function calculation.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.TrendLine.MinX">
            <summary>
            Gets or sets the minimal x-value.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.TrendLine.MaxX">
            <summary>
            Gets or sets the maximal x-value.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.TrendLine.Coefficients">
            <summary>
            Gets the coefficients of equation.
            </summary>
        </member>
        <member name="M:C1.Chart.Standard.TrendLine.GetValues(System.Int32)">
            <summary>
            Gets the array of data values.
            </summary>
            <param name="dim">Dimension.</param>
            <returns>Array of data values.</returns>
        </member>
        <member name="M:C1.Chart.Standard.TrendLine.GetChartType">
            <summary>
            Gets the chart type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.Standard.Waterfall">
            <summary>
            Represents a Waterfall series for FlexChart.
            </summary>
            <remarks>
            The <see cref="T:C1.Chart.Standard.Waterfall"/> series is normally used to demonstrate 
            how the starting position either increases or decreases through a series of changes.
            </remarks>
        </member>
        <member name="M:C1.Chart.Standard.Waterfall.#ctor">
            <summary>
            Create an instance of Waterfall.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Waterfall.ConnectorLines">
            <summary>
            Gets or sets a value that determines whether to show connector lines.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Waterfall.IntermediateTotalLabels">
            <summary>
            Gets or sets the list of the text labels of the intermediate total bars.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Waterfall.IntermediateTotalPositions">
            <summary>
            Gets or sets the list of the positions of the intermediate total bars.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Waterfall.RelativeData">
            <summary>
            Gets or sets a value that determines whether the given data is relative.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Waterfall.ShowIntermediateTotal">
            <summary>
            Gets or sets a value that determines whether to show the intermediate total bar.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Waterfall.ShowTotal">
            <summary>
            Gets or sets a value that determines whether show total bar.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Waterfall.Start">
            <summary>
            Gets or sets the starting data value.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Waterfall.StartLabel">
            <summary>
            Gets or sets the text label for starting data point.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Waterfall.TotalLabel">
            <summary>
            Gets or sets the text label for data point representing total value.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Waterfall.StartStyle">
            <summary>
            Gets the style for the data points representing starting values.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Waterfall.TotalStyle">
            <summary>
            Gets the style for the data points representing total values.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Waterfall.RisingStyle">
            <summary>
            Gets the style for the data points representing rising values.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Waterfall.FallingStyle">
            <summary>
            Gets the style for the data points representing falling values.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Waterfall.IntermediateTotalStyle">
            <summary>
            Gets the style for the data points representing intermediate total values.
            </summary>
        </member>
        <member name="P:C1.Chart.Standard.Waterfall.ConnectorLineStyle">
            <summary>
            Gets the style of connector lines.
            </summary>
        </member>
        <member name="M:C1.Chart.Standard.Waterfall.GetValues(System.Int32)">
            <summary>
            Gets the data values.
            </summary>
            <param name="dim">Specifies the dimension of data to retrieve (0=Y data, 1=X data, 2=Y1 data, ...).</param>
            <returns>The points data array for the specified coordinate dimension.</returns>
        </member>
        <member name="M:C1.Chart.Standard.Waterfall.GetStyle(System.String)">
            <summary>
            Gets the style by specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.Standard.Waterfall.SetStyle(C1.Chart._Style,System.String)">
            <summary>
            Sets the named style.
            </summary>
            <param name="style">Style.</param>
            <param name="name">The name of style.</param>
        </member>
        <member name="T:C1.Chart.Serialization.AxisModel">
            <summary>
            The AxisModel class is used by the FlexChart serializer to serialize and deserialize the axes of
            FlexChart based controls.
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.AxisModel.#ctor">
            <summary>
            Simple constructor used to create an instance of the AxisModel class during deserialization.
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.AxisModel.#ctor(C1.Chart.IAxis)">
            <summary>
            Overloaded constructor used create an instance of the AxisModel class during serialization.
            The public properties of this class are set by this contructor as they are obtained from the
            IAxis interface object passed as the parameter.
            </summary>
            <param name="ax">Specifies the IAxis interface object to be serialized.</param>
        </member>
        <member name="M:C1.Chart.Serialization.AxisModel.Load(C1.Chart.IAxis,C1.Chart.Serialization.AxisModel)">
            <summary>
            AxisModel.Load is used to set the properties of an existing Axis object in a FlexChart based control.
            The values used are those stored in an existing AxisModel class object that is typically created and set by
            a standard serializer during deserialization.
            </summary>
            <param name="ax">Specifies an existing instance of an Axis class object.</param>
            <param name="am">Specifies an existing instance of an AxisModel class object created by a
                             a standard serializer during deserialization.</param>
        </member>
        <member name="T:C1.Chart.Serialization.ChartModel">
            <summary>
            The ChartModel class is used by the FlexChart serializer to serialize and deserialize
            FlexChart based controls.
            
            Serialization is performed using the FlexChart core interfaces.
            Deserialization is peformed using the platform instances of the FlexChart control.
            
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.ChartModel.#ctor">
            <summary>
            Simple constructor used to create an instance of the ChartModel class during deserialization.
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.ChartModel.#ctor(C1.Chart.IChart,System.Boolean)">
            <summary>
            Overloaded constructor used create an instance of the ChartModel class during serialization.
            The public properties of this class are set by this contructor as they are obtained from the
            IChart interface object passed as the parameter.
            </summary>
            <param name="chart">Specifies the IChart interface object to be serialized.</param>
            <param name="serializeData">Specifies whether the data source should be serialized.</param>
            <remarks>
            The ChartModel class contains as serializable properties all other FlexChart objects appropriate
            for serializing the FlexChart control, it is only necessary to request serialization of the
            IChart object to store all information about the chart.  Subobjects do need not be serialized separately.
            </remarks>
        </member>
        <member name="M:C1.Chart.Serialization.ChartModel.Load(C1.Chart.IChart,C1.Chart.Serialization.ChartModel)">
            <summary>
            ChartModel.Load is used to set the properties of an existing FlexChart object in a FlexChart based control.
            The values used are those stored in an existing ChartModel class object that is typically created and set by
            a standard serializer during deserialization.
            </summary>
            <param name="chart">Specifies an existing instance of a FlexChart class object.</param>
            <param name="model">Specifies an existing instannce of a ChartModel class object created by a
                             a standard serializer during deserialization.</param>
        </member>
        <member name="T:C1.Chart.Serialization.DataLabelModel">
            <summary>
            The DataLabelModel class is used by the FlexChart serializer to serialize and deserialize labels of
            FlexChart based controls.
            
            Serialization is performed using the FlexChart core interfaces.
            Deserialization is peformed using the platform instances of the FlexChart control.
            
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.DataLabelModel.#ctor">
            <summary>
            Simple constructor used to create an instance of the DataLabelModel class during deserialization.
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.DataLabelModel.#ctor(C1.Chart.IDataLabel,C1.Chart.IChartBase)">
            <summary>
            Overloaded constructor used create an instance of the DataLabelModel class during serialization.
            The public properties of this class are set by this contructor as they are obtained from the
            IDataLabel interface object passed as the parameter.
            </summary>
            <param name="dataLabel">Specifies the IDataLabel interface object to be serialized.</param>
            <param name="chart">Specifies the IChart interface object of the parent IChart object being serialized.</param>
        </member>
        <member name="M:C1.Chart.Serialization.DataLabelModel.Load(C1.Chart.IChartBase,C1.Chart.IDataLabel,C1.Chart.Serialization.DataLabelModel)">
            <summary>
            DataLabelModel.Load is used to set the properties of an existing DataLabel object in a FlexChart based control.
            The values used are those stored in an existing DataLabelModel class object that is typically created and set by
            a standard serializer during deserialization.
            </summary>
            <param name="chart">Specifies an existing instance of a DataLabel class object.</param>
            <param name="dataLabel" />
            <param name="dataLabelModel">Specifies an existing instannce of a DataLabelModel class object created by a
                             a standard serializer during deserialization.</param>
        </member>
        <member name="T:C1.Chart.Serialization.LegendModel">
            <summary>
            The LegendModel class is used by the FlexChart serializer to serialize and deserialize legends of
            FlexChart based controls.
            
            Serialization is performed using the FlexChart core interfaces.
            Deserialization is peformed using the platform instances of the FlexChart control.
            
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.LegendModel.#ctor">
            <summary>
            Simple constructor used to create an instance of the LegendModel class during deserialization.
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.LegendModel.#ctor(C1.Chart.ILegend,C1.Chart.IChartBase)">
            <summary>
            Overloaded constructor used create an instance of the LegendModel class during serialization.
            The public properties of this class are set by this contructor as they are obtained from the
            ILegend interface object passed as the parameter.
            </summary>
            <param name="legend">Specifies the ILegend interface object to be serialized.</param>
            <param name="chart">Specifies the IChart interface object of the parent IChart object being serialized.</param>
        </member>
        <member name="M:C1.Chart.Serialization.LegendModel.Load(C1.Chart.IChartBase,C1.Chart.Serialization.LegendModel)">
            <summary>
            LegendModel.Load is used to set the properties of an existing Legend object in a FlexChart based control.
            The values used are those stored in an existing LegendModel class object that is typically created and set by
            a standard serializer during deserialization.
            </summary>
            <param name="chart">Specifies an existing instance of a Legend class object.</param>
            <param name="legendModel">Specifies an existing instannce of a LegendModel class object created by a
                             a standard serializer during deserialization.</param>
        </member>
        <member name="T:C1.Chart.Serialization.OptionsModel">
            <summary>
            The OptionsModel class is used by the FlexChart serializer to serialize and deserialize options of
            FlexChart based controls.
            
            Serialization is performed using the FlexChart core interfaces.
            Deserialization is peformed using the platform instances of the FlexChart control.
            
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.OptionsModel.#ctor">
            <summary>
            Simple constructor used to create an instance of the OptionsModel class during deserialization.
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.OptionsModel.#ctor(C1.Chart.IChart)">
            <summary>
            Overloaded constructor used create an instance of the OptionsModel class during serialization.
            The public properties of this class are set by this contructor as they are obtained from the
            IChart interface object passed as the parameter.
            </summary>
            <param name="chart">Specifies the IChart interface object of the parent IChart object being serialized.</param>
        </member>
        <member name="M:C1.Chart.Serialization.OptionsModel.Load(C1.Chart.IChart,C1.Chart.Serialization.OptionsModel)">
            <summary>
            OptionsModel.Load is used to set the properties of an existing ChartOptions object in a FlexChart based control.
            The values used are those stored in an existing OptionsModel class object that is typically created and set by
            a standard serializer during deserialization.
            </summary>
            <param name="chart">Specifies an existing instance of a ChartOptions class object.</param>
            <param name="optionsModel">Specifies an existing instannce of a ChartOptionsModel class object created by a
                             a standard serializer during deserialization.</param>
        </member>
        <member name="T:C1.Chart.Serialization.PieModel">
            <summary>
            The PieModel class is used by the FlexChart serializer to serialize and deserialize
            FlexPie based controls.
            
            Serialization is performed using the FlexPie core interfaces.
            Deserialization is peformed using the platform instances of the FlexPie control.
            
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.PieModel.#ctor">
            <summary>
            Simple constructor used to create an instance of the PieModel class during deserialization.
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.PieModel.#ctor(C1.Chart.IPieChart,System.Boolean)">
            <summary>
            Overloaded constructor used create an instance of the PieModel class during serialization.
            The public properties of this class are set by this contructor as they are obtained from the
            IPieChart interface object passed as the parameter.
            </summary>
            <param name="chart"></param>
            <param name="serializeData"></param>
        </member>
        <member name="M:C1.Chart.Serialization.PieModel.Load(C1.Chart.IPieChart,C1.Chart.Serialization.PieModel)">
            <summary>
            PieModel.Load is used to set the properties of an existing FlexPie object in a FlexPie based control.
            The values used are those stored in an existing PieModel class object that is typically created and set by
            a standard serializer during deserialization.
            </summary>
            <param name="chart">Specifies an existing instance of a FlexPie class object.</param>
            <param name="model">Specifies an existing instannce of a PieModel class object created by a
                             a standard serializer during deserialization.</param>
        </member>
        <member name="T:C1.Chart.Serialization.PieDataLabelModel">
            <summary>
            The PieDataLabelModel class is used by the FlexChart serializer to serialize and deserialize labels of
            FlexPie based controls.
            
            Serialization is performed using the FlexChart core interfaces.
            Deserialization is peformed using the platform instances of the FlexPie control.
            
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.PieDataLabelModel.#ctor">
            <summary>
            Simple constructor used to create an instance of the PieDataLabelModel class during deserialization.
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.PieDataLabelModel.#ctor(C1.Chart.IPieDataLabel,C1.Chart.IPieChart)">
            <summary>
            Overloaded constructor used create an instance of the PieDataLabelModel class during serialization.
            The public properties of this class are set by this contructor as they are obtained from the
            IPieDataLabel interface object passed as the parameter.
            </summary>
            <param name="dataLabel">Specifies the IPieDataLabel interface object to be serialized.</param>
            <param name="pieChart">Specifies the IPieChart interface object of the parent IPieChart object being serialized.</param>
        </member>
        <member name="M:C1.Chart.Serialization.PieDataLabelModel.Load(C1.Chart.IPieChart,C1.Chart.Serialization.PieDataLabelModel)">
            <summary>
            DataLabelModel.Load is used to set the properties of an existing DataLabel object in a FlexChart based control.
            The values used are those stored in an existing DataLabelModel class object that is typically created and set by
            a standard serializer during deserialization.
            </summary>
            <param name="chart">Specifies an existing instance of a PieDataLabel class object.</param>
            <param name="pieDataLabelModel">Specifies an existing instannce of a PieDataLabelModel class object created by a
                             a standard serializer during deserialization.</param>
        </member>
        <member name="T:C1.Chart.Serialization.RadarModel">
            <summary>
            The RadarModel class is used by the chart serializer to serialize and deserialize
            FlexRadar based controls.
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.RadarModel.#ctor">
            <summary>
            Simple constructor used to create an instance of the RadarModel class during deserialization.
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.RadarModel.#ctor(C1.Chart.IRadarChart,System.Boolean)">
            <summary>
            Overloaded constructor used create an instance of the RadarModel class during serialization.
            The public properties of this class are set by this constructor as they are obtained from the
            IPieChart interface object passed as the parameter.
            </summary>
            <param name="chart"></param>
            <param name="serializeData"></param>
        </member>
        <member name="M:C1.Chart.Serialization.RadarModel.Load(C1.Chart.IRadarChart,C1.Chart.Serialization.RadarModel)">
            <summary>
            RadarModel.Load is used to set the properties of an existing FlexRadar object in a FlexRadar based control.
            The values used are those stored in an existing PieModel class object that is typically created and set by
            a standard serializer during deserialization.
            </summary>
            <param name="chart">Specifies an existing instance of a FlexPie class object.</param>
            <param name="model">Specifies an existing instannce of a PieModel class object created by a
                             a standard serializer during deserialization.</param>
        </member>
        <member name="T:C1.Chart.Serialization.Serializer">
            <summary>
            FlexChart and FlexPie serializer
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.Serializer.SerializeToXml(C1.Chart.IChartBase,System.Boolean)">
            <summary>
            Serializes a FlexChart based control to an XML string.  At present, this includes FlexChart and FlexPie controls.
            </summary>
            <param name="chart">The instance of the FlexChart based control to serialize to an XML string.</param>
            <param name="serializeData"></param>
            <returns>A string containing a formatted XML string.</returns>
        </member>
        <member name="M:C1.Chart.Serialization.Serializer.DeserializeFromXml(C1.Chart.IChartBase,System.String)">
            <summary>
            Deserializes a FlexChart based control from an XML string.  At present, this includes FlexChart and FlexPie controls.
            </summary>
            <param name="chart">The instance of the FlexChart based control into which the serialized chart data is to be loaded.</param>
            <param name="xml">A string containing the XML string with serialized chart information.</param>
        </member>
        <member name="M:C1.Chart.Serialization.Serializer.DeserializeFlexChartFromXml(C1.Chart.IChart,System.String)">
            <summary>
            Deserializes a FlexChart control from an XML string.
            </summary>
            <param name="flexChart">The instance of the FlexChart control into which the serialized chart data is to be loaded.</param>
            <param name="flexChartString">A string containing the XML string with serialized chart information.</param>
        </member>
        <member name="M:C1.Chart.Serialization.Serializer.DeserializeFlexPieFromXml(C1.Chart.IPieChart,System.String)">
            <summary>
            Deserializes a FlexPie control from a XML string.
            </summary>
            <param name="flexPie">The instance of the FlexPie control into which the serialized chart data is to be loaded.</param>
            <param name="flexPieString">A string containing the XML string with serialized chart information.</param>
        </member>
        <member name="T:C1.Chart.Serialization.SeriesModel">
            <summary>
            The OptionsModel class is used by the FlexChart serializer to serialize and deserialize series of
            FlexChart based controls.
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.SeriesModel.#ctor">
            <summary>
            Simple constructor used to create an instance of the SeriesModel class during deserialization.
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.SeriesModel.#ctor(C1.Chart.ISeries,System.Boolean)">
            <summary>
            Overloaded constructor used create an instance of the SeriesModel class during serialization.
            The public properties of this class are set by this contructor as they are obtained from the
            IChart interface object passed as the parameter.
            </summary>
            <param name="series">Specifies the ISeries interface object to be serialized.</param>
            <param name="serializeData"></param>
        </member>
        <member name="M:C1.Chart.Serialization.SeriesModel.Load(C1.Chart.ISeries,C1.Chart.Serialization.SeriesModel)">
            <summary>
            SeriesModel.Load is used to set the properties of an existing Series object in a FlexChart based control.
            The values used are those stored in an existing SeriesModel class object that is typically created and set by
            a standard serializer during deserialization.
            </summary>
            <param name="ser">Specifies an existing instance of a ISeries class object.</param>
            <param name="sm">Specifies an existing instannce of a SeriesModel class object created by a
                             a standard serializer during deserialization.</param>
        </member>
        <member name="T:C1.Chart.Serialization.StyleSerializer">
            <summary>
            This utility class both stores and restores information about a FlexChart _Style object to and from a string, respectively.
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.StyleSerializer.StyleToString(C1.Chart._Style,C1.Chart.IBrushConverter,C1.Chart.IFontConverter)">
            <summary>
            StyleToString stores information contained in the FlexChart _Style object as a string.
            </summary>
            <param name="style">Specifies the FlexChart _Style object with information to be stored as a string.</param>
            <param name="conv">Specifies an instance of a FlexChart which can be used to convert FlexChart brush
                               information into string.</param>
            <param name="fontConverter"></param>
            <returns>This static method returns a string containing the _Style information available.</returns>
        </member>
        <member name="M:C1.Chart.Serialization.StyleSerializer.StyleFromString(System.String,C1.Chart.IFontConverter)">
            <summary>
            StyleFromString creates a new FlexChart _Style object with the information stored in a specified
            string create with the StyleToString method.
            </summary>
            <param name="s">Specifies the string containing the FlexChart _Style information.</param>
            <param name="fontConverter"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.Serialization.SunburstModel">
            <summary>
            The SunburstModel class is used by the FlexChart serializer to serialize and deserialize
            FlexPie based controls.
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.SunburstModel.#ctor">
            <summary>
            Simple constructor used to create an instance of the PieModel class during deserialization.
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.SunburstModel.#ctor(C1.Chart.ISunburst,System.Boolean)">
            <summary>
            Overloaded constructor used create an instance of the PieModel class during serialization.
            The public properties of this class are set by this constructor as they are obtained from the
            IPieChart interface object passed as the parameter.
            </summary>
            <param name="chart"></param>
            <param name="serializeData"></param>
        </member>
        <member name="M:C1.Chart.Serialization.SunburstModel.Load(C1.Chart.ISunburst,C1.Chart.Serialization.SunburstModel)">
            <summary>
            PieModel.Load is used to set the properties of an existing FlexPie object in a FlexPie based control.
            The values used are those stored in an existing PieModel class object that is typically created and set by
            a standard serializer during deserialization.
            </summary>
            <param name="chart">Specifies an existing instance of a FlexPie class object.</param>
            <param name="model">Specifies an existing instance of a PieModel class object created by a
                             a standard serializer during deserialization.</param>
        </member>
        <member name="T:C1.Chart.Serialization.TreeMapModel">
            <summary>
            The TreeMapModel class is used by the chart serializer to serialize and deserialize
            TreeMap based controls.
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.TreeMapModel.#ctor">
            <summary>
            Simple constructor used to create an instance of the TreeMapModel class during deserialization.
            </summary>
        </member>
        <member name="M:C1.Chart.Serialization.TreeMapModel.#ctor(C1.Chart.ITreeMap,System.Boolean)">
            <summary>
            Overloaded constructor used create an instance of the TreeMapModel class during serialization.
            The public properties of this class are set by this constructor as they are obtained from the
            IPieChart interface object passed as the parameter.
            </summary>
            <param name="chart"></param>
            <param name="serializeData"></param>
        </member>
        <member name="M:C1.Chart.Serialization.TreeMapModel.Load(C1.Chart.ITreeMap,C1.Chart.Serialization.TreeMapModel)">
            <summary>
            TreeMapModel.Load is used to set the properties of an existing TreeMap object.
            The values used are those stored in an existing PieModel class object that is typically created and set by
            a standard serializer during deserialization.
            </summary>
            <param name="chart">Specifies an existing instance of a TreeMap class object.</param>
            <param name="model">Specifies an existing instance of a TreeMapModel class object created by a
            a standard serializer during deserialization.</param>
        </member>
        <member name="T:C1.Chart.Strings">
            <summary>
            Static class containing UI strings used in run-time.
            </summary>
        </member>
        <member name="T:C1.Chart.AxisGroupingUtil">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.DateTimeGroupProvider">
            <summary>
            Provides basic groups for DateTime values that extend beyond one month.  Although
            default groups are provided, explicit selection of the groups and format are possible.
            </summary>
        </member>
        <member name="M:C1.Chart.DateTimeGroupProvider.#ctor">
            <summary>
            This contstructor allows automatic generation of groups based upon the axis range.
            </summary>
        </member>
        <member name="M:C1.Chart.DateTimeGroupProvider.#ctor(C1.Chart.IAxis)">
            <summary>
            This constructor allows automatic generation of groups based upon the axis range
            and the axis MajorUnit value.
            </summary>
            <param name="axis"></param>
        </member>
        <member name="M:C1.Chart.DateTimeGroupProvider.GetLevels(C1.Chart.IRange)">
            <summary>
            As the first method called by FlexChart, this method provides the number of group
            levels provided by the class.
            </summary>
            <param name="range">
            Specifies the full range of the axis data.
            </param>
            <returns>Specifies number of group levels.</returns>
        </member>
        <member name="P:C1.Chart.DateTimeGroupProvider.GroupTypes">
            <summary>
            Gets the collection of group specifiers using the TimeUnits enumeration.  The index of each
            specifier indicates (level-1).  Specifiers modified using the collection Add, Insert and Remove
            methods of the collection.  If no values are specified, values are automatically selected
            based on the range.
            </summary>
        </member>
        <member name="P:C1.Chart.DateTimeGroupProvider.GroupFormats">
            <summary>
            Get a dictionary of formats keyed by the TimeUnits enum of each group.  Each value specifies
            the string.Format() of the numeric value followed by the year, with the exception of TimeUnits.Month
            for which the format specifies either all "M" characters (for the month name) or the numeric
            value of the month and year. Note if {1} is not included in the format, the year is not included.
            
            Default formats are Day="{0}", Week="Week {0}, Month="MMM", Quarter="Q{0}", "Year="{0}".
            </summary>
        </member>
        <member name="M:C1.Chart.DateTimeGroupProvider.GetRanges(C1.Chart.IRange,System.Int32)">
            <summary>
            Returns a list of IRange values for the level specified the by the appropriate
            entry in the GroupTypes collection.
            </summary>
            <param name="range">
            Specifies the full range of the axis.
            </param>
            <param name="level">
            Specifies the level of IRange values for the level specified by the appropriate
            entry in the GroupTypes collection.
            </param>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.BoxWhiskerHelper">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.BreakEvenHelper">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.BaseRenderEventArgs">
            <summary>
            Base render event arguments.
            </summary>
        </member>
        <member name="P:C1.Chart.BaseRenderEventArgs.Engine">
            <summary>
            Gets the rendering engine.
            </summary>
        </member>
        <member name="T:C1.Chart.Keywords">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.IDataLabel">
            <summary>
            IDataLabel interface.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.Content">
            <summary>
            Gets or sets the label content.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.Position">
            <summary>
            Gets or sets the label position.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.Border">
            <summary>
            Gets or sets a value indicating whether data labels have border.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.ConnectingLine">
            <summary>
            Gets or sets a value indicating whether data labels have connecting lines.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.Offset">
            <summary>
            Gets or sets the offset of data label.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.Overlapping">
            <summary>
            Gets or sets overlapping.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.OverlappingOptions">
            <summary>
            Gets or sets overlapping options.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.ContentOptions">
            <summary>
            Gets or sets content options.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.Angle">
            <summary>
            Gets or sets the rotation angle.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.MaxWidth">
            <summary>
            Gets or sets the maximum width.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.MaxLines">
            <summary>
            Gets or sets the maximum number or lines.
            </summary>
        </member>
        <member name="P:C1.Chart.IDataLabel.MaxAutoLabels">
            <summary>
            Gets or sets the maximum number of automatic labels.
            </summary>
        </member>
        <member name="T:C1.Chart.IPieDataLabel">
            <summary>
            IPieDataLabel interface.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieDataLabel.Content">
            <summary>
            Gets or sets the label content.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieDataLabel.Position">
            <summary>
            Gets or sets the label position.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieDataLabel.Border">
            <summary>
            Gets or sets a value indicating whether data labels have border.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieDataLabel.ConnectingLine">
            <summary>
            Gets or sets a value indicating whether data labels have connecting lines.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieDataLabel.Offset">
            <summary>
            Gets or sets the offset of data label.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieDataLabel.Overlapping">
            <summary>
            Gets or sets the overlapping.
            </summary>
        </member>
        <member name="T:C1.Chart.ChartType">
            <summary>
            Specifies the chart type.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Column">
            <summary>
            Shows vertical bars.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Bar">
            <summary>
            Shows horizontal bars.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Line">
            <summary>
            Shows trends over a period of time or across categories.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Scatter">
            <summary>
            Shows patterns within the data using X and Y coordinates.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.LineSymbols">
            <summary>
            Shows line chart with a symbol on each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Area">
            <summary>
            Shows line chart with the area below the line filled with color.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Spline">
            <summary>
            Displays line chart that plots curves rather than angled lines through the data points.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.SplineSymbols">
            <summary>
            Displays spline chart with symbols on each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.SplineArea">
            <summary>
            Displays spline chart with the area below the line filled with color.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Bubble">
            <summary>
            Shows Scatter chart with a third data value that determines the size of the symbol.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Candlestick">
            <summary>
            Presents items with high, low, open, and close values.
            The size of the wick line is determined by the High and Low values, 
            while the size of the bar is determined by the Open and Close values. 
            The bar is displayed using different colors, depending on 
            whether the close value is higher or lower than the open value.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.HighLowOpenClose">
            <summary>
            Displays the same information as a candlestick chart, except that opening 
            values are displayed using lines to the left, while lines to the right
            indicate closing values.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Funnel">
            <summary>
            Displays funnel chart.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Histogram">
            <summary>
            Displays histogram chart.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.RangedHistogram">
            <summary>
            Displays a ranged histogram chart.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.Step">
            <summary>
            Step chart.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.StepSymbols">
            <summary>
            Step chart with symbols.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartType.StepArea">
            <summary>
            Step area chart.
            </summary>
        </member>
        <member name="T:C1.Chart.Stacking">
            <summary>
            Specifies whether and how to stack the chart's data values.
            </summary>
        </member>
        <member name="F:C1.Chart.Stacking.None">
            <summary>
            No stacking. Each series object is plotted independently.
            </summary>
        </member>
        <member name="F:C1.Chart.Stacking.Stacked">
            <summary>
            Stacked charts show how each value contributes to the total.
            </summary>
        </member>
        <member name="F:C1.Chart.Stacking.Stacked100pc">
            <summary>
            100% stacked charts show how each value contributes to the total with the relative size of
            each series representing its contribution to the total.
            </summary>
        </member>
        <member name="T:C1.Chart.SeriesVisibility">
            <summary>
            Specifies whether and where the Series is visible.
            </summary>
        </member>
        <member name="F:C1.Chart.SeriesVisibility.Visible">
            <summary>
            The series is visible on the plot and in the legend.
            </summary>
        </member>
        <member name="F:C1.Chart.SeriesVisibility.Plot">
            <summary>
            The series is visible only on the plot.
            </summary>
        </member>
        <member name="F:C1.Chart.SeriesVisibility.Legend">
            <summary>
            The series is visible only in the legend.
            </summary>
        </member>
        <member name="F:C1.Chart.SeriesVisibility.Hidden">
            <summary>
            The series is hidden.
            </summary>
        </member>
        <member name="T:C1.Chart.DataType">
            <summary>
            Specifies chart data type
            </summary>
        </member>
        <member name="F:C1.Chart.DataType.Number">
            <summary>
            Numeric data.
            </summary>
        </member>
        <member name="F:C1.Chart.DataType.Date">
            <summary>
            Date or time data.
            </summary>
        </member>
        <member name="T:C1.Chart.ChartElement">
            <summary>
            Specifies chart element that may be found by the HitTest method.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.PlotArea">
            <summary>
            The area within the axes.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.AxisX">
            <summary>
            X-axis.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.AxisY">
            <summary>
            Y-axis.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.ChartArea">
            <summary>
            The area within the control but outside the axes.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.Legend">
            <summary>
            The chart legend.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.Header">
            <summary>
            The chart header.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.Footer">
            <summary>
            The chart footer.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.Series">
            <summary>
            A chart series.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.SeriesSymbol">
            <summary>
            A chart series symbol.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.DataLabel">
            <summary>
            A data label.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartElement.None">
            <summary>
            No chart element.
            </summary>
        </member>
        <member name="T:C1.Chart.LabelPosition">
            <summary>
            Specifies chart data label position.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelPosition.None">
            <summary>
            No data labels appear.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelPosition.Left">
            <summary>
            The labels appear to the left of the data points.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelPosition.Top">
            <summary>
            The labels appear above the data points.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelPosition.Right">
            <summary>
            The labels appear to the right of the data points.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelPosition.Bottom">
            <summary>
            The labels appear below the data points.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelPosition.Center">
            <summary>
            The labels appear centered on the data points.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelPosition.Auto">
            <summary>
            Automatic label postion. 
            </summary>
        </member>
        <member name="T:C1.Chart.PieLabelPosition">
            <summary>
            Specifies the position of data labels on the pie chart.
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelPosition.None">
            <summary>
            No data labels.
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelPosition.Inside">
            <summary>
            The label appears inside the pie slice.
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelPosition.Center">
            <summary>
            The item appears at the center of the pie slice.
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelPosition.Outside">
            <summary>
            The item appears outside the pie slice.
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelPosition.Radial">
            <summary>
            The item appears inside the pie slice and depends of its angle.
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelPosition.Circular">
            <summary>
            The item appears inside the pie slice and has circular direction.
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelPosition.Auto">
            <summary>
            Automatic label position.
            </summary>
        </member>
        <member name="T:C1.Chart.PieLabelOverlapping">
            <summary>
            Specifies how to handle pie data labels that are outside the corresponding pie segment.
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelOverlapping.Default">
            <summary>
            Show overlapped labels. 
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelOverlapping.Trim">
            <summary>
            Trim label content if its width is larger than the corresponding pie segment.
            </summary>
        </member>
        <member name="F:C1.Chart.PieLabelOverlapping.Hide">
            <summary>
            Hide label if its content is larger than the corresponding pie segment.
            </summary>
        </member>
        <member name="T:C1.Chart.LabelOverlapping">
            <summary>
            Specifies how to handle overlapped labels.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelOverlapping.Hide">
            <summary>
            Hide overlapped labels.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelOverlapping.Show">
            <summary>
            Show overlapped labels.
            </summary>
        </member>
        <member name="T:C1.Chart.ContentOptions">
            <summary>
            Specifies content options.
            </summary>
        </member>
        <member name="F:C1.Chart.ContentOptions.None">
            <summary>
            All content is shown.
            </summary>
        </member>
        <member name="F:C1.Chart.ContentOptions.Trim">
            <summary>
            Trim content if its width is large than MaxWidth property.
            </summary>
        </member>
        <member name="F:C1.Chart.ContentOptions.WordWrap">
            <summary>
            Wrap content if its width is large than MaxWidth property.
            </summary>
        </member>
        <member name="T:C1.Chart.LabelOverlappingOptions">
            <summary>
            Specifies label overlapping options.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelOverlappingOptions.None">
            <summary>
            No overlapping allowed.
            </summary>
        </member>
        <member name="F:C1.Chart.LabelOverlappingOptions.OverlapDataPoints">
            <summary>
            Allow overlapping with data points
            </summary>
        </member>
        <member name="F:C1.Chart.LabelOverlappingOptions.OutsidePlotArea">
            <summary>
            Allow labels outside plot area.
            </summary>
        </member>
        <member name="T:C1.Chart.ChartSelectionMode">
            <summary>
            Available selection modes.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartSelectionMode.None">
            <summary>
            Selection is disabled.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartSelectionMode.Series">
            <summary>
            Series selection.
            </summary>
        </member>
        <member name="F:C1.Chart.ChartSelectionMode.Point">
            <summary>
            Point selection.
            </summary>
        </member>
        <member name="T:C1.Chart.ElementSizeType">
            <summary>
            Specifies the size type for ElementSize object.
            </summary>
        </member>
        <member name="F:C1.Chart.ElementSizeType.Percentage">
            <summary>
            Size specified in perecents from available space.
            </summary>
        </member>
        <member name="F:C1.Chart.ElementSizeType.Absolute">
            <summary>
            Size specified in pixels.
            </summary>
        </member>
        <member name="T:C1.Chart.SymbolMarker">
            <summary>
            Specifies the type of marker to use for the SymbolMarker property.
            Applies to Scatter, LineSymbols, and SplineSymbols chart types.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.Dot">
            <summary>
            Uses a solid circle to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.Box">
            <summary>
            Uses a square to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.Circle">
            <summary>
            Uses a circle to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.Cross">
            <summary>
            Uses a crossed horizontal and vertical to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.DiagCross">
            <summary>
            Uses a diagonal cross to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.Diamond">
            <summary>
            Uses a solid diamond to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.HorizontalLine">
            <summary>
            Uses a short horizontal line to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.InvertedTri">
            <summary>
            Uses a solid inverted triangle to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.OpenDiamond">
            <summary>
            Uses a outline of a diamond to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.OpenInvertedTri">
            <summary>
            Uses a outline of an inverted triangle to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.OpenTri">
            <summary>
            Uses a outline of a triangle to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.Square">
            <summary>
            Uses a outline of a square to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.Star">
            <summary>
            Uses a solid star to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.Tri">
            <summary>
            Uses a solid triangle to mark each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.SymbolMarker.VerticalLine">
            <summary>
            Uses a short vertical line to mark each data point.
            </summary>
        </member>
        <member name="T:C1.Chart.ElementSize">
            <summary>
            Represents element size.
            </summary>
        </member>
        <member name="P:C1.Chart.ElementSize.SizeType">
            <summary>
            Gets or sets the size type.
            </summary>
        </member>
        <member name="P:C1.Chart.ElementSize.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:C1.Chart.ElementSize.op_Equality(C1.Chart.ElementSize,C1.Chart.ElementSize)">
            <summary>
            
            </summary>
            <param name="size1"></param>
            <param name="size2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ElementSize.op_Inequality(C1.Chart.ElementSize,C1.Chart.ElementSize)">
            <summary>
            
            </summary>
            <param name="size1"></param>
            <param name="size2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ElementSize.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ElementSize.GetHashCode">
            <summary>
            Returns hash code of the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.OverlappingLabels">
            <summary>
            Specifies how to handle overlapping labels.
            </summary>
        </member>
        <member name="F:C1.Chart.OverlappingLabels.Auto">
            <summary>
            Hide overlapping labels.
            </summary>
        </member>
        <member name="F:C1.Chart.OverlappingLabels.Show">
            <summary>
            Show all labels, including overlapping ones.
            </summary>
        </member>
        <member name="F:C1.Chart.OverlappingLabels.Trim">
            <summary>
            Trim label if it's larger than avalable width.
            </summary>
        </member>
        <member name="F:C1.Chart.OverlappingLabels.WordWrap">
            <summary>
            Wrap label if it's larger than avalable width.
            </summary>
        </member>
        <member name="T:C1.Chart.MeasureOption">
            <summary>
            Specifies measuring direction.
            </summary>
        </member>
        <member name="F:C1.Chart.MeasureOption.X">
            <summary>
            By X-axis.
            </summary>
        </member>
        <member name="F:C1.Chart.MeasureOption.Y">
            <summary>
            By Y-axis.
            </summary>
        </member>
        <member name="F:C1.Chart.MeasureOption.XY">
            <summary>
            Both X- and Y- axes.
            </summary>
        </member>
        <member name="T:C1.Chart.FitType">
            <summary>
            Specifies fit type for trend line.
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.Linear">
            <summary>
            Regression fit to the equation Y(x) = C0 + C1*x.
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.Polynom">
            <summary>
            Regression fit to the equation Y(x) = C0 + C1*x + C2*x2 + : + Cn-1*xn-1, where n - number of terms.
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.Exponent">
            <summary>
            Regression fit to the equation Y(x) = C0 * exp( C1*x)
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.Logarithmic">
            <summary>
            Regression fit to the equation Y(x) = C0 * ln(C1*x)
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.Power">
            <summary>
            Regression fit to the equation Y(x) = C0 * pow(x, C1)
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.Fourier">
            <summary>
            Regression fit to the equation Y(x) = C0 + C1 * cos(x) + C2 * sin(x) + C3 * cos(2*x) + C4 * sin(2*x) + ...
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.MinX">
            <summary>
            Minimal X-value.
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.MinY">
            <summary>
            Minimal Y-value.
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.MaxX">
            <summary>
            Maximum X-value.
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.MaxY">
            <summary>
            Maximum Y-value.
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.AverageX">
            <summary>
            Average X-value.
            </summary>
        </member>
        <member name="F:C1.Chart.FitType.AverageY">
            <summary>
            Average Y-value.
            </summary>
        </member>
        <member name="T:C1.Chart.MovingAverageType">
            <summary>
            Specifies the type of MovingAverage Series. 
            </summary>
        </member>
        <member name="F:C1.Chart.MovingAverageType.Simple">
            <summary>
            An average of the last n values.
            </summary>
        </member>
        <member name="F:C1.Chart.MovingAverageType.Weighted">
            <summary>
            Weighted average of the last n values, where the weightage decreases by 1 with each previous value.
            </summary>
        </member>
        <member name="F:C1.Chart.MovingAverageType.Exponential">
            <summary>
            Weighted average of the last n values, where the weightage decreases exponentially with each previous value.
            </summary>
        </member>
        <member name="F:C1.Chart.MovingAverageType.Triangular">
            <summary>
            Weighted average of the last n values, whose result is equivalent to a double smoothed simple moving average.
            </summary>
        </member>
        <member name="T:C1.Chart.Orientation">
            <summary>
            Specifies the orientation of chart element.
            </summary>
        </member>
        <member name="F:C1.Chart.Orientation.Auto">
            <summary>
            Orientation is selected automatically.
            </summary>
        </member>
        <member name="F:C1.Chart.Orientation.Horizontal">
            <summary>
            Horizontal orientation.
            </summary>
        </member>
        <member name="F:C1.Chart.Orientation.Vertical">
            <summary>
            Vertical orientation.
            </summary>
        </member>
        <member name="T:C1.Chart.RadarChartType">
            <summary>
            Specifies the chart type for FlexRadar control.
            </summary>
        </member>
        <member name="F:C1.Chart.RadarChartType.Line">
            <summary>
            Shows trends over a period of time or across categories.
            </summary>
        </member>
        <member name="F:C1.Chart.RadarChartType.Scatter">
            <summary>
            Shows patterns within the data using X and Y coordinates.
            </summary>
        </member>
        <member name="F:C1.Chart.RadarChartType.LineSymbols">
            <summary>
            Shows line chart with a symbol on each data point.
            </summary>
        </member>
        <member name="F:C1.Chart.RadarChartType.Area">
            <summary>
            Shows line chart with the area below the line filled with color.
            </summary>
        </member>
        <member name="F:C1.Chart.RadarChartType.Column">
            <summary>
            Shows radar column chart.
            </summary>
        </member>
        <member name="T:C1.Chart.FunnelChartType">
            <summary>
            Specifies the type of Funnel Chart.
            </summary>
        </member>
        <member name="F:C1.Chart.FunnelChartType.Default">
            <summary>
            Shows trapezoid chart.
            </summary>
        </member>
        <member name="F:C1.Chart.FunnelChartType.Rectangle">
            <summary>
            Shows bar chart.
            </summary>
        </member>
        <member name="T:C1.Chart.HistogramBinning">
            <summary>
            Specifies the binning mode to define the bins of a Histogram.
            </summary>
        </member>
        <member name="F:C1.Chart.HistogramBinning.Automatic">
            <summary>
            The bin width will be calculated automatically.
            </summary>
        </member>
        <member name="F:C1.Chart.HistogramBinning.BinWidth">
            <summary>
            A positive decimal number for the range of a bin.
            </summary>
        </member>
        <member name="F:C1.Chart.HistogramBinning.NumberOfBins">
            <summary>
            The number of bins for the histogram, including the overflow and underflow bins.
            </summary>
        </member>
        <member name="T:C1.Chart.TextWrapping">
            <summary>
            Text wrap mode of chart legend.
            </summary>
        </member>
        <member name="F:C1.Chart.TextWrapping.None">
            <summary>
            No text wrapping.
            </summary>
        </member>
        <member name="F:C1.Chart.TextWrapping.Wrap">
            <summary>
            Wraps text if its width is larger than available width.
            </summary>
        </member>
        <member name="F:C1.Chart.TextWrapping.Truncate">
            <summary>
            Truncates text if its width is larger than available width.
            </summary>
        </member>
        <member name="T:C1.Chart.AxisGroupSeparator">
            <summary>
            Specifies appearance of axis group separated.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisGroupSeparator.None">
            <summary>
            No separator.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisGroupSeparator.Vertical">
            <summary>
            Vertical line.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisGroupSeparator.Horizontal">
            <summary>
            Horizontal line.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisGroupSeparator.Grid">
            <summary>
            Grid (vertical and horizontal lines).
            </summary>
        </member>
        <member name="T:C1.Chart.DatetimeAxisGroupType">
            <summary>
            Specifies group type for time axis.
            </summary>
        </member>
        <member name="F:C1.Chart.DatetimeAxisGroupType.None">
            <summary>
            No grouping.
            </summary>
        </member>
        <member name="F:C1.Chart.DatetimeAxisGroupType.Year">
            <summary>
            Group by year.
            </summary>
        </member>
        <member name="F:C1.Chart.DatetimeAxisGroupType.Quarter">
            <summary>
            Group by quarter.
            </summary>
        </member>
        <member name="F:C1.Chart.DatetimeAxisGroupType.Month">
            <summary>
            Group by month.
            </summary>
        </member>
        <member name="F:C1.Chart.DatetimeAxisGroupType.Day">
            <summary>
            Group by day.
            </summary>
        </member>
        <member name="F:C1.Chart.DatetimeAxisGroupType.Hour">
            <summary>
            Group by hour.
            </summary>
        </member>
        <member name="T:C1.Chart.LinePatternEnum">
            <summary>
            Use the members of this enumeration to set the value of the LinePattern property in the ChartStyle class.
            </summary>
        </member>
        <member name="F:C1.Chart.LinePatternEnum.Dash">
            <summary>
            A dashed line.
            </summary>
        </member>
        <member name="F:C1.Chart.LinePatternEnum.DashDot">
            <summary>
            A line with alternating dashes and dots.
            </summary>
        </member>
        <member name="F:C1.Chart.LinePatternEnum.DashDotDot">
            <summary>
            A line with series consisting of a dash followed by two dots.
            </summary>
        </member>
        <member name="F:C1.Chart.LinePatternEnum.Dot">
            <summary>
            A dotted line.
            </summary>
        </member>
        <member name="F:C1.Chart.LinePatternEnum.None">
            <summary>
            No line is drawn.
            </summary>
        </member>
        <member name="F:C1.Chart.LinePatternEnum.Solid">
            <summary>
            A solid line.
            </summary>
        </member>
        <member name="T:C1.Chart.LegendScrollBars">
            <summary>
            Specifies which scroll bars wiil be visible in legend.
            </summary>
        </member>
        <member name="F:C1.Chart.LegendScrollBars.None">
            <summary>
            No scroll bars are shown.
            </summary>
        </member>
        <member name="F:C1.Chart.LegendScrollBars.Vertical">
            <summary>
            Show vertical scroll bar if available height is not enough to show all legend items.
            </summary>
        </member>
        <member name="T:C1.Chart.ErrorBarHelper">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.HitTestInfo">
            <summary>
            Contains information about a part of a FlexChart control at
            a specified coordinate.
            </summary>
        </member>
        <member name="P:C1.Chart.HitTestInfo.Series">
            <summary>
             Gets the chart series at the specified coordinates.
            </summary>
        </member>
        <member name="P:C1.Chart.HitTestInfo.PointIndex">
            <summary>
            Gets the data point index at the specified coordinates.
            </summary>
        </member>
        <member name="P:C1.Chart.HitTestInfo.ChartElement">
            <summary>
            Gets the chart element at the specified coordinates.
            </summary>
        </member>
        <member name="P:C1.Chart.HitTestInfo.Distance">
            <summary>
            Gets the distance from the closest data point.
            </summary>
        </member>
        <member name="P:C1.Chart.HitTestInfo.Item">
            <summary>
            Gets the data object that corresponds to the closest data point.
            </summary>
        </member>
        <member name="P:C1.Chart.HitTestInfo.X">
            <summary>
            Gets the x-value of the closest data point.
            </summary>
        </member>
        <member name="P:C1.Chart.HitTestInfo.Y">
            <summary>
            Gets the y-value of the closest data point.
            </summary>
        </member>
        <member name="M:C1.Chart.HitTestInfo.Format(System.String)">
            <summary>
            Formats the string.
            </summary>
            <param name="s">An input string.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="P:C1.Chart.HitTestInfo.Axis">
            <summary>
            Gets the axis instance at the specified coordinates when ChartElement = AxisX or AxisY.
            </summary>
        </member>
        <member name="P:C1.Chart.HitTestInfo.GroupIndex">
            <summary>
            Gets the group index of current data.
            For pie chart, it is an index of pie in multipie chart.
            </summary>
        </member>
        <member name="T:C1.Chart.Position">
            <summary>
            Specifies the position of chart element on the chart.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.Left">
            <summary>
            The element appears to the left.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.Right">
            <summary>
            The element appears to the right.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.Top">
            <summary>
            The item appears above.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.Bottom">
            <summary>
            The item appears below.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.Auto">
            <summary>
            The element is positioned automatically.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.None">
            <summary>
            The element is not visible.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.TopLeft">
            <summary>
            The element is at the top left aligned.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.TopRight">
            <summary>
            The element is at the top right aligned.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.BottomLeft">
            <summary>
            The element is at the bottom left aligned.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.BottomRight">
            <summary>
            The element is at the bottom right aligned.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.LeftTop">
            <summary>
            The element is at the left top aligned.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.LeftBottom">
            <summary>
            The element is at the left bottom aligned.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.RightTop">
            <summary>
            The element is at the right top aligned.
            </summary>
        </member>
        <member name="F:C1.Chart.Position.RightBottom">
            <summary>
            The element is at the right bottom aligned.
            </summary>
        </member>
        <member name="T:C1.Chart.AxisType">
            <summary>
            Specifies axis type. 
            </summary>
        </member>
        <member name="F:C1.Chart.AxisType.X">
            <summary>
            X-axis, horizontal.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisType.Y">
            <summary>
            Y-axis, vertical.
            </summary>
        </member>
        <member name="T:C1.Chart.TickMark">
            <summary>
            Specifies whether and where the axis tick marks appear.
            </summary>
        </member>
        <member name="F:C1.Chart.TickMark.None">
            <summary>
            No tick marks appear.
            </summary>
        </member>
        <member name="F:C1.Chart.TickMark.Outside">
            <summary>
            Tick marks appear outside the plot area.
            </summary>
        </member>
        <member name="F:C1.Chart.TickMark.Inside">
            <summary>
            Tick marks appear inside the plot area.
            </summary>
        </member>
        <member name="F:C1.Chart.TickMark.Cross">
            <summary>
            Tick marks cross the axis.
            </summary>
        </member>
        <member name="T:C1.Chart.AxisLabelAlignment">
            <summary>
            Specifies axis label position.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisLabelAlignment.Center">
            <summary>
            At the center.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisLabelAlignment.Left">
            <summary>
            At the left.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisLabelAlignment.Right">
            <summary>
            At the right.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisLabelAlignment.Top">
            <summary>
            At the top.
            </summary>
        </member>
        <member name="F:C1.Chart.AxisLabelAlignment.Bottom">
            <summary>
            At the bottom.
            </summary>
        </member>
        <member name="T:C1.Chart.TimeUnits">
            <summary>
            Specifies time axis units.
            </summary>
        </member>
        <member name="F:C1.Chart.TimeUnits.Day">
            <summary>
            Time units measured in days.
            </summary>
        </member>
        <member name="F:C1.Chart.TimeUnits.Week">
            <summary>
            Time units measured in weeks starting at the first of the year.
            </summary>
        </member>
        <member name="F:C1.Chart.TimeUnits.Month">
            <summary>
            Time units measured in months with the first day of each month.
            </summary>
        </member>
        <member name="F:C1.Chart.TimeUnits.Quarter">
            <summary>
            Time units measured in quarters with the first day of each quarter.
            </summary>
        </member>
        <member name="F:C1.Chart.TimeUnits.Year">
            <summary>
            Time units measured in years, with the first day of each year.
            </summary>
        </member>
        <member name="T:C1.Chart.IAxis">
            <summary>
            IAxis interface.
            </summary>
        </member>
        <member name="M:C1.Chart.IAxis.Convert(System.Double)">
            <summary>
            Converts from data to pixel coordinate.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IAxis.ConvertBack(System.Double)">
            <summary>
            Converts from pixel to data coordinate.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.IAxis.Position">
            <summary>
            Gets the axis position.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.AxisType">
            <summary>
            Gets the axis type.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.Origin">
            <summary>
            Gets the axis origin.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.Reversed">
            <summary>
            Whether the axis is reversed.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.Labels">
            <summary>
            Whether to draw labels.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.MajorTickMarks">
            <summary>
            Gets the position of major tick marks.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.MajorGrid">
            <summary>
            Whether to draw major grid.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.MajorUnit">
            <summary>
            Gets the major unit.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.MinorTickMarks">
            <summary>
            Gets the position of major tick marks.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.MinorGrid">
            <summary>
            Whether to draw major grid.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.MinorUnit">
            <summary>
            Gets the major unit.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.LogBase">
            <summary>
            Gets the logarithmic base.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.AxisLine">
            <summary>
            Whether to draw axis line.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.LabelAlignment">
            <summary>
            Gets the label alignment.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.LabelAngle">
            <summary>
            Gets the label rotation angle.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.Min">
            <summary>
            Gets the axis minimum.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.Max">
            <summary>
            Gets the axis maximum.
            </summary>
        </member>
        <member name="M:C1.Chart.IAxis.GetMin">
            <summary>
            Gets the actual minimum.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IAxis.GetMax">
            <summary>
            Gets the actual maximum.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.IAxis.Format">
            <summary>
            Gets the format of axis labels.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.Title">
            <summary>
            Gets the axis title. 
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.StaggeredLines">
            <summary>
            Gets the number of axis label levels.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.OverlappingLabels">
            <summary>
            Gets or sets a value indicating how to handle the overlapping axis labels.
            </summary>
        </member>
        <member name="M:C1.Chart.IAxis.GetHeight(C1.Chart.IRenderEngine,System.Double)">
            <summary>
            Gets the axis height.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="maxWidth">The maximum width.</param>
            <returns>The axis height.</returns>
        </member>
        <member name="P:C1.Chart.IAxis.AnnoSize">
            <summary>
            Gets or sets annotation label size.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.HasOrigin">
            <summary>
            Whether the origin is set.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.DesiredSize">
            <summary>
            Gets or sets the axis desired size.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.Chart">
            <summary>
            Gets or sets the parent chart.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.Rect">
            <summary>
            Gets the axis rectangle.
            </summary>
        </member>
        <member name="M:C1.Chart.IAxis.Layout(C1.Chart._Rect,C1.Chart._Rect)">
            <summary>
            Perfomes axis layout.
            </summary>
            <param name="axisRect"></param>
            <param name="plotRect"></param>
        </member>
        <member name="M:C1.Chart.IAxis.Render(C1.Chart.IRenderEngine)">
            <summary>
            Renders the axis.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
        </member>
        <member name="M:C1.Chart.IAxis.RenderPolar(C1.Chart.IRenderEngine,C1.Chart.IRadarChart)">
            <summary>
            Renders polar or radar axis.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="radarChart"></param>
        </member>
        <member name="M:C1.Chart.IAxis.UpdateActualLimits(System.Nullable{C1.Chart.DataType},System.Double,System.Double,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Double})">
            <summary>
            Updates axis limits.
            </summary>
            <param name="dataType"></param>
            <param name="dataMin"></param>
            <param name="dataMax"></param>
            <param name="labels"></param>
            <param name="values"></param>
        </member>
        <member name="M:C1.Chart.IAxis.FormatValue(System.Double)">
            <summary>
            Formats specified value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IAxis.SetCustomConversion(System.Func{System.Double,System.Double,System.Double,System.Double},System.Func{System.Double,System.Double,System.Double,System.Double})">
            <summary>
            Set custom conversion.
            </summary>
            <param name="convert"></param>
            <param name="convertBack"></param>
        </member>
        <member name="P:C1.Chart.IAxis.CustomLabels">
            <summary>
            Gets or sets custom axis labels.
            </summary>
        </member>
        <member name="M:C1.Chart.IAxis.GetValues">
            <summary>
            Gets label values.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.IAxis.ItemsSource">
            <summary>
            Gets the data source for axis labels.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.Binding">
            <summary>
            Gets the binding (property name) for axis labels.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.PlotAreaName">
            <summary>
            Gets the plot area name.
            </summary>
        </member>
        <member name="M:C1.Chart.IAxis.SetChartType(System.Nullable{C1.Chart.ChartType})">
            <summary>
            Sets the chart type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:C1.Chart.IAxis.GroupNames">
            <summary>
            Gets or sets the group names.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.GroupItemsPath">
            <summary>
            Gets or sets the items path.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.GroupSeparator">
            <summary>
            Gets the axis group separators
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.GroupProvider">
            <summary>
            Gets the axis group provider
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.GroupTitleAlignment">
            <summary>
            Gets the group title alignment.
            </summary>
        </member>
        <member name="M:C1.Chart.IAxis.GetGroupStyle">
            <summary>
            Gets the group style by name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IAxis.SetGroupStyle(C1.Chart._Style)">
            <summary>
            Sets group style with specified name.
            </summary>
            <param name="style"></param>
        </member>
        <member name="P:C1.Chart.IAxis.GroupVisibilityLevel">
            <summary>
            Gets the group visiblity level.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.TickLength">
            <summary>
            Gets or sets the tick length.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.LabelMin">
            <summary>
            Gets or sets whether the minimum axis value is always labeled.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.LabelMax">
            <summary>
            Gets or sets whether the maximum axis value is always labeled.
            </summary>
        </member>
        <member name="P:C1.Chart.IAxis.TimeUnit">
            <summary>
            Gets or sets the units for a time based axis.
            </summary>
        </member>
        <member name="T:C1.Chart.IScrollableAxis">
            <summary>
            Axis with scrollbar.
            </summary>
        </member>
        <member name="P:C1.Chart.IScrollableAxis.ScrollMin">
            <summary>
            Gets scrollbar minimum.
            </summary>
        </member>
        <member name="P:C1.Chart.IScrollableAxis.ScrollMax">
            <summary>
            Gest scrollbar maximum.
            </summary>
        </member>
        <member name="T:C1.Chart.IAxesProvider">
            <summary>
            Auxiliary axes, e.g. color axis.
            </summary>
        </member>
        <member name="M:C1.Chart.IAxesProvider.GetAxes">
            <summary>
            Gets the list of axes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.IAxis2">
            <summary>
            IAxis2 interface.
            </summary>
        </member>
        <member name="T:C1.Chart.IFormatValue">
            <summary>
            IFormatValue interface.
            </summary>
        </member>
        <member name="M:C1.Chart.IFormatValue.Format(System.Double)">
            <summary>
            Format specified value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.IAxisGroupProvider">
            <summary>
            Axis grouping provider.
            </summary>
        </member>
        <member name="M:C1.Chart.IAxisGroupProvider.GetLevels(C1.Chart.IRange)">
            <summary>
            Get number of levels for the specified range.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IAxisGroupProvider.GetRanges(C1.Chart.IRange,System.Int32)">
            <summary>
            Gets the list of ranges.
            </summary>
            <param name="range"></param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.IAxisGroupHeaderProvider">
            <summary>
            Axis group provider with header.
            </summary>
        </member>
        <member name="M:C1.Chart.IAxisGroupHeaderProvider.GetHeader(System.Int32)">
            <summary>
            Returns header for the specified level.
            </summary>
            <param name="level">Level.</param>
            <returns>The header.</returns>
        </member>
        <member name="T:C1.Chart.IRange">
            <summary>
            Data range.
            </summary>
        </member>
        <member name="P:C1.Chart.IRange.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:C1.Chart.IRange.Min">
            <summary>
            Gets or sets the minimum.
            </summary>
        </member>
        <member name="P:C1.Chart.IRange.Max">
            <summary>
            Gets or sets the maximum.
            </summary>
        </member>
        <member name="T:C1.Chart.DoubleRange">
            <summary>
            Numeric data range.
            </summary>
        </member>
        <member name="M:C1.Chart.DoubleRange.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Creates an instance of DoubleRange.
            </summary>
            <param name="name"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="P:C1.Chart.DoubleRange.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:C1.Chart.DoubleRange.FullName">
            <summary>
            Gets or sets the full name (e.g.) for tooltips.
            </summary>
        </member>
        <member name="P:C1.Chart.DoubleRange.Min">
            <summary>
            Gets or sets the minimum.
            </summary>
        </member>
        <member name="P:C1.Chart.DoubleRange.Max">
            <summary>
            Gets or sets the maximum.
            </summary>
        </member>
        <member name="T:C1.Chart.TimeRange">
            <summary>
            Time data range.
            </summary>
        </member>
        <member name="M:C1.Chart.TimeRange.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>
            Creates an instance of the TimeRange class.
            </summary>
            <param name="name"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="P:C1.Chart.TimeRange.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:C1.Chart.TimeRange.Min">
            <summary>
            Gets or sets the minimum.
            </summary>
        </member>
        <member name="P:C1.Chart.TimeRange.Max">
            <summary>
            Gets or sets the maximum.
            </summary>
        </member>
        <member name="P:C1.Chart.TimeRange.TimeMin">
            <summary>
            Gets or sets the minumum as DataTime value.
            </summary>
        </member>
        <member name="P:C1.Chart.TimeRange.TimeMax">
            <summary>
            Gets or sets the maximum as DataTime value.
            </summary>
        </member>
        <member name="T:C1.Chart.QuartileCalculation">
            <summary>
            Specifies the quartile calculation method of Box-whisker series.
            </summary>
        </member>
        <member name="F:C1.Chart.QuartileCalculation.InclusiveMedian">
            Include median value when calculate quartile. 
        </member>
        <member name="F:C1.Chart.QuartileCalculation.ExclusiveMedian">
            Exclude median value when calculate quartile. 
        </member>
        <member name="T:C1.Chart.BoxData">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.IBoxWhisker">
            <summary>
            IBoxWhisker interface.
            </summary>
        </member>
        <member name="P:C1.Chart.IBoxWhisker.ShowMeanLine">
            <summary>
            Gets or sets a value that determines whether to show the mean line for the Box-whisker series.
            </summary>
        </member>
        <member name="P:C1.Chart.IBoxWhisker.QuartileCalculation">
            <summary>
            Gets or sets a value that specifies the quartile calculation for the Box-whisker series.
            </summary>
        </member>
        <member name="P:C1.Chart.IBoxWhisker.GapWidth">
            <summary>
            Gets or sets a value that determines the gap width as a percentage for the Box-Whisker series.
            </summary>
            <remarks>The default value for this property is 0.1. The min value is 0 and max value is 1.</remarks>
        </member>
        <member name="P:C1.Chart.IBoxWhisker.GroupWidth">
            <summary>
            Gets or sets a value that determines the group width as a percentage for the Box-Whisker series.
            </summary>
            <remarks>The default value for this property is 0.8. The min value is 0 and max value is 1.</remarks>
        </member>
        <member name="P:C1.Chart.IBoxWhisker.ShowMeanMarks">
            <summary>
            Gets or sets a value that determines whether to show the mean marker for the Box-whisker series.
            </summary>
        </member>
        <member name="P:C1.Chart.IBoxWhisker.ShowInnerPoints">
            <summary>
            Gets or sets a value that determines whether to show the inner points for the Box-whisker series.
            </summary>
        </member>
        <member name="P:C1.Chart.IBoxWhisker.ShowOutliers">
            <summary>
            Gets or sets a value that determines whether to show the outliers for the Box-whisker series.
            </summary>
        </member>
        <member name="M:C1.Chart.IBoxWhisker.UpdateXItems(System.Collections.Generic.List{System.Object})">
            <summary>
            Update the list of x axis items
            </summary>
            <param name="items">the items of x axis</param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IBoxWhisker.GetXItemCount">
            <summary>
            Get the count of x axis items
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IBoxWhisker.GetBoxData">
            <summary>
            Get the data of box whisker
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.IBreakEven">
            <summary>
            IBreakEven interface.
            </summary>
        </member>
        <member name="T:C1.Chart.IBrushConverter">
            <summary>
            Brush converter interface
            </summary>
        </member>
        <member name="M:C1.Chart.IBrushConverter.Convert(System.Object)">
            <summary>
            Converts brush to string.
            </summary>
            <param name="brush"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IBrushConverter.ConvertBack(System.String)">
            <summary>
            Converts string to brush.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.IFontConverter">
            <summary>
            Font converter interface.
            </summary>
        </member>
        <member name="M:C1.Chart.IFontConverter.Convert(System.Object)">
            <summary>
            Converts font to font attributes.
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IFontConverter.ConvertBack(System.String,System.Double,System.Int32)">
            <summary>
            Converts string to font.
            </summary>
            <param name="name"></param>
            <param name="size"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.IChartBase">
            <summary>
            IChartBase interface.
            </summary>
        </member>
        <member name="P:C1.Chart.IChartBase.Legend">
            <summary>
            Gets the chart legend.
            </summary>
        </member>
        <member name="P:C1.Chart.IChartBase.Header">
            <summary>
            Gets the chart header.
            </summary>
        </member>
        <member name="P:C1.Chart.IChartBase.Footer">
            <summary>
            Gets the chart footer,
            </summary>
        </member>
        <member name="P:C1.Chart.IChartBase.SelectedIndex">
            <summary>
            Gets the selected index.
            </summary>
        </member>
        <member name="P:C1.Chart.IChartBase.SelectionMode">
            <summary>
            Gets the selection mode.
            </summary>
        </member>
        <member name="M:C1.Chart.IChartBase.OnRendering(C1.Chart.IRenderEngine,System.Double,System.Double)">
            <summary>
            Invoked before chart starts rendering.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
        </member>
        <member name="M:C1.Chart.IChartBase.OnRendered(C1.Chart.IRenderEngine,System.Double,System.Double)">
            <summary>
            Invoked after chart finishes rendering.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
        </member>
        <member name="M:C1.Chart.IChartBase.GetMargin">
            <summary>
            Gets the plot margin.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.IChart">
            <summary>
            IChart interface.
            </summary>
        </member>
        <member name="P:C1.Chart.IChart.ChartType">
            <summary>
            Gets the chart type.
            </summary>
        </member>
        <member name="P:C1.Chart.IChart.Stacking">
            <summary>
            Gets the chart stacking.
            </summary>
        </member>
        <member name="P:C1.Chart.IChart.AxisX">
            <summary>
            Gets the main x-axis.
            </summary>
        </member>
        <member name="P:C1.Chart.IChart.AxisY">
            <summary>
            Gets the main y-axis.
            </summary>
        </member>
        <member name="P:C1.Chart.IChart.DataLabel">
            <summary>
            Gets the chart data label.
            </summary>
        </member>
        <member name="M:C1.Chart.IChart.GetAxes">
            <summary>
            Gets the chart axes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.IChart.Series">
            <summary>
            Gets the series list.
            </summary>
        </member>
        <member name="P:C1.Chart.IChart.SelectedSeries">
            <summary>
            Gets the selected series.
            </summary>
        </member>
        <member name="M:C1.Chart.IChart.GetPlotRect">
            <summary>
            Gets the plot rectangle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IChart.GetPlotMargin">
            <summary>
            Gets the plot margin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IChart.IsRotated">
            <summary>
            Gets a value indicating whether the chart is rotated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IChart.GetXItems">
            <summary>
            Gets the list of x-axis items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IChart.GetOption(System.String)">
            <summary>
            Gets the chart option.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IChart.OnRenderingData(C1.Chart.IRenderEngine)">
            <summary>
            Invoked before chart data starts rendering.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
        </member>
        <member name="M:C1.Chart.IChart.OnLabelRendering(C1.Chart.IRenderEngine,System.String@,C1.Chart.ISeries,System.Int32,System.Double@,System.Double@)">
            <summary>
            Called before rendering label. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="text">Label text.</param>
            <param name="series">Chart series.</param>
            <param name="index">Series index.</param>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
            <returns>True if the render event should be canceled; otherwise, false.</returns>
        </member>
        <member name="M:C1.Chart.IChart.OnLabelRendered(C1.Chart.IRenderEngine,System.String,C1.Chart.ISeries,System.Int32,System.Double,System.Double)">
            <summary>
            Called after rendering label. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="text">Label text.</param>
            <param name="series">Chart series.</param>
            <param name="index">Series index.</param>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:C1.Chart.IChart.CreateSeries">
            <summary>
            Creates an instance of series.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IChart.GetPlotAreas">
            <summary>
            Gets the list of plot areas.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.ISupportCustomRenderEngine">
            <summary>
            Support of external render engines.
            </summary>
        </member>
        <member name="M:C1.Chart.ISupportCustomRenderEngine.Attach(C1.Chart.ICustomRenderEngine)">
            <summary>
            Attaches external render engine.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
        </member>
        <member name="M:C1.Chart.ISupportCustomRenderEngine.Render(C1.Chart.IRenderEngine,System.Int32,System.Int32)">
            <summary>
            Render the chart to external render engine.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
        </member>
        <member name="M:C1.Chart.ISupportCustomRenderEngine.Detach">
            <summary>
            Detaches external render engine.
            </summary>
        </member>
        <member name="T:C1.Chart.ICustomRenderEngine">
            <summary>
            External render engine interface.
            </summary>
        </member>
        <member name="M:C1.Chart.ICustomRenderEngine.Attach(C1.Chart.IChart)">
            <summary>
            Attach render engine to the chart.
            </summary>
            <param name="chart"></param>
        </member>
        <member name="M:C1.Chart.ICustomRenderEngine.Detach">
            <summary>
            Detach render engine from chart.
            </summary>
        </member>
        <member name="T:C1.Chart.IRadarChart">
            <summary>
            Radar chart interface.
            </summary>
        </member>
        <member name="P:C1.Chart.IRadarChart.Center">
            <summary>
            Gets the center.
            </summary>
        </member>
        <member name="M:C1.Chart.IRadarChart.Convert(C1.Chart._Point)">
            <summary>
            Converts the point.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IRadarChart.ConvertAngle(System.Double)">
            <summary>
            Converts the angle.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.IRadarChart.Radius">
            <summary>
            Gets the radius.
            </summary>
        </member>
        <member name="P:C1.Chart.IRadarChart.StartAngle">
            <summary>
            Gets or sets the starting angle.
            </summary>
        </member>
        <member name="P:C1.Chart.IRadarChart.Reversed">
            <summary>
            Whether the chart is reversed.
            </summary>
        </member>
        <member name="P:C1.Chart.IRadarChart.IsPolar">
            <summary>
            Whether the chart is polar.
            </summary>
        </member>
        <member name="T:C1.Chart.IRenderer">
            <summary>
            Chart renderer.
            </summary>
        </member>
        <member name="M:C1.Chart.IRenderer.Render(C1.Chart.IRenderEngine,System.Double,System.Double)">
            <summary>
            Render element.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="T:C1.Chart.IHitTester">
            <summary>
            His tester.
            </summary>
        </member>
        <member name="M:C1.Chart.IHitTester.Add(C1.Chart._Rect,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Add data rect.
            </summary>
            <param name="rect"></param>
            <param name="si"></param>
            <param name="pi"></param>
            <param name="datax"></param>
            <param name="datay"></param>
        </member>
        <member name="T:C1.Chart.ICustomRendering">
            <summary>
            Custom renering.
            </summary>
        </member>
        <member name="M:C1.Chart.ICustomRendering.OnRendering(C1.Chart.IRenderEngine)">
            <summary>
            Called before rendering.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ICustomRendering.OnRendered(C1.Chart.IRenderEngine)">
            <summary>
            Called after rendering.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
        </member>
        <member name="T:C1.Chart.IValueProvider">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.IAnimatedChart">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.IMetricProvider">
            <summary>
            Metric provider.
            </summary>
        </member>
        <member name="M:C1.Chart.IMetricProvider.GetMetric(System.String)">
            <summary>
            Gets metric.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IMetricProvider.SetMetric(System.String,System.Double)">
            <summary>
            Sets metric.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:C1.Chart.ErrorAmount">
            <summary>
            Specifies the error amount of the series, it can be a standard error amount, a percentage or a standard deviation.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorAmount.FixedValue">
            <summary>
            Indicates the error with a fixed value. 
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorAmount.Percentage">
            <summary>
            Indicates the error with a percentage value.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorAmount.StandardDeviation">
            <summary>
            Indicates the error with the standard deviation.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorAmount.StandardError">
            <summary>
            Indicates the error with the standard error.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorAmount.Custom">
            <summary>
            Indicates the error with the custom value.
            </summary>
        </member>
        <member name="T:C1.Chart.ErrorBarEndStyle">
            <summary>
            Specifies the end style of the error bar.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorBarEndStyle.Cap">
            <summary>
            Error bar with cap.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorBarEndStyle.NoCap">
             <summary>
            Error bar without cap. 
             </summary>
        </member>
        <member name="T:C1.Chart.ErrorBarDirection">
            <summary>
            Specifies the direction of the error bar.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorBarDirection.Both">
            <summary>
            Shows both direction.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorBarDirection.Minus">
            <summary>
            Only shows minus direction.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorBarDirection.Plus">
            <summary>
            Only shows plus direction.
            </summary>
        </member>
        <member name="T:C1.Chart.ErrorValueType">
            <summary>
            Specifies the type of error value.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorValueType.Minus">
            <summary>
            Minus error value.
            </summary>
        </member>
        <member name="F:C1.Chart.ErrorValueType.Plus">
            <summary>
            TPlus error value.
            </summary>
        </member>
        <member name="T:C1.Chart.IErrorBar">
            <summary>
            IErrorBar interface
            </summary>
        </member>
        <member name="P:C1.Chart.IErrorBar.Direction">
            <summary>
            Gets or sets a value that specifies the direction of the error.
            </summary>
        </member>
        <member name="P:C1.Chart.IErrorBar.EndStyle">
            <summary>
            Gets or sets a value that specifies the end style of the series.
            </summary>
        </member>
        <member name="P:C1.Chart.IErrorBar.ErrorAmount">
            <summary>
            Gets or sets a value that specifies the error amount of the series.
            </summary>
        </member>
        <member name="P:C1.Chart.IErrorBar.ErrorValue">
            <summary>
            Gets or sets a value that specifies the error value of the series.
            </summary>
            <remarks>
            This property should be work with errorAmount property.
            If ErrorAmount is ErrorAmount.FixedValue, the value property is a fixed number value.
            If ErrorAmount is ErrorAmount.Percentage, the value property is a percentage number value between 0 and 1.
            If ErrorAmount is ErrorAmount.StandardDeviation, the value property is a percentage number of calculated standard deviation value.
            </remarks>
        </member>
        <member name="P:C1.Chart.IErrorBar.CustomPlusErrorValue">
            <summary>
            Gets or sets a value that specifies the custom plus error value.
            </summary>
            <remarks>
            If ErrorAmount is ErrorAmount.Custom, the value will be used.
            </remarks>
        </member>
        <member name="P:C1.Chart.IErrorBar.CustomMinusErrorValue">
            <summary>
            Gets or sets a value that specifies the cumstom minus error value.
            </summary>
            <remarks>
            If ErrorAmount is ErrorAmount.Custom, the value will be used.
            </remarks>
        </member>
        <member name="M:C1.Chart.IFunction.Calculate(System.Double)">
            <summary>
             Return the result of function f(parameter)
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.IDistributionSeries">
            <summary>
            General distribution series
            </summary>
        </member>
        <member name="P:C1.Chart.IDistributionSeries.BinWidth">
            <summary>
            Gets or sets the bin width
            </summary>       
        </member>
        <member name="T:C1.Chart.IHistogramSeries">
            <summary>
            Histogram series
            </summary>
        </member>
        <member name="P:C1.Chart.IHistogramSeries.NormalCurve">
            <summary>
            Gets or sets the normal curve
            </summary>       
        </member>
        <member name="P:C1.Chart.IHistogramSeries.HistogramAppearance">
            <summary>
            Gets the histogram appearance
            </summary>     
        </member>
        <member name="P:C1.Chart.IHistogramSeries.CumulativeMode">
            <summary>
            Gets sets the cumulative mode state
            </summary>     
        </member>
        <member name="T:C1.Chart.INormalCurve">
            <summary>
            Normal Curve <see href="http://helpcentral.componentone.com/nethelp/c1chart2d/frequencygraph.html"></see>
            </summary>
        </member>
        <member name="P:C1.Chart.INormalCurve.Visible">
            <summary>
            Gets or sets the visible of normal curve
            </summary>   
        </member>
        <member name="T:C1.Chart.HistogramAppearance">
            <summary>
            Histogram appearance enums. 
            </summary>
        </member>
        <member name="F:C1.Chart.HistogramAppearance.Histogram">
            <summary>
            Histogram
            </summary>   
        </member>
        <member name="F:C1.Chart.HistogramAppearance.FrequencyPolygon">
            <summary>
            FrequencyPolygon
            </summary>   
        </member>
        <member name="F:C1.Chart.HistogramAppearance.HistogramAndFrequencyPolygon">
            <summary>
            Histogram and FrequencyPolygon
            </summary>   
        </member>
        <member name="T:C1.Chart.ILegend">
            <summary>
            ILegend interface.
            </summary>
        </member>
        <member name="P:C1.Chart.ILegend.Position">
            <summary>
            Gets or sets the legend position.
            </summary>
        </member>
        <member name="P:C1.Chart.ILegend.ItemMaxWidth">
            <summary>
            Gets or sets the legend max width.
            </summary>
        </member>
        <member name="P:C1.Chart.ILegend.TextWrapping">
            <summary>
            Gets or sets the legend text wrap mode.
            </summary>
        </member>
        <member name="M:C1.Chart.ILegend.GetPosition(System.Double,System.Double)">
            <summary>
            Gets the automatic position.
            </summary>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
            <returns>The legend automatic position</returns>
        </member>
        <member name="M:C1.Chart.ILegend.GetDesiredSize(C1.Chart.IRenderEngine,System.Double,System.Double)">
            <summary>
            Gets the desired legend size.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
            <returns>The desired legend size.</returns>
        </member>
        <member name="M:C1.Chart.ILegend.Render(C1.Chart.IRenderEngine,C1.Chart.Position,C1.Chart._Rect)">
            <summary>
            Render the legend.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="pos"></param>
            <param name="rect"></param>
        </member>
        <member name="M:C1.Chart.ILegend.HitTest(System.Double,System.Double)">
            <summary>
            Hit testing.
            </summary>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
            <returns>Hit test result.</returns>
        </member>
        <member name="P:C1.Chart.ILegend.Title">
            <summary>
            Gets the legend title.
            </summary>
        </member>
        <member name="P:C1.Chart.ILegend.Orientation">
            <summary>
            Gets the legend orientation.
            </summary>
        </member>
        <member name="P:C1.Chart.ILegend.Reversed">
            <summary>
            Gets or sets the legend reversed order.
            </summary>
        </member>
        <member name="T:C1.Chart.IScrollableLegend">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.IPieChart">
            <summary>
            Generic pie chart.
            </summary>
        </member>
        <member name="M:C1.Chart.IPieChart.GetValues">
            <summary>
            Gets the data values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IPieChart.GetNames">
            <summary>
            Gets the data names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IPieChart.GetItem(System.Int32)">
            <summary>
            Gets item by index.
            </summary>
            <param name="i">Index of data point.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IPieChart.GetLegendLabels">
            <summary>
            Gets the legend labels.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.IPieChart.StartAngle">
            <summary>
            Gets the starting angle.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieChart.InnerRadius">
            <summary>
            Gets the inner radius.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieChart.SelectedItemPosition">
            <summary>
            Gets the selected item position.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieChart.SelectedItemOffset">
            <summary>
            Gets the selected item offset.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieChart.Offset">
            <summary>
            Gets the offset.
            </summary>
        </member>
        <member name="P:C1.Chart.IPieChart.Reversed">
            <summary>
            Gest whether the chart reversed.
            </summary>
        </member>
        <member name="M:C1.Chart.IPieChart.GetSum">
            <summary>
            Gets the sum of data values.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.IPieChart.DataLabel">
            <summary>
            Gets the data label.
            </summary>
        </member>
        <member name="M:C1.Chart.IPieChart.OnSliceRendering(C1.Chart.IRenderEngine,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Called before rendering slice. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="index">Index of data point.</param>
            <param name="centerX">Pie center coordinate.</param>
            <param name="centerY">Pie center coordinate.</param>
            <param name="radius">Pie radius.</param>
            <param name="innerRadius">Pie inner radius.</param>
            <param name="angle">Slice angle.</param>
            <param name="sweep">Slice sweep.</param>
            <returns>Whether to perform default symbol rendering.</returns>
        </member>
        <member name="M:C1.Chart.IPieChart.OnSliceRendered(C1.Chart.IRenderEngine,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Called after rendering slice. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="index">Index of data point.</param>
            <param name="centerX">Pie center X coordinate.</param>
            <param name="centerY">Pie center Y coordinate.</param>
            <param name="radius">Pie radius.</param>
            <param name="innerRadius">Pie inner radius.</param>
            <param name="angle">Slice angle.</param>
            <param name="sweep">Slice sweep.</param>
        </member>
        <member name="M:C1.Chart.IPieChart.OnLabelRendering(C1.Chart.IRenderEngine,System.String@,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Called before rendering label. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="text">Label text.</param>
            <param name="centerX">Pie center X coordinate.</param>
            <param name="centerY">Pie center Y coordinate.</param>
            <param name="index">Point index.</param>
            <param name="radius">Pie radius.</param>
            <param name="innerRadius">Pie inner radius.</param>
            <param name="angle">Slice angle.</param>
            <param name="sweep">Slice sweep.</param>
            <returns>True if the render event should be canceled; otherwise, false.</returns>
        </member>
        <member name="M:C1.Chart.IPieChart.OnLabelRendered(C1.Chart.IRenderEngine,System.String,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Called after rendering label. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="text">Label text.</param>
            <param name="centerX">Pie center X coordinate.</param>
            <param name="centerY">Pie center Y coordinate.</param>
            <param name="index">Point index.</param>
            <param name="radius">Pie radius.</param>
            <param name="innerRadius">Pie inner radius.</param>
            <param name="angle">Slice angle.</param>
            <param name="sweep">Slice sweep.</param>
        </member>
        <member name="T:C1.Chart.ISunburst">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.IAnimatedPieChart">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.IPlotArea">
            <summary>
            Generic plot area.
            </summary>
        </member>
        <member name="P:C1.Chart.IPlotArea.Row">
            <summary>
            Row index.
            </summary>
        </member>
        <member name="P:C1.Chart.IPlotArea.Column">
            <summary>
            Column index
            </summary>
        </member>
        <member name="P:C1.Chart.IPlotArea.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:C1.Chart.IPlotArea.Rect">
            <summary>
            Rectangle.
            </summary>
        </member>
        <member name="P:C1.Chart.IPlotArea.Height">
            <summary>
            Get the height of plot area.
            </summary>
        </member>
        <member name="P:C1.Chart.IPlotArea.Width">
            <summary>
            Get the width of plot area.
            </summary>
        </member>
        <member name="T:C1.Chart.IRangedHistogramSeries">
            <summary>
            Defines the ranged histogram series properties and methods.
            </summary>
        </member>
        <member name="P:C1.Chart.IRangedHistogramSeries.BinMode">
            <summary>
            The mode of histogram bin.
            </summary>
        </member>
        <member name="P:C1.Chart.IRangedHistogramSeries.NumberOfBins">
            <summary>
            The number of bins for the histogram, including the overflow and underflow bins.
            </summary>
        </member>
        <member name="M:C1.Chart.IRangedHistogramSeries.GetXLabels">
            <summary>
            Calculates and returns an array of strings of X-axis labels.
            </summary>
            <returns>Array of strings of X-axis labels.</returns>
        </member>
        <member name="P:C1.Chart.IRangedHistogramSeries.OverflowBin">
            <summary>
            A value to create a bin for all values above it.
            </summary>
        </member>
        <member name="P:C1.Chart.IRangedHistogramSeries.UnderflowBin">
            <summary>
            A value to create a bin for all values below or equal to it.
            </summary>
        </member>
        <member name="P:C1.Chart.IRangedHistogramSeries.ShowOverflowBin">
            <summary>
            Gets or sets whether the histogram shows the overflow bin.
            </summary>
        </member>
        <member name="P:C1.Chart.IRangedHistogramSeries.ShowUnderflowBin">
            <summary>
            Gets or sets whether the histogram shows the underflow bin.
            </summary>
        </member>
        <member name="P:C1.Chart.IRangedHistogramSeries.SortDescending">
            <summary>
            Gets or sets whether the ranged histogram sort descending.
            </summary>
        </member>
        <member name="T:C1.Chart.IRenderEngine">
            <summary>
            Render engine.
            </summary>
        </member>
        <member name="M:C1.Chart.IRenderEngine.SetStroke(System.Object)">
            <summary>
            Sets the current stroke brush.
            </summary>
            <param name="brush">Native brush or argb color as integer.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.SetStrokeThickness(System.Double)">
            <summary>
            Sets the stroke thickness.
            </summary>
            <param name="thickness"></param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.SetStrokePattern(System.Double[])">
            <summary>
            Sets the stroke pattern.
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.SetFill(System.Object)">
            <summary>
            Sets the fill brush.
            </summary>
            <param name="brush"></param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.SetOpacity(System.Object,System.Double)">
            <summary>
            Changes the brush opacity.
            </summary>
            <param name="brush">Brush object</param>
            <param name="opacity">Opacity</param>
            <returns>Brush object</returns>
        </member>
        <member name="M:C1.Chart.IRenderEngine.SetFont(System.Object)">
            <summary>
            Sets the font.
            </summary>
            <param name="font">Native font object.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.DrawLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw line between two points using current stroke attributes.
            </summary>
            <param name="x1">x-coordinate of first point.</param>
            <param name="y1">y-coordinate of first point.</param>
            <param name="x2">x-coordinate of second point.</param>
            <param name="y2">y-coordinate of second point.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.DrawLines(System.Double[],System.Double[])">
            <summary>
            Draw lines using specified coordinates.
            </summary>
            <param name="xs">Array of x-coordinates.</param>
            <param name="ys">Array of y-coordinates.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.DrawRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw rectangle with currect stroke and fill.
            </summary>
            <param name="x">x-coordinate of rectangle.</param>
            <param name="y">y-coordinate of rectangle.</param>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.DrawPolygon(System.Double[],System.Double[])">
            <summary>
            Draw polygon with currect stroke and fill.
            </summary>
            <param name="xs">Array of x-coordinates.</param>
            <param name="ys">Array of y-coordinates.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.DrawEllipse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw ellipse with currect stroke and fill.
            </summary>
            <param name="cx">X-coordinate of ellipse center.</param>
            <param name="cy">Y-coordinate of ellipse center.</param>
            <param name="rx">x-radius.</param>
            <param name="ry">y-radius.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.DrawImage(System.Object,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw image using special source.
            </summary>
            <param name="source">the source of image.</param>
            <param name="x">X coordinate of image.</param>
            <param name="y">Y coordinate of image.</param>
            <param name="w">Image width.</param>
            <param name="h">Image height.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.MeasureString(System.String)">
            <summary>
            Measures size of string.
            </summary>
            <param name="s">String to measure.</param>
            <returns>Size.</returns>
        </member>
        <member name="M:C1.Chart.IRenderEngine.MeasureString(System.String,C1.Chart._Size)">
            <summary>
            Measures size of string in layout area.
            </summary>
            <param name="s">String to measure.</param>
            <param name="sz">Layout size.</param>
            <returns>Size.</returns>
        </member>
        <member name="M:C1.Chart.IRenderEngine.DrawString(System.String,C1.Chart._Point)">
            <summary>
            Draw string at specified position.
            </summary>
            <param name="s">String to draw.</param>
            <param name="pos">Position.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.DrawString(System.String,C1.Chart._Rect,C1.Chart.TextWrapping)">
            <summary>
            Draw string at specified area.
            </summary>
            <param name="s">String to draw.</param>
            <param name="area">Area.</param>
            <param name="textWrapping">Text wrapping.</param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.DrawStringRotated(System.String,C1.Chart._Point,C1.Chart._Point,System.Double)">
            <summary>
            Draw rotated string at specified position.
            </summary>
            <param name="s"></param>
            <param name="pos"></param>
            <param name="center"></param>
            <param name="angle"></param>
        </member>
        <member name="M:C1.Chart.IRenderEngine.SetClipRect(System.Nullable{C1.Chart._Rect})">
            <summary>
            Sets clip rectangle.
            </summary>
            <param name="rect">Clip rectangle. Null clear clipping rectangle.</param>
        </member>
        <member name="T:C1.Chart.IRenderEngine2">
            <summary>
            Render engine for pie chart.
            </summary>
        </member>
        <member name="M:C1.Chart.IRenderEngine2.DrawPieSegment(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws pie segment.
            </summary>
            <param name="cx"></param>
            <param name="cy"></param>
            <param name="radius"></param>
            <param name="angle"></param>
            <param name="sweep"></param>
        </member>
        <member name="M:C1.Chart.IRenderEngine2.DrawDonutSegment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws donut segment.
            </summary>
            <param name="cx"></param>
            <param name="cy"></param>
            <param name="radius"></param>
            <param name="innerRadius"></param>
            <param name="angle"></param>
            <param name="sweep"></param>
        </member>
        <member name="T:C1.Chart.ISeries">
            <summary>
            ISeries interface.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.ChartType">
            <summary>
            Gets or sets the chart type.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.Visibility">
            <summary>
            Gets or sets the series visibility.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.Name">
            <summary>
            Gets or sets the series name.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.AxisX">
            <summary>
            Gets or sets the series x-axis.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.AxisY">
            <summary>
            Gets or sets the series y-axis.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.Chart">
            <summary>
            Gets or sets the chart.
            </summary>
        </member>
        <member name="M:C1.Chart.ISeries.GetValues(System.Int32)">
            <summary>
            Gets the data values.
            </summary>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ISeries.GetDataType(System.Int32)">
            <summary>
            Gets the data type.
            </summary>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ISeries.GetLegendItemName(System.Int32)">
            <summary>
            Gets the name of legend.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ISeries.GetLegendItemGroup(System.Int32)">
            <summary>
            Gets the name of legend group.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ISeries.GetLegendItemImageSource(System.Int32,C1.Chart._Size@)">
            <summary>
            Gets the image source for the icon presented for the legend item.
            </summary>
            <param name="index"></param>
            <param name="sz"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ISeries.GetLegendItemStyle(System.Int32)">
            <summary>
            Gets the style of legend.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ISeries.GetLegendItemLength">
            <summary>
            Get the number of series items in the legend.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.SymbolSize">
            <summary>
            Gets the series symbol size.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.SymbolMarker">
            <summary>
            Gets the series symbol marker.
            </summary>
        </member>
        <member name="M:C1.Chart.ISeries.GetItem(System.Int32)">
            <summary>
            Gets the data item by index. 
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.ISeries.HasCustomSymbol">
            <summary>
            Whether the series has custom symbol rendering.
            </summary>
        </member>
        <member name="M:C1.Chart.ISeries.OnSymbolRendering(C1.Chart.IRenderEngine,System.Int32,System.Double,System.Double)">
            <summary>
            Called before rendering symbol.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="i">Index of data point.</param>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
            <returns>Whether to perform default symbol rendering.</returns>
        </member>
        <member name="M:C1.Chart.ISeries.OnSymbolRendered(C1.Chart.IRenderEngine,System.Int32,System.Double,System.Double)">
            <summary>
            Called after rendering symbol. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="i">Index of data point.</param>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
        </member>
        <member name="M:C1.Chart.ISeries.OnRendering(C1.Chart.IRenderEngine)">
            <summary>
            Called before rendering.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.ISeries.OnRendered(C1.Chart.IRenderEngine)">
            <summary>
            Called after rendering.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
        </member>
        <member name="P:C1.Chart.ISeries.DataSource">
            <summary>
            Gets or sets data source.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.Binding">
            <summary>
            Gets or sets the binding.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.BindingX">
            <summary>
            Gets or sets the x-binding.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.StackingGroup">
            <summary>
            Gets or sets the group index for series, only effect in bar and column chart type.
            </summary>
        </member>
        <member name="P:C1.Chart.ISeries.LegendGroup">
            <summary>
            Gets or sets the legend group title in which the series should be included.
            </summary>
        </member>
        <member name="M:C1.Chart.ISeries.GetDataRect(C1.Chart._Rect)">
            <summary>
            Get the series bounding rectangle in data coordinates.
            </summary>
            <param name="currentRect">The current rectangle of chart</param>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.ISeries.DataLabel">
            <summary>
            Gets the data label.
            </summary>
        </member>
        <member name="T:C1.Chart.IDataLabelProvider">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.ILegendItemsProvider">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.ITrendLine">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.IStyleProvider">
            <summary>
            IStyle provider interface.
            </summary>
        </member>
        <member name="M:C1.Chart.IStyleProvider.GetStyle(System.String)">
            <summary>
            Gets the style by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IStyleProvider.SetStyle(C1.Chart._Style,System.String)">
            <summary>
            Sets style with specified name.
            </summary>
            <param name="style"></param>
            <param name="name"></param>
        </member>
        <member name="T:C1.Chart.IStyleConverter">
            <summary>
            Style converter.
            </summary>
        </member>
        <member name="M:C1.Chart.IStyleConverter.Convert(C1.Chart.IStyleProvider,C1.Chart._Style,System.String)">
            <summary>
            Converts the style.
            </summary>
            <param name="provider"></param>
            <param name="style"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.IWaterfall">
            <summary>
            IWaterfall interface.
            </summary>
        </member>
        <member name="P:C1.Chart.IWaterfall.ConnectorLines">
            <summary>
            Gets or sets a value that determines whether to show connector lines.
            </summary>
        </member>
        <member name="P:C1.Chart.IWaterfall.IntermediateTotalLabels">
            <summary>
            Gets or sets the value of the property that contains the label of the intermediate total bar, it should be an array or a string.
            </summary>
        </member>
        <member name="P:C1.Chart.IWaterfall.IntermediateTotalPositions">
            <summary>
            Gets or sets the value of the property that contains the index for positions of the intermediate total bar.
            </summary>
        </member>
        <member name="P:C1.Chart.IWaterfall.RelativeData">
            <summary>
            Gets or sets a value that determines whether the given data is relative.
            </summary>
        </member>
        <member name="P:C1.Chart.IWaterfall.ShowIntermediateTotal">
            <summary>
            Gets or sets a value that determines whether to show the intermediate total bar.
            </summary>
        </member>
        <member name="P:C1.Chart.IWaterfall.ShowTotal">
            <summary>
            Gets or sets a value that determines whether show total bar.
            </summary>
        </member>
        <member name="P:C1.Chart.IWaterfall.Start">
            <summary>
            Gets or sets a value that determines the value of the start bar.
            </summary>
        </member>
        <member name="P:C1.Chart.IWaterfall.StartLabel">
            <summary>
            Identifies the Start dependency property.
            </summary>
        </member>
        <member name="P:C1.Chart.IWaterfall.TotalLabel">
            <summary>
            Gets or sets the label of the total bar.
            </summary>
        </member>
        <member name="M:C1.Chart.IWaterfall.GetYValues">
            <summary>
            Gets the list of y axis values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IWaterfall.IsIntermediateTotal(System.Int32)">
            <summary>
            Checks whether the item is intermediate total or not.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart.IWaterfall.UpdateXItems(System.Collections.Generic.List{System.Object})">
            <summary>
            Updates the list of x axis items.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.LeastSquaresMethod">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.BaseHistogramCalculator">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.HistogramCalculator">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.RegressionStatistics">
            <summary>
            Contains main statistical characteristics of data set. 
            </summary>
        </member>
        <member name="M:C1.Chart.RegressionStatistics.#ctor(System.Double[],System.Double[],System.Int32)">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="P:C1.Chart.RegressionStatistics.Sse">
            <summary>
            Gets the sum of squares error (SSE) also known as residual sum of squares (RSS).
            </summary>
        </member>
        <member name="P:C1.Chart.RegressionStatistics.Ssr">
            <summary>
            Gets the sum of squares due to regression (SSR) also known as explained sum of squares (ESS).
            </summary>
        </member>
        <member name="P:C1.Chart.RegressionStatistics.StandardError">
            <summary>
            Gets the standard error for the y estimate.
            </summary>
        </member>
        <member name="P:C1.Chart.RegressionStatistics.Rsq">
            <summary>
            Gets R squared (coefficient of determination).
            </summary>
        </member>
        <member name="P:C1.Chart.RegressionStatistics.DegreesOfFreedom">
            <summary>
            Gets the degrees of freedom.
            </summary>
        </member>
        <member name="P:C1.Chart.RegressionStatistics.Fstat">
            <summary>
            Gets the F statistic, or the F-observed value. 
            </summary>
        </member>
        <member name="M:C1.Chart.RegressionStatistics.ToString">
            <inheritdoc/>
        </member>
        <member name="T:C1.Chart.IPalette">
            <summary>
            IPalette interface.
            </summary>
        </member>
        <member name="M:C1.Chart.IPalette.GetColor(System.Int32)">
            <summary>
            Gets the palette color by index.
            </summary>
            <param name="i">Index of data point.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Chart.Palette">
            <summary>
            Specifies chart palette.
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Standard">
            <summary>
            Standard.
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Cocoa">
            <summary>
            Cocoa
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Coral">
            <summary>
            Coral
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Dark">
            <summary>
            Dark
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Highcontrast">
            <summary>
            Highcontrast
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Light">
            <summary>
            Light
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Midnight">
            <summary>
            Midnight
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Modern">
            <summary>
            Modern
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Organic">
            <summary>
            Organic
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Slate">
            <summary>
            Slate
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Zen">
            <summary>
            Zen
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Cyborg">
            <summary>
            Cyborg
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Superhero">
            <summary>
            Superhero
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Flatly">
            <summary>
            Flatly
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Darkly">
            <summary>
            Darkly
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Cerulean">
            <summary>
            Cerulean
            </summary>
        </member>
        <member name="F:C1.Chart.Palette.Custom">
            <summary>
            Custom palette.
            </summary>
        </member>
        <member name="T:C1.Chart.PieRenderer">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.PieSlice">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.SunburstRenderer">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.RadarRenderer">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.ITreeMap">
            <summary>
            Represents the <see cref="!:C1.Win.Chart.TreeMap"/> properties and methods.
            </summary>
        </member>
        <member name="P:C1.Chart.ITreeMap.Binding">
            <summary>
            Gets the binding (property name) for axis labels.
            </summary>
        </member>
        <member name="P:C1.Chart.ITreeMap.BindingName">
            <summary>
            Gets the name of the property that contains the name of the data item.
            </summary>
        </member>
        <member name="P:C1.Chart.ITreeMap.ChildItemsPath">
            <summary>
            Gets the name of the property of collection that contains child items.
            </summary>
        </member>
        <member name="P:C1.Chart.ITreeMap.ChartType">
            <summary>
            Gets the chart type.
            </summary>
        </member>
        <member name="M:C1.Chart.ITreeMap.GetLegendLabels">
            <summary>
            Gets the legend labels.
            </summary>
            <returns>The array of legend label strings.</returns>
        </member>
        <member name="P:C1.Chart.ITreeMap.MaxDepth">
            <summary>
            Gets the maximum number of displayed node levels.
            </summary>
        </member>
        <member name="P:C1.Chart.ITreeMap.Items">
            <summary>
            The hierarchical TreeMap items.
            </summary>
        </member>
        <member name="P:C1.Chart.ITreeMap.SelectedItem">
            <summary>
            Gets the selected TreeMap item.
            </summary>
        </member>
        <member name="P:C1.Chart.ITreeMap.DataLabel">
            <summary>
            Gets the data label for TreeMap items.
            </summary>
        </member>
        <member name="M:C1.Chart.ITreeMap.OnLabelRendering(C1.Chart.IRenderEngine,System.String@,System.Object,C1.Chart._Point)">
            <summary>
            Called before rendering label. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="text">Label text.</param>
            <param name="item">The data object that corresponds to the closest data point.</param>
            <param name="pt">The mouse hit area.</param>
            <returns>True if the render event should be canceled; otherwise, false.</returns>
        </member>
        <member name="M:C1.Chart.ITreeMap.OnLabelRendered(C1.Chart.IRenderEngine,System.String,System.Object,C1.Chart._Point)">
            <summary>
            Called after rendering label. 
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="text">Label text.</param>
            <param name="item">The data object that corresponds to the closest data point.</param>
            <param name="pt">The mouse hit area.</param>
        </member>
        <member name="M:C1.Chart.ITreeMap.OnNodeRendering(C1.Chart.IRenderEngine,System.Object,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Called before rendering node.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="item">The data object that corresponds to the closest data point.</param>
            <param name="x">The top left X coordinate of the node rectangle.</param>
            <param name="y">The top let Y coordinate of the node rectangle.</param>
            <param name="width">The width of the node rectangle.</param>
            <param name="height">The height of the node rectangle.</param>
            <param name="depth">The depth of the node.</param>
            <param name="isTitle">Determines if the node is a title node or not.</param>
        </member>
        <member name="M:C1.Chart.ITreeMap.OnNodeRendered(C1.Chart.IRenderEngine,System.Object,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Render node using arguments.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
            <param name="item">The data object that corresponds to the closest data point.</param>
            <param name="x">The top left X coordinate of the node rectangle.</param>
            <param name="y">The top let Y coordinate of the node rectangle.</param>
            <param name="width">The width of the node rectangle.</param>
            <param name="height">The height of the node rectangle.</param>
            <param name="depth">The depth of the node.</param>
            <param name="isTitle">Determines if the node is a title node or not.</param>
        </member>
        <member name="T:C1.Chart.TreeMapItem">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.TreeMapType">
            <summary>
            Specifies the treemap type.
            </summary>
        </member>
        <member name="F:C1.Chart.TreeMapType.Squarified">
            <summary>
            Shows squarified treemap.
            </summary>
        </member>
        <member name="F:C1.Chart.TreeMapType.Horizontal">
            <summary>
            Shows horizontal squarified treemap.
            </summary>
        </member>
        <member name="F:C1.Chart.TreeMapType.Vertical">
            <summary>
            Shows vertical squarified treemap.
            </summary>
        </member>
        <member name="T:C1.Chart.TreeMapRenderer">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.TreeMapUtils">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.CollectionObserver">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart._Rect">
            <summary>
            Represents rectangle.
            </summary>
        </member>
        <member name="F:C1.Chart._Rect.Left">
            <summary>
            Left coordinate.
            </summary>
        </member>
        <member name="F:C1.Chart._Rect.Top">
            <summary>
            Top coordinate.
            </summary>
        </member>
        <member name="F:C1.Chart._Rect.Width">
            <summary>
            Width of rectangle.
            </summary>
        </member>
        <member name="F:C1.Chart._Rect.Height">
            <summary>
            Height of rectangle.
            </summary>
        </member>
        <member name="P:C1.Chart._Rect.Right">
            <summary>
            Gets the right coordinate of rectangle.
            </summary>
        </member>
        <member name="P:C1.Chart._Rect.Bottom">
            <summary>
            Gets the bottom coordinate of rectangle.
            </summary>
        </member>
        <member name="M:C1.Chart._Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create an instance of rectangle.
            </summary>
            <param name="l"></param>
            <param name="t"></param>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
        </member>
        <member name="M:C1.Chart._Rect.Contains(System.Double,System.Double)">
            <summary>
            Returns whether the point specified by coordinates is inside rectangle.
            </summary>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
            <returns></returns>
        </member>
        <member name="F:C1.Chart._Rect.Empty">
            <summary>
            Empty rectangle.
            </summary>
        </member>
        <member name="M:C1.Chart._Rect.op_Equality(C1.Chart._Rect,C1.Chart._Rect)">
            <summary>
            Equality operator. 
            </summary>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Rect.op_Inequality(C1.Chart._Rect,C1.Chart._Rect)">
            <summary>
            Non-equality operator.
            </summary>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Rect.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance. 
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Rect.GetHashCode">
            <summary>
            Returns the hash code of the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Rect.Intersect(C1.Chart._Rect)">
            <summary>
            Returns a value indicating whether the rectangle intersects with the specified rectangle.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Rect.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Rect.Inflate(System.Double,System.Double)">
            <summary>
            Inflate the rectangle.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:C1.Chart._Rect.Intersect(C1.Chart._Rect,C1.Chart._Rect)">
            <summary>
            Returns the intersection of two rectangles.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Chart._Rect.Center">
            <summary>
            Gets the centre of the rectangle.
            </summary>
        </member>
        <member name="M:C1.Chart._Rect.Round(System.Int32)">
            <summary>
            Rounds the rect.
            </summary>
            <param name="decimals"></param>
        </member>
        <member name="T:C1.Chart._Size">
            <summary>
            Represents size.
            </summary>
        </member>
        <member name="F:C1.Chart._Size.Width">
            <summary>
            Width.
            </summary>
        </member>
        <member name="F:C1.Chart._Size.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="M:C1.Chart._Size.#ctor(System.Double,System.Double)">
            <summary>
            Creates am instance of _Size.
            </summary>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
        </member>
        <member name="M:C1.Chart._Size.Max(C1.Chart._Size)">
            <summary>
            Returns the maximal size.
            </summary>
            <param name="sz">Size</param>
            <returns>Max size.</returns>
        </member>
        <member name="T:C1.Chart._Margin">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Chart._Margin.Left">
            <summary>
            Left margin.
            </summary>
        </member>
        <member name="F:C1.Chart._Margin.Right">
            <summary>
            Right margin.
            </summary>
        </member>
        <member name="F:C1.Chart._Margin.Top">
            <summary>
            Top margin.
            </summary>
        </member>
        <member name="F:C1.Chart._Margin.Bottom">
            <summary>
            Bottom margin.
            </summary>
        </member>
        <member name="M:C1.Chart._Margin.Apply(C1.Chart._Rect)">
            <summary>
            Applies margin to specified rectangle.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Chart._Point">
            <summary>
            Represents point.
            </summary>
        </member>
        <member name="F:C1.Chart._Point.X">
            <summary>
            X-coordinate.
            </summary>
        </member>
        <member name="F:C1.Chart._Point.Y">
            <summary>
            Y-coordinate.
            </summary>
        </member>
        <member name="M:C1.Chart._Point.#ctor(System.Double,System.Double)">
            <summary>
            Creates an instance of _Point.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:C1.Chart._Point.Clone">
            <summary>
            Clones the specified point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Point.op_Equality(C1.Chart._Point,C1.Chart._Point)">
            <summary>
            Equality operator. 
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Point.op_Inequality(C1.Chart._Point,C1.Chart._Point)">
            <summary>
            Non-equality operator.
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Point.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Point.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Chart._Style">
            <summary>
            Represents portable style.
            </summary>
        </member>
        <member name="P:C1.Chart._Style.Stroke">
            <summary>
            Gets or sets the stroke object.
            </summary>
        </member>
        <member name="P:C1.Chart._Style.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
        </member>
        <member name="P:C1.Chart._Style.StrokePattern">
            <summary>
            Gets or sets the stroke pattern.
            </summary>
        </member>
        <member name="P:C1.Chart._Style.Fill">
            <summary>
            Gets or sets the fill object.
            </summary>
        </member>
        <member name="P:C1.Chart._Style.Font">
            <summary>
            Gets or sets the font object.
            </summary>
        </member>
        <member name="P:C1.Chart._Style.HAlign">
            <summary>
            Gets or sets horizontal alignment.
            </summary>
        </member>
        <member name="P:C1.Chart._Style.VerticalText">
            <summary>
            Gets or sets a value indicating whether the text should be rendered vertically.
            </summary>
        </member>
        <member name="M:C1.Chart._Style.Combine(C1.Chart._Style)">
            <summary>
            Combines styles.
            </summary>
            <param name="parentStyle"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Chart._Style.SetStroke(C1.Chart.IRenderEngine)">
            <summary>
            Sets stroke options.
            </summary>
            <param name="engine">Render engine <see cref="T:C1.Chart.IRenderEngine"/> object.</param>
        </member>
        <member name="T:C1.Chart.TreeItem">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="P:C1.Chart.TreeItem.Name">
            <summary>
            The value of <see cref="P:C1.Chart.TreeItem.NameField"/>
            </summary>
        </member>
        <member name="P:C1.Chart.TreeItem.Value">
            <summary>
            The value of binding.
            </summary>
        </member>
        <member name="P:C1.Chart.TreeItem.Items">
            <summary>
            The hierarchical items.
            </summary>
        </member>
        <member name="P:C1.Chart.TreeItem.NameField">
            <summary>
            The name of property.
            </summary>
        </member>
        <member name="P:C1.Chart.TreeItem.ParentItem">
            <summary>
            Parent item.
            </summary>
        </member>
        <member name="P:C1.Chart.TreeItem.RootIndex">
            <summary>
            The index of the first level item.
            </summary>
        </member>
        <member name="P:C1.Chart.TreeItem.Index">
            <summary>
            The index of item.
            </summary>
        </member>
        <member name="P:C1.Chart.TreeItem.IsSelected">
            <summary>
            Determines whether the item is selected.
            </summary>
        </member>
        <member name="T:C1.Chart.GridUnitType">
            <summary>
            GridUnitType enum is used to indicate what kind of value the 
            GridLength is holding.
            </summary>
        </member>
        <member name="F:C1.Chart.GridUnitType.Auto">
            <summary>
            The value indicates that content should be calculated without constraints. 
            </summary>
        </member>
        <member name="F:C1.Chart.GridUnitType.Pixel">
            <summary>
            The value is expressed as a pixel.
            </summary>
        </member>
        <member name="F:C1.Chart.GridUnitType.Star">
            <summary>
            The value is expressed as a weighted proportion of available space.
            </summary>
        </member>
        <member name="T:C1.Chart.GridLength">
            <summary>
            GridLength is the type used for various length-like properties in the system, 
            that explicitely support Star unit type. For example, "Width", "Height" 
            properties of ColumnDefinition and RowDefinition used by Grid.
            </summary>
        </member>
        <member name="M:C1.Chart.GridLength.#ctor(System.Double)">
            <summary>
            Constructor, initializes the GridLength as absolute value in pixels.
            </summary>
            <param name="pixels">Specifies the number of 'device-independent pixels' </param>
        </member>
        <member name="M:C1.Chart.GridLength.#ctor(System.Double,C1.Chart.GridUnitType)">
            <summary>
            Constructor, initializes the GridLength and specifies what kind of value 
            it will hold.
            </summary>
            <param name="value">Value to be stored by this GridLength 
            instance.</param>        
            <param name="unit">Type of the value to be stored by this GridLength 
            instance.</param>
        </member>
        <member name="P:C1.Chart.GridLength.Value">
            <summary>
            Returns value part of this GridLength instance.
            </summary>
        </member>
        <member name="P:C1.Chart.GridLength.UnitType">
            <summary>
            Returns unit type of this GridLength instance.
            </summary>
        </member>
        <member name="P:C1.Chart.GridLength.IsStar">
            <summary>
            Returns <c>true</c> if this GridLength instance holds weighted propertion 
            of available space.
            </summary>
        </member>
        <member name="P:C1.Chart.GridLength.IsAbsolute">
            <summary>
            Returns <c>true</c> if this GridLength instance holds 
            an absolute (pixel) value.
            </summary>
        </member>
        <member name="P:C1.Chart.GridLength.IsAuto">
            <summary>
            Returns <c>true</c> if this GridLength instance is 
            automatic (not specified).
            </summary>
        </member>
        <member name="P:C1.Chart.GridLength.Auto">
            <summary>
            Returns initialized Auto GridLength value.
            </summary>
        </member>
        <member name="T:C1.Chart.CoreExtensions">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.WaterfallHelper">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.PieForceOptions">
            <summary>
            The pie force options class.
            </summary>
        </member>
        <member name="P:C1.Chart.PieForceOptions.Instance">
            <summary>
            Creates a new instance of <see cref="T:C1.Chart.PieForceOptions"/> class.
            </summary>
        </member>
        <member name="E:C1.Chart.PieForceOptions.PropertyChanged">
            <summary>
            Fires when <see cref = "T:C1.Chart.PieForceOptions"/> property was changed.
            </summary>
        </member>
        <member name="M:C1.Chart.PieForceOptions.SetField``1(``0@,``0,System.String)">
            <summary>
            Sets the field value.
            </summary>
            <typeparam name="T">The field type.</typeparam>
            <param name="field">The field.</param>
            <param name="value">The value to assign.</param>
            <param name="propertyName">The property name corresponding to field.</param>
            <returns>True if a value is assigned to the field, false otherwise.</returns>
        </member>
        <member name="P:C1.Chart.PieForceOptions.RadialDelta">
            <summary>
            Gets or sets the radial delta.
            </summary>
        </member>
        <member name="P:C1.Chart.PieForceOptions.CollideStrength">
            <summary>
            Gets or sets the collide strength.
            </summary>
        </member>
        <member name="P:C1.Chart.PieForceOptions.RadialStrength">
            <summary>
            Gets or sets the radial strength.
            </summary>
        </member>
        <member name="P:C1.Chart.PieForceOptions.Iterations">
            <summary>
            Gets or sets the number of calculation iterations.
            </summary>
        </member>
        <member name="T:C1.Chart.AnimationHelperBase">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.AnimationHelper">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.AnimationTransformEventArgs">
            <summary>
            Specifies arguments for AnimationTransform event.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationTransformEventArgs.State">
            <summary>
            Gets the animation state.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationTransformEventArgs.AxisType">
            <summary>
            Gets the axis type.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationTransformEventArgs.End">
            <summary>
            Gets the ending position.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationTransformEventArgs.Position">
            <summary>
            Gets the animation position (from 0.0 to 1.0).
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationTransformEventArgs.Series">
            <summary>
            Gets the current series.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationTransformEventArgs.PointIndex">
            <summary>
            Get the current point index.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationTransformEventArgs.Start">
            <summary>
            Gets the startig position.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationTransformEventArgs.Cancel">
            <summary>
            Whether to cancel the default animation.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationTransformEventArgs.Value">
            <summary>
            Gets or sets the value in data coordinates.
            </summary>
        </member>
        <member name="T:C1.Chart.AnimationType">
            <summary>
            Specifies animation type.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationType.All">
            <summary>
            All series are animated at the same time.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationType.Series">
            <summary>
            Series by series animation.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationType.Points">
            <summary>
            Point by point animation.
            </summary>
        </member>
        <member name="T:C1.Chart.AnimationDirection">
            <summary>
            Specifies animation direction.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationDirection.X">
            <summary>
            X (horizontal) direction.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationDirection.Y">
            <summary>
            Y (vertical) direction.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationDirection.XY">
            <summary>
            Both (X and Y) directions. 
            </summary>
        </member>
        <member name="T:C1.Chart.SliceAttribute">
            <summary>
            Specifies slice attribute for FlexPie animation.
            </summary>
        </member>
        <member name="F:C1.Chart.SliceAttribute.None">
            <summary>
            No attributes (animation is disabled).
            </summary>
        </member>
        <member name="F:C1.Chart.SliceAttribute.Radius">
            <summary>
            Radius or pie slice.
            </summary>
        </member>
        <member name="F:C1.Chart.SliceAttribute.Sweep">
            <summary>
            Sweep of  pie slice.
            </summary>
        </member>
        <member name="F:C1.Chart.SliceAttribute.Angle">
            <summary>
            Angle of pie slice.
            </summary>
        </member>
        <member name="T:C1.Chart.AnimationState">
            <summary>
            Specifies animation state.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationState.Load">
            <summary>
            Animation when loading data.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationState.Update">
            <summary>
            Animation when updating data.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationState.Delete">
            <summary>
            Animation when deleting data series.
            </summary>
        </member>
        <member name="T:C1.Chart.AnimationSettings">
            <summary>
            Animation settings.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationSettings.None">
            <summary>
            Animation disabled.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationSettings.Load">
            <summary>
            Shows animation during loading data.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationSettings.Update">
            <summary>
            Shows animation during updating data.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationSettings.AxesLoad">
            <summary>
            Animate axes during loading data.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationSettings.AxesUpdate">
            <summary>
            Animate axes during updating data.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationSettings.Axes">
            <summary>
            Animate axes during loading or updating data.
            </summary>
        </member>
        <member name="F:C1.Chart.AnimationSettings.All">
            <summary>
            Show all animations.
            </summary>
        </member>
        <member name="T:C1.Chart.AnimationOptions">
            <summary>
            Stores animation options.
            </summary>
        </member>
        <member name="E:C1.Chart.AnimationOptions.PropertyChanged">
            <summary>
            Fires when property value was changed.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationOptions.FPS">
            <summary>
            Gets or sets animation FPS (frame per second).
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationOptions.Duration">
            <summary>
            Gets or sets the animation duration.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationOptions.Easing">
            <summary>
            Gets or sets the animation easing.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationOptions.Type">
            <summary>
            Gets or sets the animation type.
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationOptions.Interval">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="M:C1.Chart.AnimationOptions.OnPropertyChanged(System.String)">
            <summary>
            Called when property was changed.
            </summary>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="T:C1.Chart.AnimationLoadOptions">
            <summary>
            Stores load animation option 
            </summary>
        </member>
        <member name="P:C1.Chart.AnimationLoadOptions.Direction">
            <summary>
            Gets or sets the animation direction.
            </summary>
        </member>
        <member name="T:C1.Chart.PieAnimationOptions">
            <summary>
            Stores animation options for FlexPie control.
            </summary>
        </member>
        <member name="P:C1.Chart.PieAnimationOptions.Attributes">
            <summary>
            Gets or sets the slice attributes for animation.
            </summary>
        </member>
        <member name="T:C1.Chart.Easing">
            <summary>
            Specifies easing function. Sets the timing function for the animation.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.Linear">
            <summary>
            Same speed from start to finish.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.Swing">
            <summary>
            It provides move or cause to move back and forth or from side to side while suspended or on an axis to an element.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.ExpIn">
            <summary>
            The animation starts slowly, accelerates towards the end using the formula f(t) = Math.Pow(2, 10 * t - 10).
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.ExpOut">
            <summary>
            The animation starts quickly and slows down towards the end using the formula f(t) = 1 - Math.Pow(2, -10 * t).
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.ExpInOut">
            <summary>
            The animation starts and ends slowly by exponential function.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.BackIn">
            <summary>
            The animation goes past the start and then accelerates as it reaches the end.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.BackOut">
            <summary>
            The animation starts fast, then slows and goes past the end where s = 1.70158, using the formula f(t) = --t * t * ((s + 1) * t + s) + 1.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.BackInOut">
            <summary>
            Starts the animation slowly as it overshoots in the start, then accelerates quickly before it slows and overshoots the end.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.BounceIn">
            <summary>
            The bouncing animation, when it starts slowly, accelerates towards the end using the formula f(t) = 1 - BounceOut(1 - t).
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.BounceOut">
            <summary>
            The bouncing animation, when it starts quickly and slows down towards the end.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.BounceInOut">
            <summary>
            The bouncing animation, when it starts and ends slowly.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.CircleIn">
            <summary>
            The animation uses an easing function that creates an animation that accelerates using the formula f(t) = 1 - Math.Sqrt(1 - t * t).
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.CircleOut">
            <summary>
            The animation uses an easing function that creates an animation that decelerates using the formula f(t) = Math.Sqrt(1 - --t * t).
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.CircleInOut">
            <summary>
            The animation uses an easing function, which creates a slow start and end for the animation.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.CubicIn">
            <summary>
            Represents an easing function that creates an animation that accelerates using the formula f(t) = t * t * t.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.CubicOut">
            <summary>
            Represents an easing function that creates an animation that decelerates using the formula f(t) = --t * t * t + 1.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.CubicInOut">
            <summary>
            Represents an easing function that creates an animation that decelerates using the formula f(t) = ((t *= 2) &lt;= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.ElasticIn">
            <summary>
            Represents an Ease function that creates an accelerating animation that resembles a spring that vibrates back and forth until it stops.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.ElasticOut">
            <summary>
            Represents a ease function that creates a spring-like slowing animation that oscillates back and forth until it stops.
            </summary>
        </member>
        <member name="F:C1.Chart.Easing.ElasticInOut">
            <summary>
            Represents a decelerate function that creates an animation that accelerates and decelerates, and resembles a spring that oscillates back and forth until it stops.
            </summary>
        </member>
        <member name="T:C1.Chart.PieAnimationHelper">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.AnnotationRenderEventArgs">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.AnnotationRenderer">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.AnnotationAttachment">
            <summary>
            Specifies the attachment of the annotation.
            </summary>
        </member>
        <member name="F:C1.Chart.Annotation.AnnotationAttachment.DataIndex">
            <summary>
            Coordinates of the annotation point are defined by the data series index and 
            the data point index.
            </summary>
        </member>
        <member name="F:C1.Chart.Annotation.AnnotationAttachment.DataCoordinate">
            <summary>
            Annotation point is specified in data coordinates.
            </summary>
        </member>
        <member name="F:C1.Chart.Annotation.AnnotationAttachment.Relative">
            <summary>
            Annotation point is specified as a relative position inside the control where
            (0,0) is the top left corner and (1,1) is the bottom right corner.
            </summary>
        </member>
        <member name="F:C1.Chart.Annotation.AnnotationAttachment.Absolute">
            <summary>
            The annotation point is specified in control's pixel coordinates.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.AnnotationPosition">
            <summary>
            Specifies the position of the annotation.
            </summary>
        </member>
        <member name="F:C1.Chart.Annotation.AnnotationPosition.Center">
            <summary>
            The annotation appears at the Center of the target point.
            </summary>
        </member>
        <member name="F:C1.Chart.Annotation.AnnotationPosition.Top">
            <summary>
            The annotation appears at the Top of the target point.
            </summary>
        </member>
        <member name="F:C1.Chart.Annotation.AnnotationPosition.Bottom">
            <summary>
            The annotation appears at the Bottom of the target point.
            </summary>
        </member>
        <member name="F:C1.Chart.Annotation.AnnotationPosition.Left">
            <summary>
            The annotation appears at the Left of the target point.
            </summary>
        </member>
        <member name="F:C1.Chart.Annotation.AnnotationPosition.Right">
            <summary>
            The annotation appears at the Right of the target point.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.IAnnotationBase">
            <summary>
            IBaseAnnotation interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IAnnotationBase.Attachment">
            <summary>
            Gets or sets the attachment of the annotation.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IAnnotationBase.Position">
            <summary>
            Gets or sets the position of annotation.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IAnnotationBase.Location">
            <summary>
            Gets or sets the location of annotation.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IAnnotationBase.PointIndex">
            <summary>
            Gets or sets the data point index of the annotation.
            Applies only when the <see cref="P:C1.Chart.Annotation.IAnnotationBase.Attachment"/> property is set to DataIndex.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IAnnotationBase.SeriesIndex">
            <summary>
            Gets or sets the data series index of the annotation.
            Applies only when the <see cref="P:C1.Chart.Annotation.IAnnotationBase.Attachment"/> is set to DataIndex.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IAnnotationBase.TooltipText">
            <summary>
            Gets or sets the tooltip of the annotation.
            </summary>
        </member>
        <member name="M:C1.Chart.Annotation.IAnnotationBase.GetSize">
            <summary>
            Gets the size of the annotation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Chart.Annotation.IAnnotationBase.Bounds">
            <summary>
            Gets the bounding box in pixel coordinates.
            </summary>
        </member>
        <member name="M:C1.Chart.Annotation.IAnnotationBase.Distance(System.Double,System.Double)">
            <summary>
            Returns distance from annotation to the specifies point.
            </summary>
            <param name="x">X pixel coordinate.</param>
            <param name="y">Y pixel coordinate.</param>
            <returns>The distance from annotation to the specifies point.</returns>
        </member>
        <member name="T:C1.Chart.Annotation.IAnnotationLayer">
            <summary>
            Annotation layer interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IAnnotationLayer.Annotations">
            <summary>
            Gets the annotation collection.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.ICircle">
            <summary>
            ICircle interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.ICircle.Radius">
            <summary>
            Gets or sets the radius of circle annotation.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.IEllipse">
            <summary>
            IEllipse interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IEllipse.Width">
            <summary>
            Gets or sets the width of ellipse annotation.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IEllipse.Height">
            <summary>
            Gets or sets the height of ellipse annotation.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.IImage">
            <summary>
            IImage interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IImage.SourceImage">
            <summary>
            Gets or sets the source of image annotation.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IImage.Width">
            <summary>
            Gets or sets the width of image annotation.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IImage.Height">
            <summary>
            Gets or sets the height of image annotation.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.ILine">
            <summary>
            ILine interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.ILine.Start">
            <summary>
            Gets or sets the start point of line annotation.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.ILine.End">
            <summary>
            Gets or sets the end point of line annotation.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.IPolygon">
            <summary>
            IPolygon interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IPolygon.Points">
            <summary>
            Gets the collection of points of the polygon annotation.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IPolygon.ContentCenter">
            <summary>
            Gets or sets a location where the center of the content should be.
            If this is null as its default value, will automatically locate the content.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.IRectangle">
            <summary>
            IRectangle interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IRectangle.Width">
            <summary>
            Gets or sets the width of rectangle annotation.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IRectangle.Height">
            <summary>
            Gets or sets the height of rectangle annotation.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.IShape">
            <summary>
            IShape interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IShape.Content">
            <summary>
            Gets or sets the text of shape annotation.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.ISquare">
            <summary>
            ISquare interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.ISquare.Length">
            <summary>
            Gets or sets the length of the square annotation.
            </summary>
        </member>
        <member name="T:C1.Chart.Annotation.IText">
            <summary>
            IText interface.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IText.Content">
            <summary>
            Gets or sets the text of the annotation.
            </summary>
        </member>
        <member name="P:C1.Chart.Annotation.IText.Angle">
            <summary>
            Gets or sets the angle of text annotation.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.AssemblyNames">
            <summary>
            Specifies assembly name parts, used by AssemblyCommonInfo to generate actual assembly names.
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VerString">
            <summary>
            WinForms version string representation (4 dot-delimited numbers).
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VersionStr">
            <summary>
            Same as <see cref="F:C1.Util.Licensing.VersionConst.VerString"/>.
            </summary>
        </member>
        <member name="T:C1.Util.IRenderingElement">
            <summary>
            Basic element that supports rendering to IRendering.
            </summary>
        </member>
        <member name="T:C1.Util.IRendering">
            <summary>The base rendering interface.</summary>
        </member>
        <member name="M:C1.Util.IRendering.SetStroke(System.Object)">
            <summary>
            Sets the current stroke brush.
            </summary>
            <param name="brush">Native brush or ARGB color as integer.</param>
        </member>
        <member name="M:C1.Util.IRendering.SetStrokeThickness(System.Double)">
            <summary>
            Sets the stroke thickness.
            </summary>
            <param name="thickness"></param>
        </member>
        <member name="M:C1.Util.IRendering.SetStrokePattern(System.Double[])">
            <summary>
            Sets the stroke pattern.
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:C1.Util.IRendering.SetFill(System.Object)">
            <summary>
            Sets the fill brush.
            </summary>
            <param name="brush"></param>
        </member>
        <member name="M:C1.Util.IRendering.SetFont(System.Object)">
            <summary>
            Sets the font.
            </summary>
            <param name="font">Native font object.</param>
        </member>
        <member name="M:C1.Util.IRendering.SetFont(System.String,System.Double,System.Int32)">
            <summary>
            Sets the current font based on the provided parameters.
            </summary>
            <remarks>
            Font Style:
             Regular	 0	Normal text.
             Bold        1	Bold text.
             Italic      2	Italic text.
             Underline   4	Underlined text.
             Strikeout   8	Text with a line through the middle.
            </remarks>
            <param name="fontName">Font name</param>
            <param name="fontSize">Font size</param>
            <param name="fontStyle">Font style</param>
        </member>
        <member name="M:C1.Util.IRendering.PushTransform(System.Object)">
            <summary>
            Push the transform matrix for drawing.
            </summary>
            <param name="transform">Native transform object.</param>
        </member>
        <member name="M:C1.Util.IRendering.PushTransformMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Push the transform matrix specified by given values.
            </summary>
            <param name="m11">The value in the first row and first column of the matrix.</param>
            <param name="m12">The value in the first row and second column of the matrix.</param>
            <param name="m21">The value in the second row and first column of the matrix.</param>
            <param name="m22">The value in the second row and second column of the matrix.</param>
            <param name="dx">The value in the third row and first column of the matrix.</param>
            <param name="dy">The value in the third row and second column of the matrix.</param>
        </member>
        <member name="M:C1.Util.IRendering.PopTransform">
            <summary>
            Pop the transform matrix for drawing.
            </summary>
        </member>
        <member name="M:C1.Util.IRendering.PushClipRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Push the clip rectangle.
            </summary>
            <param name="x">X-coordinate of clip rectangle.</param>
            <param name="y">Y-coordinate of clip rectangle.</param>
            <param name="w">Clip rectangle width.</param>
            <param name="h">Clip rectangle height.</param>
        </member>
        <member name="M:C1.Util.IRendering.PushClipPath(System.Double[],System.Double[],System.Byte[])">
            <summary>
            Push the clip path defined by points and types.
            </summary>
            <param name="xs">Array of x-coordinates.</param>
            <param name="ys">Array of y-coordinates.</param>
            <param name="types">The path types to draw (see remarks).</param>
            <remarks>Path types:
            0x00: the start of a figure
            0x01: one of the two endpoints of a line
            0x02: an endpoint or control point of a Quadratic Bézier (two points)
            0x03: an endpoint or control point of a Bézier (three points)
            0x80: the last point of a figure
            0x81: the last point of the figure in a closed sub path (one point)
            0x82: the last point of the figure for Quadratic Bézier curve of the figure in a closed sub path (two points)
            0x83: the last point of the figure for Bézier curve of the figure in a closed sub path (three points)
            </remarks>
        </member>
        <member name="M:C1.Util.IRendering.PopClip">
            <summary>
            Pop the clip rectangle.
            </summary>
        </member>
        <member name="M:C1.Util.IRendering.DrawLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw line between two points using current stroke attributes.
            </summary>
            <param name="x1">x-coordinate of first point.</param>
            <param name="y1">y-coordinate of first point.</param>
            <param name="x2">x-coordinate of second point.</param>
            <param name="y2">y-coordinate of second point.</param>
        </member>
        <member name="M:C1.Util.IRendering.DrawLines(System.Double[],System.Double[])">
            <summary>
            Draw lines using specified coordinates.
            </summary>
            <param name="xs">Array of x-coordinates.</param>
            <param name="ys">Array of y-coordinates.</param>
        </member>
        <member name="M:C1.Util.IRendering.DrawRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw rectangle with current stroke and fill.
            </summary>
            <param name="x">x-coordinate of rectangle.</param>
            <param name="y">y-coordinate of rectangle.</param>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
        </member>
        <member name="M:C1.Util.IRendering.DrawRoundRect(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw round rectangle with current stroke and fill.
            </summary>
            <param name="x">x-coordinate of rectangle.</param>
            <param name="y">y-coordinate of rectangle.</param>
            <param name="w">Rectangle width.</param>
            <param name="h">Rectangle height.</param>
            <param name="rx">x-radius.</param>
            <param name="ry">y-radius.</param>
        </member>
        <member name="M:C1.Util.IRendering.DrawPolygon(System.Double[],System.Double[])">
            <summary>
            Draw polygon with current stroke and/or fill.
            </summary>
            <param name="xs">Array of x-coordinates.</param>
            <param name="ys">Array of y-coordinates.</param>
        </member>
        <member name="M:C1.Util.IRendering.DrawEllipse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw ellipse with current stroke and fill.
            </summary>
            <param name="cx">X-coordinate of ellipse center.</param>
            <param name="cy">Y-coordinate of ellipse center.</param>
            <param name="rx">x-radius.</param>
            <param name="ry">y-radius.</param>
        </member>
        <member name="M:C1.Util.IRendering.DrawArc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw arc (ellipse segment) with current stroke attributes.
            </summary>
            <param name="cx">X-coordinate of ellipse center.</param>
            <param name="cy">Y-coordinate of ellipse center.</param>
            <param name="rx">x-radius.</param>
            <param name="ry">y-radius.</param>
            <param name="angle">Start angle in degrees.</param>
            <param name="sweep">Sweep direction in degrees.</param>
        </member>
        <member name="M:C1.Util.IRendering.DrawPieSegment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw pie segment with current stroke and fill.
            </summary>
            <param name="cx">X-coordinate of ellipse center.</param>
            <param name="cy">Y-coordinate of ellipse center.</param>
            <param name="rx">x-radius.</param>
            <param name="ry">y-radius.</param>
            <param name="angle">Start angle in degrees.</param>
            <param name="sweep">Sweep direction in degrees.</param>
        </member>
        <member name="M:C1.Util.IRendering.DrawDonutSegment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw donut segment with current stroke and fill.
            </summary>
            <param name="cx">X-coordinate of ellipse center.</param>
            <param name="cy">Y-coordinate of ellipse center.</param>
            <param name="rx">x-radius.</param>
            <param name="ry">y-radius.</param>
            <param name="innerRx">Inner x-radius.</param>
            <param name="innerRy">Inner y-radius.</param>
            <param name="angle">Start angle in degrees.</param>
            <param name="sweep">Sweep direction in degrees.</param>
        </member>
        <member name="M:C1.Util.IRendering.DrawPath(System.Double[],System.Double[],System.Byte[],System.Boolean)">
            <summary>
            Draws a path defined by points and types and fill.
            </summary>
            <param name="xs">Array of x-coordinates.</param>
            <param name="ys">Array of y-coordinates.</param>
            <param name="types">The path types to draw (see remarks).</param>
            <param name="close">Whether is closed path (figure) or not.</param>
            <remarks>Path types:
            0x00: the start of a figure
            0x01: one of the two endpoints of a line
            0x02: an endpoint or control point of a Quadratic Bézier (two points)
            0x03: an endpoint or control point of a Bézier (three points)
            0x80: the last point of a figure
            0x81: the last point of the figure in a closed sub path (one point)
            0x82: the last point of the figure for Quadratic Bézier curve of the figure in a closed sub path (two points)
            0x83: the last point of the figure for Bézier curve of the figure in a closed sub path (three points)
            </remarks>
        </member>
        <member name="M:C1.Util.IRendering.DrawImage(System.Object,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw image using special source.
            </summary>
            <param name="source">The source of image.</param>
            <param name="x">X-coordinate of image.</param>
            <param name="y">Y-coordinate of image.</param>
            <param name="w">Rendering width.</param>
            <param name="h">Rendering height.</param>
        </member>
        <member name="M:C1.Util.IRendering.MeasureString(System.String,System.Double)">
            <summary>
            Measures size of string in layout area.
            </summary>
            <param name="s">String to measure.</param>
            <param name="width">Layout width.</param>
            <returns>Calculating text height.</returns>
        </member>
        <member name="M:C1.Util.IRendering.DrawString(System.String,System.Double,System.Double)">
            <summary>
            Draw string at specified position.
            </summary>
            <param name="s">String to draw.</param>
            <param name="x">X-coordinate of string.</param>
            <param name="y">Y-coordinate of string.</param>
        </member>
        <member name="M:C1.Util.IRendering.DrawString(System.String,System.Double,System.Double,System.Double,System.Double,System.Byte,System.Byte)">
            <summary>
            Draw string at specified area.
            </summary>
            <param name="s">String to draw.</param>
            <param name="x">X-coordinate of string.</param>
            <param name="y">Y-coordinate of string.</param>
            <param name="w">Rendering width.</param>
            <param name="h">Rendering height.</param>
            <param name="horz">Horizontal aligment (see aligment type).</param>
            <param name="vert">Vertical aligment (see aligment type).</param>
            <remarks>The alignment types:
            00 - near, left or top aligment (by default)
            01 - center or middle aligment
            02 - far, right or bottom aligment
            03 - justify or streach aligment
            </remarks>
        </member>
    </members>
</doc>
