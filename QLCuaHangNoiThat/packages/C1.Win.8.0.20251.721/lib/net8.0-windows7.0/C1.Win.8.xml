<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Win.8</name>
    </assembly>
    <members>
        <member name="M:GrapeCity.Common.GcNetFxLicenseProvider`1.VerifyDesignTimeEnvironment">
            <summary>
              Verify the environment to get whether the component is in design-time. 
            </summary>
            <returns>
              <c>true</c> if it is in design-time; otherwise <c>false</c>.
            </returns>
            <remarks>
              In DesignTime, because of IDE bugs, some component are not created with DesigntimeLicenseContext. 
              For example, when drag a control from Win Forms DataSource tool window, or use a web control in a ASP.NET Template.
              This may cause the control do run-time license validation and found that there is no license.
              To resolve this problem, we will check the environment and decide whether to do design-time license validation again.
            </remarks>
        </member>
        <member name="F:GrapeCity.Common.C1BetaLicenseDialog`1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GrapeCity.Common.C1BetaLicenseDialog`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GrapeCity.Common.C1BetaLicenseDialog`1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.LicenseDialog`1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GrapeCity.Common.LicenseDialog`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GrapeCity.Common.LicenseDialog`1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseResource">
            <summary>
              Contains the resource for PowerToolsLicenseProvider
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.ErrorIcon">
            <summary>
              Gets the Error icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.InfoIcon">
            <summary>
              Gets the Info icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.WarningIcon">
            <summary>
              Gets the Warning icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.C1_Logomark">
            <summary>
              Gets the C1 icon for license dialog.
            </summary>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetString(System.String)">
            <summary>
              Gets the localized string.
            </summary>
            <param name="name">
              The name of the string. It could be a const value in <see cref="T:GrapeCity.Common.Resources.LicenseResource"/>.
            </param>
            <returns>
              The localized string.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetString(System.String,System.Object[])">
            <summary>
              Gets the localized string.
            </summary>
            <param name="name">
              The name of the string. It could be a const value in <see cref="T:GrapeCity.Common.Resources.LicenseResource"/>.
            </param>
            <param name="args">
              The data used in the string.
            </param>
            <returns>
              The localized string.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetAssemblyFileVersion(System.Reflection.Assembly)">
            <summary>
              Get the file version description of the specified assembly.
            </summary>
            <param name="assembly">
              The <see cref="T:System.Reflection.Assembly"/> whose file version description should be get.
            </param>
            <returns>
              A <see cref="T:System.String"/> indicates the file version description of the specified assembly.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
              Get the name of the specified assembly.
            </summary>
            <param name="assembly">
              The <see cref="T:System.Reflection.Assembly"/> whose name should be get.
            </param>
            <returns>
              A <see cref="T:System.String"/> indicates the name of the specified assembly.
            </returns>
            <remarks>
              Please use this method to get assembly name. It is because that the Assembly.GetName method need FileIO permission.
            </remarks>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.FormatSerialKey(System.String)">
            <summary>
              Format the product key as "xxxx-xxxx-xxxx-xxxx-xxxx-xxxx".
            </summary>
            <param name="productKey">
              A <see cref="T:System.String"/> indicates the original product key which is a sequence of 24 digits.
            </param>
            <returns>
              A readable text indicates the product key.
            </returns>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseDialogKind">
            <summary>
              Represents the kind of license dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Info">
            <summary>
              Info dialog. It is shown for a trial license.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Warning">
            <summary>
              Warning dialog. It is shown for a trial license which is expired.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Error">
            <summary>
              Error dialog. It is shown for an invalid license or other errors.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget">
            <summary>
              Represents the target web site for the link in license dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.None">
            <summary>
              None target.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebFAQ">
            <summary>
              Goto web site http://developer.mescius.com/support/portal/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebActivation">
            <summary>
              Goto web site http://developer.mescius.com/componentone/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebShop">
            <summary>
              Goto web site http://developer.mescius.com/pricing/componentone/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoHowToActivate">
            <summary>
              Goto web site http://developer.mescius.com/componentone/docs/license/online-license/overview.html.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoLicenseRenewal">
            <summary>
              Goto web site https://developer.mescius.com/sales/componentone-faq/.
            </summary>
        </member>
        <member name="T:C1.Win.Accessibility.ISupportUia">
            <summary>
            Interface for item that supports common UIA members.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.ISupportUia.UiaName">
            <summary>
            Item name in UIA tree.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.ISupportUia.Visible">
            <summary>
            Gets whether the item is visible.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.ISupportUia.IsOffscreen">
            <summary>
            Gets whether the item is offscreen.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.ISupportUia.Enabled">
            <summary>
            Gets whether the item is enabled.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.ISupportUia.Parent">
            <summary>
            Gets parent UIA item of this item.
            </summary>
            <remarks>
            Used to calculate positioning, pass the correct parent.
            </remarks>
        </member>
        <member name="P:C1.Win.Accessibility.ISupportUia.Location">
            <summary>
            Gets location of this item.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.ISupportUia.Size">
            <summary>
            Gets size of this item.
            </summary>
        </member>
        <member name="E:C1.Win.Accessibility.ISupportUia.VisibleChanged">
            <summary>
            Occurs when the visible property changed.
            </summary>
        </member>
        <member name="E:C1.Win.Accessibility.ISupportUia.EnabledChanged">
            <summary>
            Occurs when the enabled property changed.
            </summary>
        </member>
        <member name="E:C1.Win.Accessibility.ISupportUia.BoundsChanged">
            <summary>
            Occurs when the item bounds changed.
            </summary>
        </member>
        <member name="E:C1.Win.Accessibility.ISupportUia.GotFocus">
            <summary>
            Occurs when the item got focus.
            </summary>
        </member>
        <member name="E:C1.Win.Accessibility.ISupportUia.LostFocus">
            <summary>
            Occurs when the item lost focus.
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.ISupportUia.SetFocus">
            <summary>
            Sets focus to this item.
            </summary>
        </member>
        <member name="T:C1.Win.Accessibility.Items.BaseInterfaces.IUiaDockProvider">
            <summary>
            Expose an element's ability to change its dock state at run time.
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaDockProvider.SetDockPosition(System.Windows.Automation.DockPosition)">
            <summary>
            Moves the window to be docked at the requested location.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaDockProvider.DockPosition">
            <summary>Is the DockPosition Top, Left, Right, Bottom, Fill, or None?</summary>
        </member>
        <member name="T:C1.Win.Accessibility.Items.BaseInterfaces.IUiaExpandCollapseProvider">
            <summary>
            
            Exposes a control's ability to expand to display more content or
            collapse to hide content.
            Supported in conjunction with the HierarchyItem pattern on
            TreeView items to provide tree-like behavior, but is also relevant
            for individual controls that open and close.
            
            Examples of UI that implements this includes:
            - TreeView items
            - Office's smart menus that have been collapsed
            - Chevrons on toolbars
            - Combo box
            - Menus
            - "Expandos" in the task pane of Windows Explorer (left-hand side where folder
              view is often displayed).
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaExpandCollapseProvider.Expand">
            <summary>
            Blocking method that returns after the element has been expanded.
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaExpandCollapseProvider.Collapse">
            <summary>
            Blocking method that returns after the element has been collapsed.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaExpandCollapseProvider.ExpandCollapseState">
            <summary>indicates an element's current Collapsed or Expanded state</summary>
        </member>
        <member name="T:C1.Win.Accessibility.Items.BaseInterfaces.IUiaGridItemProvider">
            <summary>
            Exposes methods and properties to support UI Automation client access to 
            individual child controls of containers that implement <see cref="T:C1.Win.Accessibility.Items.BaseInterfaces.IUiaGridProvider"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaGridItemProvider.Column">
            <summary>
            Gets the ordinal number of the column that contains the cell or item.
            Returns: A zero-based ordinal number that identifies the column containing the cell or item.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaGridItemProvider.ColumnSpan">
            <summary>
            Gets the number of columns spanned by a cell or item.
            Returns: The number of columns spanned.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaGridItemProvider.ContainingGrid">
            <summary>
            Gets a UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.IGridProvider"/> and represents the container of the cell or item.
            Returns: A UI Automation provider that implements the <see cref="T:System.Windows.Automation.GridPattern"/> and represents the cell or item container.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaGridItemProvider.Row">
            <summary>
            Gets the ordinal number of the row that contains the cell or item.
            Returns: A zero-based ordinal number that identifies the row containing the cell or item.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaGridItemProvider.RowSpan">
            <summary>
            Gets the number of rows spanned by a cell or item.
            Returns: The number of rows spanned.
            </summary>
        </member>
        <member name="T:C1.Win.Accessibility.Items.BaseInterfaces.IUiaGridProvider">
            <summary>
            Exposes methods and properties to support UI Automation client access to controls
                that act as containers for a collection of child elements. The children of this
                element must implement System.Windows.Automation.Provider.IGridItemProvider and
                be organized in a two-dimensional logical coordinate system that can be traversed
                (that is, a UI Automation client can move to adjacent controls) by using the
                keyboard.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaGridProvider.ColumnCount">
            <summary>
            Gets the total number of columns in a grid.
            Returns: The total number of columns in a grid.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaGridProvider.RowCount">
            <summary>
            Gets the total number of rows in a grid.
            Returns: The total number of rows in a grid.
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaGridProvider.GetItem(System.Int32,System.Int32)">
            <summary>
            Retrieves the UI Automation provider for the specified cell.
            </summary>
            <param name="row">The ordinal number of the row of interest.</param>
            <param name="column">The ordinal number of the column of interest.</param>
            <returns>The UI Automation provider for the specified cell.</returns>
        </member>
        <member name="T:C1.Win.Accessibility.Items.BaseInterfaces.IUiaInvokeProvider">
            <summary>
            Implemented by objects that have a single, unambiguous, action associated with them.
            These objects are usually stateless, and invoking them does not change their own state,
            but causes something to happen in the larger context of the app the control is in.
            
            Examples of UI that implments this includes:
            Push buttons
            Hyperlinks
            Menu items
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaInvokeProvider.Invoke">
            <summary>
            Request that the control initiate its action.
            Should return immediately without blocking.
            There is no way to determine what happened, when it happend, or whether
            anything happened at all.
            </summary>
        </member>
        <member name="T:C1.Win.Accessibility.Items.BaseInterfaces.IUiaRangeValueProvider">
             <summary>
             Exposes a related set of properties that reflect a controls ability to manage a value
             within a finite range.  It conveys a controls valid minimum and maximum values and its
             current value.
            
             Examples:
            
                 Numeric Spinners
                 Progress Bar,
                 IP Control (on the individual octets)
                 some Color Pickers
                 ScrollBars
                 some Sliders
            
             public interface that represents UI elements that are expressing a current value and a value range.
            
             public interface has same definition as IValueProvider.  The two patterns' difference is that
             RangeValue has additional properties, and properties generally do not appear in the pattern
             public interfaces.
             </summary>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaRangeValueProvider.SetValue(System.Double)">
            <summary>
            Request to set the value that this UI element is representing
            </summary>
            <param name="value">Value to set the UI to</param>
            <returns>true if the UI element was successfully set to the specified value</returns>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaRangeValueProvider.Value">
            <summary>Value of a value control, as a a string.</summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaRangeValueProvider.IsReadOnly">
            <summary>Indicates that the value can only be read, not modified.
            returns True if the control is read-only</summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaRangeValueProvider.Maximum">
            <summary>maximum value </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaRangeValueProvider.Minimum">
            <summary>minimum value</summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaRangeValueProvider.LargeChange">
            <summary>The amount a large change will change the value by</summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaRangeValueProvider.SmallChange">
            <summary>The amount a small change will change the value by</summary>
        </member>
        <member name="T:C1.Win.Accessibility.Items.BaseInterfaces.IUiaScrollItemProvider">
            <summary>
            Implemented by objects in a known Scrollable context, such as ListItems, ListViewItems, TreeViewItems, and Tabs.
            This allows them to be scrolled into view using known API's based on the control in question.
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaScrollItemProvider.ScrollIntoView">
            <summary>
            Scrolls the windows containing this automation element to make this element visible.
            InvalidOperationException should be thrown if item becomes unable to be scrolled. Makes
            no guarantees about where the item will be in the scrolled window.
            </summary>
        </member>
        <member name="T:C1.Win.Accessibility.Items.BaseInterfaces.IUiaScrollProvider">
             <summary>
             The Scroll pattern exposes a control's ability to change the portion of its visible region
             that is visible to the user by scrolling its content.
            
             Examples:
            
                 Listboxes
                 TreeViews
                 other containers that maintain a content area larger than the control's visible region
            
             Note that scrollbars themselves should not support the Scrollable pattern; they support the
             RangeValue pattern. 
            
             Servers must normalize scrolling (0 to 100).
            
             This public interface represents UI elements that scroll their content.
             </summary>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaScrollProvider.Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
            <summary>
            Request to scroll horizontally and vertically by the specified amount.
            The ability to call this method and simultaneously scroll horizontally 
            and vertically provides simple panning support.
            </summary>
            <param name="horizontalAmount">horizontal amount to scroll by</param>
            <param name="verticalAmount">vertical amount to scroll by</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaScrollProvider.SetScrollPercent(System.Double,System.Double)">
            <summary>
            Request to set the current horizontal and Vertical scroll position 
            by percent (0-100).  Passing in the value of "-1", represented by the 
            constant "NoScroll", will indicate that scrolling in that direction 
            should be ignored.
            The ability to call this method and simultaneously scroll horizontally and 
            vertically provides simple panning support.
            </summary>
            <param name="horizontalPercent">horizontal position to scroll to</param>
            <param name="verticalPercent">vertical position to scroll to</param>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaScrollProvider.HorizontalScrollPercent">
            <summary>
            Get the current horizontal scroll position
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaScrollProvider.VerticalScrollPercent">
            <summary>
            Get the current vertical scroll position
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaScrollProvider.HorizontalViewSize">
            <summary>
            Equal to the horizontal percentage of the entire control that is currently viewable.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaScrollProvider.VerticalViewSize">
            <summary>
            Equal to the horizontal percentage of the entire control that is currently viewable.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaScrollProvider.HorizontallyScrollable">
            <summary>
            True if control can scroll horizontally
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaScrollProvider.VerticallyScrollable">
            <summary>
            True if control can scroll vertically
            </summary>
        </member>
        <member name="T:C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionItemProvider">
            <summary>
            Define a Selectable Item (only supported on logical elements that are a 
            child of an Element that supports SelectionPattern and is itself selectable).  
            This allows for manipulation of Selection from the element itself.
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionItemProvider.Select">
            <summary>
            Sets the current element as the selection
            This clears the selection from other elements in the container 
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionItemProvider.AddToSelection">
            <summary>
            Adds current element to selection
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionItemProvider.RemoveFromSelection">
            <summary>
            Removes current element from selection
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionItemProvider.IsSelected">
            <summary>
            Check whether an element is selected
            </summary>
            <returns>returns true if the element is selected</returns>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionItemProvider.SelectionContainer">
            <summary>
            The logical element that supports the SelectionPattern for this Item
            </summary>
            <returns>returns a IRawElementProviderSimple</returns>
        </member>
        <member name="T:C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionProvider">
            <summary>
            public interface representing containers that manage selection.
            </summary>
            <remarks>
            Client code uses this public interface; server implementers implent the
            ISelectionProvider public interface instead.
            </remarks>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionProvider.GetSelection">
            <summary>
            Get the currently selected elements
            </summary>
            <returns>An AutomationElement array containing the currently selected elements</returns>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionProvider.CanSelectMultiple">
            <summary>
            Indicates whether the control allows more than one element to be selected
            </summary>
            <returns>Boolean indicating whether the control allows more than one element to be selected</returns>
            <remarks>If this is false, then the control is a single-select ccntrol</remarks>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionProvider.IsSelectionRequired">
            <summary>
            Indicates whether the control requires at least one element to be selected
            </summary>
            <returns>Boolean indicating whether the control requires at least one element to be selected</returns>
            <remarks>If this is false, then the control allows all elements to be unselected</remarks>
        </member>
        <member name="T:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTableItemProvider">
            <summary>
            Exposes methods and properties to support UI Automation client access to child 
            controls of containers that implement <see cref="T:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTableProvider"/>.
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTableItemProvider.GetColumnHeaderItems">
            <summary>
            Retrieves a collection of UI Automation providers representing all the column
            headers associated with a table item or cell.
            </summary>
            <returns>
            A collection of UI Automation providers.
            </returns>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTableItemProvider.GetRowHeaderItems">
            <summary>
            Retrieves a collection of UI Automation providers representing all the row headers
            associated with a table item or cell.
            </summary>
            <returns>
            A collection of UI Automation providers.
            </returns>
        </member>
        <member name="T:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTableProvider">
            <summary>
            Exposes methods and properties to support UI Automation client access to controls
                that act as containers for a collection of child elements. The children of this
                element must implement System.Windows.Automation.Provider.ITableItemProvider
                and be organized in a two-dimensional logical coordinate system that can be traversed
                (that is, a UI Automation client can move to adjacent controls) by using the
                keyboard.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTableProvider.RowOrColumnMajor">
            <summary>
            Retrieves the primary direction of traversal for the table.
            Returns: The primary direction of traversal.
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTableProvider.GetColumnHeaders">
            <summary>
            Gets a collection of UI Automation providers that represents all the column headers
            in a table.
            </summary>
            <returns>
            A collection of UI Automation providers.
            </returns>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTableProvider.GetRowHeaders">
            <summary>
            Retrieves a collection of UI Automation providers that represents all row headers
            in the table.
            </summary>
            <returns>A collection of UI Automation providers.</returns>
        </member>
        <member name="T:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTextProvider">
            <summary>
            Represents a text provider that supports the text pattern. 
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTextProvider.GetSelection">
            <summary>
            Retrieves the current selection.  For providers that have the concept of
            text selection the provider should implement this method and also return
            true for the SupportsTextSelection property below.  Otherwise this method
            should throw an InvalidOperation exception.
            For providers that support multiple disjoint selection, this should return
            an array of all the currently selected ranges. Providers that don't support
            multiple disjoint selection should just return an array containing a single
            range.
            </summary>
            <returns>The range of text that is selected, or possibly null if there is
            no selection.</returns>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTextProvider.GetVisibleRanges">
            <summary>
            Retrieves the visible ranges of text.
            </summary>
            <returns>The ranges of text that are visible, or possibly an empty array if there is
            no visible text whatsoever.  Text in the range may still be obscured by an overlapping
            window.  Also, portions
            of the range at the beginning, in the middle, or at the end may not be visible
            because they are scrolled off to the side.
            Providers should ensure they return at most a range from the beginning of the first
            line with portions visible through the end of the last line with portions visible.</returns>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTextProvider.RangeFromChild(System.Windows.Automation.Provider.IRawElementProviderSimple)">
            <summary>
            Retrieves the range of a child object.
            </summary>
            <param name="childElement">The child element.  A provider should check that the 
            passed element is a child of the text container, and should throw an 
            InvalidOperationException if it is not.</param>
            <returns>A range that spans the child element.</returns>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTextProvider.RangeFromPoint(System.Windows.Point)">
            <summary>
            Finds the degenerate range nearest to a screen coordinate.
            </summary>
            <param name="screenLocation">The location in screen coordinates.
            The provider should check that the coordinates are within the client
            area of the provider, and should throw an InvalidOperation exception 
            if they are not.</param>
            <returns>A degenerate range nearest the specified location.</returns>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTextProvider.DocumentRange">
            <summary>
            A text range that encloses the main text of the document.  Some auxillary text such as 
            headers, footnotes, or annotations may not be included. 
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTextProvider.SupportedTextSelection">
            <summary>
            True if the text container supports text selection. If the provider returns false then
            it should throw InvalidOperation exceptions for ITextProvider.GetSelection and 
            ITextRangeProvider.Select.
            </summary>
        </member>
        <member name="T:C1.Win.Accessibility.Items.BaseInterfaces.IUiaToggleProvider">
            <summary>
            public interface that represents UI elements that have a multistate (toggleable) value.
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaToggleProvider.Toggle">
            <summary>
            Request to change the state that this UI element is currently representing
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaToggleProvider.ToggleState">
            <summary>Value of a toggleable control, as a ToggleState enum</summary>
        </member>
        <member name="T:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTransformProvider">
            <summary>
            Expose an element's ability to change its on-screen position, size or orientation
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTransformProvider.Move(System.Double,System.Double)">
            <summary>
            Used to adjust an element's current location. The x, and y parameters represent the  
            absolute on-screen position of the top-left corner in pixels, not the delta between the 
            desired location and the window's current location. 
            </summary>
            
            <param name="x">absolute on-screen position of the top left corner</param>
            <param name="y">absolute on-screen position of the top left corner</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTransformProvider.Resize(System.Double,System.Double)">
            <summary>
            Used to modify element's on-screen dimensions (affects the 
            BoundingRectangle and BoundingGeometry properties)
            When called on a split pane, it may have the side-effect of resizing
            other surrounding panes.
            </summary>
            <param name="width">The requested width of the window.</param>
            <param name="height">The requested height of the window.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTransformProvider.Rotate(System.Double)">
            <summary>
            Rotate the element the specified number of degrees.
            </summary>
            <param name="degrees">The requested degrees to rotate the element.  A positive number rotates clockwise
            a negative number rotates counter clockwise</param>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTransformProvider.CanMove">
            <summary>Returns true if the element can be moved otherwise returns false.</summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTransformProvider.CanResize">
            <summary>Returns true if the element can be resized otherwise returns false.</summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaTransformProvider.CanRotate">
            <summary>Returns true if the element can be rotated otherwise returns false.</summary>
        </member>
        <member name="T:C1.Win.Accessibility.Items.BaseInterfaces.IUiaValueProvider">
            <summary>
            public interface that represents UI elements that are expressing a value
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.Items.BaseInterfaces.IUiaValueProvider.SetValue(System.String)">
            <summary>
            Request to set the value that this UI element is representing
            </summary>
            <param name="value">Value to set the UI to</param>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaValueProvider.Value">
            <summary>Value of a value control, as a a string.</summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.BaseInterfaces.IUiaValueProvider.IsReadOnly">
            <summary>Indicates that the value can only be read, not modified.
            returns True if the control is read-only</summary>
        </member>
        <member name="T:C1.Win.Accessibility.Items.ProviderExt">
            <summary>
            Represents extensions of UIA providers with standard behavior.
            </summary>
        </member>
        <member name="T:C1.Win.Accessibility.Items.IUiaButton">
            <summary>
            Interface for item that supports UIA button.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.IUiaButton.AcceleratorKey">
            <summary>
            UIA accelerator key (a button hot key).
            </summary>
        </member>
        <member name="T:C1.Win.Accessibility.Items.IUiaEdit">
            <summary>
            Interface for item that supports UIA edit.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.IUiaEdit.SelectionStart">
            <summary>
            Gets selection start position.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.IUiaEdit.SelectionLength">
            <summary>
            Gets selection length.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.IUiaEdit.DisplayRectangle">
            <summary>
            Gets edit display rectangle.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.IUiaEdit.Font">
            <summary>
            Gets edit Font.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.IUiaEdit.TextAlign">
            <summary>
            Gets edit text align.
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.Items.IUiaEdit.GetCharIndexFromPosition(System.Drawing.Point)">
            <summary>
            Gets char index from position.
            </summary>
            <param name="point">The position.</param>
            <returns>Char index.</returns>
        </member>
        <member name="M:C1.Win.Accessibility.Items.IUiaEdit.GetPositionFromCharIndex(System.Int32)">
            <summary>
            Gets position from char index.
            </summary>
            <param name="charIndex">The char index.</param>
            <returns>Position.</returns>
        </member>
        <member name="M:C1.Win.Accessibility.Items.IUiaEdit.CreateGraphics">
            <summary>
            Creates graphics.
            </summary>
            <returns>Graphics instance.</returns>
        </member>
        <member name="T:C1.Win.Accessibility.Items.IUiaSplitButton">
            <summary>
            Interface for item that supports UIA split button.
            </summary>
        </member>
        <member name="T:C1.Win.Accessibility.Items.IUiaToggleButton">
            <summary>
            Interface for item that supports UIA toggle button.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.IUiaToggleButton.AcceleratorKey">
            <summary>
            UIA accelerator key (a button hot key).
            </summary>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaButton">
            <summary>
            Represents UIA Button.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaButton.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaButton.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.Items.IUiaButton,C1.Win.Accessibility.UiaItem,System.String,System.Windows.Forms.Control,System.Windows.Forms.Control,System.Object,C1.Win.Accessibility.ISupportUiaContainer)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="invokeItem">Item with IUiaButton.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
            <param name="sourceContainer">Container with inner items.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaButton.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaButton.GetPropertyValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaButton.Invoke">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaCalendar">
            <summary>
            Represents UIA Calendar.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaCalendar.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaCalendar.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.Items.BaseInterfaces.IUiaTableProvider,C1.Win.Accessibility.ISupportUiaContainer,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,C1.Win.Accessibility.Items.BaseInterfaces.IUiaScrollProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionProvider,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="table">Item with IUiaTableProvider.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="scrollItem">Item with IUiaScrollProvider.</param>
            <param name="selectionItem">Item with IUiaSelectionProvider.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
            <param name="sourceContainer">Container with inner items.</param>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaCheckBox">
            <summary>
            Represents UIA CheckBox.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaCheckBox.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaCheckBox.ToggleState">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaCheckBox.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.Items.BaseInterfaces.IUiaToggleProvider,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,System.String,System.Windows.Forms.Control,System.Object,C1.Win.Accessibility.ISupportUiaContainer)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="toggleItem">Item with IUiaToggleProvider.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
            <param name="sourceContainer">Container with inner items.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaCheckBox.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaCheckBox.Toggle">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaComboBox">
            <summary>
            Represents UIA ComboBox.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaComboBox.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaComboBox.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.Items.BaseInterfaces.IUiaExpandCollapseProvider,C1.Win.Accessibility.ISupportUiaContainer,C1.Win.Accessibility.UiaItem,C1.Win.Accessibility.Items.BaseInterfaces.IUiaValueProvider,System.String,System.Windows.Forms.Control,System.Windows.Forms.Control,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="sourceContainer">Container with inner items.</param>
            <param name="expandCollapseItem">Item with IUiaExpandCollapseProvider.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="valueItem">Item with IUiaValueProvider.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaComboBox.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaComboBox.ExpandCollapseState">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaComboBox.Expand">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaComboBox.Collapse">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaComboBox.Value">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaComboBox.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaComboBox.SetValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaDataGrid">
            <summary>
            Represents UIA DataGrid.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataGrid.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaDataGrid.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.ISupportUiaContainer,C1.Win.Accessibility.Items.BaseInterfaces.IUiaTableProvider,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,C1.Win.Accessibility.Items.BaseInterfaces.IUiaScrollProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionProvider,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="table">Item with IUiaTableProvider.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="scrollItem">Item with IUiaScrollProvider.</param>
            <param name="selectionItem">Item with IUiaSelectionProvider.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
            <param name="sourceContainer">Container with inner items.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaDataGrid.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataGrid.CanSelectMultiple">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataGrid.IsSelectionRequired">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaDataGrid.GetSelection">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataGrid.HorizontallyScrollable">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataGrid.HorizontalScrollPercent">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataGrid.HorizontalViewSize">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataGrid.VerticallyScrollable">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataGrid.VerticalScrollPercent">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataGrid.VerticalViewSize">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaDataGrid.Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaDataGrid.SetScrollPercent(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaDataItem">
            <summary>
            Represents UIA DataItem.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataItem.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaDataItem.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionItemProvider,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,C1.Win.Accessibility.ISupportUiaContainer,C1.Win.Accessibility.Items.BaseInterfaces.IUiaExpandCollapseProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaTableItemProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaGridItemProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaScrollItemProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaToggleProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaValueProvider,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="scrollItem">Item with IUiaScrollProvider.</param>
            <param name="toggleItem">Item with IUiaToggleProvider.</param>
            <param name="valueItem">Item with IUiaValueProvider.</param>
            <param name="selectionItem">Item with IUiaSelectionProvider.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
            <param name="sourceContainer">Container with inner items.</param>
            <param name="expandCollapseItem">Item with IUiaExpandCollapseProvider.</param>
            <param name="tableItem">Item with IUiaTableItemProvider.</param>
            <param name="gridItem">Item with IUiaGridItemProvider.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaDataItem.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaDataItem.ScrollIntoView">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaDataItem.Toggle">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataItem.ToggleState">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataItem.IsSelected">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataItem.SelectionContainer">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaDataItem.AddToSelection">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaDataItem.RemoveFromSelection">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaDataItem.Select">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataItem.ExpandCollapseState">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaDataItem.Expand">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaDataItem.Collapse">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataItem.Value">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataItem.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaDataItem.SetValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataItem.Column">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataItem.ColumnSpan">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataItem.ContainingGrid">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataItem.Row">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaDataItem.RowSpan">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaDataItem.GetColumnHeaderItems">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaDataItem.GetRowHeaderItems">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaEdit">
            <summary>
            Represents UIA Edit.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaEdit.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaEdit.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.Items.IUiaEdit,C1.Win.Accessibility.UiaItem,System.String,System.Windows.Forms.Control,System.Windows.Forms.Control,System.Object,C1.Win.Accessibility.ISupportUiaContainer)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="sourceEdit">Item with IUiaEdit.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
            <param name="sourceContainer">Container with inner items.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaEdit.#ctor(C1.Win.Accessibility.ISupportUia,System.Windows.Forms.TextBox,C1.Win.Accessibility.UiaItem,System.String,System.Windows.Forms.Control,System.Windows.Forms.Control,System.Object,C1.Win.Accessibility.ISupportUiaContainer)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="textBox">Inner TextBox.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
            <param name="sourceContainer"></param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaEdit.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaEdit.Value">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaEdit.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaEdit.SetValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaEdit.DocumentRange">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaEdit.SupportedTextSelection">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaEdit.GetSelection">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaEdit.GetVisibleRanges">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaEdit.RangeFromChild(System.Windows.Automation.Provider.IRawElementProviderSimple)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaEdit.RangeFromPoint(System.Windows.Point)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaGroup">
            <summary>
            Represents UIA Group.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaGroup.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaGroup.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.ISupportUiaContainer,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="sourceContainer">Container with inner items.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaHeader">
            <summary>
            Represents UIA DataItem.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaHeader.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaHeader.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.ISupportUiaContainer,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,C1.Win.Accessibility.Items.BaseInterfaces.IUiaTransformProvider,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="transformItem">Item with IUiaTransformProvider.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
            <param name="sourceContainer">Container with inner items.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaHeader.DoInitialize">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaHeader.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaHeader.CanMove">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaHeader.CanResize">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaHeader.CanRotate">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaHeader.Move(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaHeader.Resize(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaHeader.Rotate(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaHeaderItem">
            <summary>
            Represents UIA DataItem.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaHeaderItem.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaHeaderItem.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,C1.Win.Accessibility.ISupportUiaContainer,C1.Win.Accessibility.Items.BaseInterfaces.IUiaTransformProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaInvokeProvider,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="transformItem">Item with IUiaTransformProvider.</param>
            <param name="invokeItem">Item with IUiaInvokeProvider.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
            <param name="sourceContainer">Container with inner items.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaHeaderItem.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaHeaderItem.Invoke">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaHeaderItem.CanMove">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaHeaderItem.CanResize">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaHeaderItem.CanRotate">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaHeaderItem.Move(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaHeaderItem.Resize(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaHeaderItem.Rotate(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaImage">
            <summary>
            Represents UIA Image.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaImage.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaImage.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.Items.BaseInterfaces.IUiaGridItemProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaTableItemProvider,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,System.String,System.Windows.Forms.Control,System.Object,C1.Win.Accessibility.ISupportUiaContainer)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="gridItem">Item with IUiaGridItemProvider.</param>
            <param name="tableItem">Item with IUiaTableItemProvider.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
            <param name="sourceContainer">Container with inner items.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaImage.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaImage.Column">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaImage.ColumnSpan">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaImage.ContainingGrid">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaImage.Row">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaImage.RowSpan">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaImage.GetColumnHeaderItems">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaImage.GetRowHeaderItems">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaList">
            <summary>
            Represents UIA List.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaList.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaList.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.ISupportUiaContainer,C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionProvider,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="sourceContainer">Container with inner items.</param>
            <param name="selectItem">Item with IUiaSelectionProvider.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaList.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaList.CanSelectMultiple">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaList.IsSelectionRequired">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaList.GetSelection">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaListItem">
            <summary>
            Represents UIA ListItem.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaListItem.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaListItem.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionItemProvider,C1.Win.Accessibility.UiaItem,C1.Win.Accessibility.ISupportUiaContainer,System.Windows.Forms.Control,C1.Win.Accessibility.Items.BaseInterfaces.IUiaScrollItemProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaInvokeProvider,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="selectItem">Item with IUiaSelectionItemProvider.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="sourceContainer">Container with inner items.</param>
            <param name="scrollItem">Item with IUiaScrollItemProvider.</param>
            <param name="invokeItem">Item with IUiaInvokeProvider.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaListItem.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaListItem.ScrollIntoView">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaListItem.Invoke">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaListItem.IsSelected">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaListItem.SelectionContainer">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaListItem.AddToSelection">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaListItem.RemoveFromSelection">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaListItem.Select">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaMenu">
            <summary>
            Represents UIA Menu.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaMenu.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaMenu.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.ISupportUiaContainer,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="sourceContainer">Container with inner items.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaMenuItem">
            <summary>
            Represents UIA MenuItem.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaMenuItem.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaMenuItem.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,C1.Win.Accessibility.ISupportUiaContainer,C1.Win.Accessibility.Items.BaseInterfaces.IUiaExpandCollapseProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaInvokeProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaScrollItemProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaToggleProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionItemProvider,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="sourceContainer">Container with inner items.</param>
            <param name="expandCollapseItem">Item with IUiaExpandCollapseProvider.</param>
            <param name="invokeItem">Item with IUiaInvokeProvider.</param>
            <param name="scrollItem">Item with IUiaScrollItemProvider.</param>
            <param name="toggleItem">Item with IUiaToggleProvider.</param>
            <param name="selectionItem">Item with IUiaSelectionItemProvider.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaMenuItem.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaMenuItem.ExpandCollapseState">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaMenuItem.Collapse">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaMenuItem.Expand">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaMenuItem.Invoke">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaMenuItem.ToggleState">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaMenuItem.Toggle">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaMenuItem.IsSelected">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaMenuItem.SelectionContainer">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaMenuItem.AddToSelection">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaMenuItem.RemoveFromSelection">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaMenuItem.Select">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaMenuItem.ScrollIntoView">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaPane">
            <summary>
            Represents UIA Pane.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaPane.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaPane.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.ISupportUiaContainer,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,C1.Win.Accessibility.Items.BaseInterfaces.IUiaScrollProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaTransformProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaDockProvider,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="sourceContainer">Container with inner items.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="scrollItem">Item with IUiaScrollProvider.</param>
            <param name="transformItem">Item with IUiaTransformProvider.</param>
            <param name="dockItem">Item with IUiaDockProvider.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaPane.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaPane.DockPosition">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaPane.SetDockPosition(System.Windows.Automation.DockPosition)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaPane.HorizontallyScrollable">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaPane.HorizontalScrollPercent">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaPane.HorizontalViewSize">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaPane.VerticallyScrollable">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaPane.VerticalScrollPercent">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaPane.VerticalViewSize">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaPane.Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaPane.SetScrollPercent(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaPane.CanMove">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaPane.CanResize">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaPane.CanRotate">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaPane.Move(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaPane.Resize(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaPane.Rotate(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaProgressBar">
            <summary>
            Represents UIA progress bar.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaProgressBar.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaProgressBar.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.Items.BaseInterfaces.IUiaRangeValueProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaValueProvider,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,System.String,System.Windows.Forms.Control,System.Object,C1.Win.Accessibility.ISupportUiaContainer)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="uiaRangeValue">Item with IUiaRangeValueProvider.</param>
            <param name="uiaValue">Item with IUiaValueProvider.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
            <param name="sourceContainer">Container with inner items.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaProgressBar.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaProgressBar.System#Windows#Automation#Provider#IRangeValueProvider#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaProgressBar.System#Windows#Automation#Provider#IRangeValueProvider#LargeChange">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaProgressBar.System#Windows#Automation#Provider#IRangeValueProvider#Maximum">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaProgressBar.System#Windows#Automation#Provider#IRangeValueProvider#Minimum">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaProgressBar.System#Windows#Automation#Provider#IRangeValueProvider#SmallChange">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaProgressBar.System#Windows#Automation#Provider#IRangeValueProvider#Value">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaProgressBar.System#Windows#Automation#Provider#IRangeValueProvider#SetValue(System.Double)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaProgressBar.System#Windows#Automation#Provider#IValueProvider#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaProgressBar.System#Windows#Automation#Provider#IValueProvider#Value">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaProgressBar.System#Windows#Automation#Provider#IValueProvider#SetValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaRadioButton">
            <summary>
            Represents UIA RadioButton.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaRadioButton.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaRadioButton.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionItemProvider,C1.Win.Accessibility.UiaItem,C1.Win.Accessibility.ISupportUiaContainer,System.Windows.Forms.Control,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="selectItem">Item with IUiaSelectionItemProvider.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="sourceContainer">Container with inner items.</param>        
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaRadioButton.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaRadioButton.IsSelected">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaRadioButton.SelectionContainer">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaRadioButton.AddToSelection">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaRadioButton.RemoveFromSelection">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaRadioButton.Select">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaScrollBar">
            <summary>
            Represents UIA Thumb.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaScrollBar.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaScrollBar.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,C1.Win.Accessibility.Items.BaseInterfaces.IUiaRangeValueProvider,System.String,System.Windows.Forms.Control,System.Object,C1.Win.Accessibility.ISupportUiaContainer)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="rangeValueItem">Item with IUiaRangeValueProvider.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
            <param name="sourceContainer">Container with inner items.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaScrollBar.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaScrollBar.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaScrollBar.LargeChange">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaScrollBar.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaScrollBar.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaScrollBar.SmallChange">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaScrollBar.Value">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaScrollBar.SetValue(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaSeparator">
            <summary>
            Represents UIA Separator.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSeparator.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaSeparator.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,C1.Win.Accessibility.ISupportUiaContainer,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceContainer">Container with inner items.</param>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaSlider">
            <summary>
            Represents UIA Slider.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSlider.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaSlider.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.Items.BaseInterfaces.IUiaRangeValueProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaValueProvider,C1.Win.Accessibility.ISupportUiaContainer,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="rangeValueItem">Item with IUiaRangeValueProvider.</param>
            <param name="selectItem">Item with IUiaSelectionProvider.</param>
            <param name="valueItem">Item with IUiaValueProvider.</param>
            <param name="sourceContainer">Container with inner items.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaSlider.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSlider.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSlider.Value">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSlider.LargeChange">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSlider.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSlider.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSlider.SmallChange">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaSlider.SetValue(System.Double)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSlider.System#Windows#Automation#Provider#IValueProvider#Value">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaSlider.SetValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSlider.CanSelectMultiple">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSlider.IsSelectionRequired">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaSlider.GetSelection">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaSpinner">
            <summary>
            Represents UIA Spinner.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSpinner.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaSpinner.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.ISupportUiaContainer,C1.Win.Accessibility.Items.BaseInterfaces.IUiaRangeValueProvider,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="sourceContainer">Container with inner items.</param>
            <param name="rangeValueItem">Item with IUiaRangeValueProvider.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaSpinner.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSpinner.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSpinner.Value">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSpinner.LargeChange">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSpinner.Maximum">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSpinner.Minimum">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSpinner.SmallChange">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaSpinner.SetValue(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaSplitButton">
            <summary>
            Represents UIA SplitButton.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSplitButton.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaSplitButton.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.ISupportUiaContainer,C1.Win.Accessibility.Items.IUiaSplitButton,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="sourceContainer">Container with inner items.</param>
            <param name="sourceSplitButton">Item with IUiaSplitButton.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaSplitButton.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaSplitButton.Invoke">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaSplitButton.ExpandCollapseState">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaSplitButton.Expand">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaSplitButton.Collapse">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaTab">
            <summary>
            Represents UIA Tab.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTab.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTab.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.ISupportUiaContainer,C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaScrollProvider,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="sourceContainer">Container with inner items.</param>
            <param name="selectItem">Item with IUiaSelectionProvider.</param>
            <param name="scrollItem">Item with IUiaScrollProvider.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTab.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTab.HorizontallyScrollable">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTab.HorizontalScrollPercent">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTab.HorizontalViewSize">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTab.VerticallyScrollable">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTab.VerticalScrollPercent">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTab.VerticalViewSize">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTab.Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTab.SetScrollPercent(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTab.CanSelectMultiple">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTab.IsSelectionRequired">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTab.GetSelection">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaTabItem">
            <summary>
            Represents UIA TabItem.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTabItem.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTabItem.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.ISupportUiaContainer,C1.Win.Accessibility.Items.BaseInterfaces.IUiaSelectionItemProvider,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="sourceContainer">Container with inner items.</param>
            <param name="selectItem">Item with IUiaSelectionItemProvider.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTabItem.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTabItem.SelectionContainer">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTabItem.IsSelected">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTabItem.AddToSelection">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTabItem.RemoveFromSelection">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTabItem.Select">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaTable">
            <summary>
            Represents UIA Table.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTable.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTable.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.ISupportUiaContainer,C1.Win.Accessibility.Items.BaseInterfaces.IUiaTableProvider,System.Windows.Forms.Control,C1.Win.Accessibility.UiaItem,C1.Win.Accessibility.Items.BaseInterfaces.IUiaTableItemProvider,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="tableItem">Item with IUiaTableItemProvider.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
            <param name="sourceContainer">Container with inner items.</param>
            <param name="table">Item with IUiaTableProvider</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTable.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTable.Column">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTable.ColumnSpan">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTable.ContainingGrid">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTable.Row">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTable.RowSpan">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTable.GetColumnHeaderItems">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTable.GetRowHeaderItems">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaTableBase">
            <summary>
            Represents UIA base class for Table and DataGrid.
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTableBase.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.ISupportUiaContainer,C1.Win.Accessibility.Items.BaseInterfaces.IUiaTableProvider,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
            <param name="sourceContainer">Container with inner items.</param>
            <param name="table">Item with IUiaTableProvider</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTableBase.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTableBase.RowOrColumnMajor">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTableBase.ColumnCount">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTableBase.RowCount">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTableBase.GetColumnHeaders">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTableBase.GetItem(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTableBase.GetRowHeaders">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaText">
            <summary>
            Represents UIA Text.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaText.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaText.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,System.String,System.Windows.Forms.Control,System.Object,C1.Win.Accessibility.ISupportUiaContainer)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
            <param name="sourceContainer">Container with inner items.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaText.GetPropertyValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaThumb">
            <summary>
            Represents UIA Thumb.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaThumb.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaThumb.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.Items.BaseInterfaces.IUiaTransformProvider,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,System.String,System.Windows.Forms.Control,System.Object,C1.Win.Accessibility.ISupportUiaContainer)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="transformItem">Item with IUiaTransformProvider.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
            <param name="sourceContainer">Container with inner items.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaThumb.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaThumb.CanMove">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaThumb.CanResize">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaThumb.CanRotate">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaThumb.Move(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaThumb.Resize(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaThumb.Rotate(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaTitleBar">
            <summary>
            Represents UIA TitelBar.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaTitleBar.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaTitleBar.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,C1.Win.Accessibility.ISupportUiaContainer,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
            <param name="sourceContainer">Container with inner items.</param>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaToggleButton">
            <summary>
            Represents UIA ToggleButton.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaToggleButton.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaToggleButton.ToggleState">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaToggleButton.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.Items.IUiaToggleButton,C1.Win.Accessibility.UiaItem,System.String,System.Windows.Forms.Control,System.Windows.Forms.Control,System.Object,C1.Win.Accessibility.ISupportUiaContainer)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="uiaToggleButton">Item with IUiaToggleButton.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
            <param name="sourceContainer">Container with inner items.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaToggleButton.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaToggleButton.GetPropertyValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaToggleButton.Toggle">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaToolBar">
            <summary>
            Represents UIA ToolBar.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaToolBar.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaToolBar.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.ISupportUiaContainer,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,C1.Win.Accessibility.Items.BaseInterfaces.IUiaExpandCollapseProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaTransformProvider,C1.Win.Accessibility.Items.BaseInterfaces.IUiaDockProvider,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="sourceContainer">Container with inner items.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="expandCollapseItem">Item with IUiaExpandCollapseProvider.</param>
            <param name="transformItem">Item with IUiaTransformProvider.</param>
            <param name="dockItem">Item with IUiaDockProvider.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaToolBar.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaToolBar.ExpandCollapseState">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaToolBar.Expand">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaToolBar.Collapse">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaToolBar.DockPosition">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaToolBar.SetDockPosition(System.Windows.Automation.DockPosition)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaToolBar.CanMove">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaToolBar.CanResize">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaToolBar.CanRotate">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaToolBar.Move(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaToolBar.Resize(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaToolBar.Rotate(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Accessibility.Items.UiaWindow">
            <summary>
            Represents UIA Window.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.Items.UiaWindow.UiaControlType">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.Items.UiaWindow.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,System.String,System.Object,C1.Win.Accessibility.ISupportUiaContainer)">
            <summary>
            Contructor.
            </summary>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="objectToCache">Object for caching.</param>
            <param name="sourceContainer">Container with inner items.</param>
        </member>
        <member name="T:C1.Win.Accessibility.ISupportUiaContainer">
            <summary>
            Interface for container of UIA items.
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.ISupportUiaContainer.GetInnerItems(C1.Win.Accessibility.UiaItem)">
            <summary>
            Gets a collection of inner items.
            </summary>
            <returns>Item collection.</returns>
        </member>
        <member name="T:C1.Win.Accessibility.UiaItemsCache">
            <summary>
            Represents UIA items cache.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.UiaItemsCache.Count">
            <summary>
            Gets items count in cache.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.UiaItemsCache.Enabled">
            <summary>
            Gets or sets UIA items cache enabled.
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItemsCache.AddUiaItemToCache(System.Object,C1.Win.Accessibility.UiaItem)">
            <summary>
            Adds UIA item with source item to cache.
            </summary>
            <param name="sourceItem">Source item.</param>
            <param name="uiaItem">UIA item.</param>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItemsCache.FindUiaItemInCache(System.Object)">
            <summary>
            Finds UIA item by source item in cache.
            </summary>
            <param name="sourceItem">Source item.</param>
            <returns>UIA item.</returns>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItemsCache.FindSourceItemInCache(C1.Win.Accessibility.UiaItem)">
            <summary>
            Finds source item by UIA item in cache.
            </summary>
            <param name="uiaItem">UIA item.</param>
            <returns>Source item.</returns>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItemsCache.Remove(System.Object)">
            <summary>
            Removes UIA item from cache by source item.
            </summary>
            <param name="sourceItem">Source item.</param>
        </member>
        <member name="T:C1.Win.Accessibility.UiaItem">
            <summary>
            Represents base class for UIA item.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.UiaItem.IsSuppressedEvents">
            <summary>
            Gets the state that events are supressed.
            Override in tests so events don't throw exceptions.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.UiaItem.UiaItems">
            <summary>
            List of inner UIA items.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.UiaItem.ItemsCache">
            <summary>
            Gets UIA items cache.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.UiaItem.SourceItem">
            <summary>
            Gets source item with ISupportUia.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.UiaItem.UiaParent">
            <summary>
            Gets the UIA parent of this item.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.UiaItem.UiaControlType">
            <summary>
            Gets UIA control type of this item.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.UiaItem.RootControl">
            <summary>
            Gets the root control that contains all UIA-items.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.UiaItem.ItemControl">
            <summary>
            Gets original control with handle of this item.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.UiaItem.UiaName">
            <summary>
            Gets or sets item name in UIA tree.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.UiaItem.IsOfscreen">
            <summary>
            Gets that item is offscreen.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.UiaItem.Initialized">
            <summary>
            Gets initialized state.
            </summary>
        </member>
        <member name="P:C1.Win.Accessibility.UiaItem.ItemsCacheEnabled">
            <summary>
            Gets that items cache is enabled.
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItem.#ctor(C1.Win.Accessibility.ISupportUia,C1.Win.Accessibility.UiaItem,System.Windows.Forms.Control,C1.Win.Accessibility.ISupportUiaContainer,System.String,System.Windows.Forms.Control,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceContainer">Container with inner items.</param>
            <param name="sourceItem">Item with ISupportUia.</param>
            <param name="rootControl">Root control for all items.</param>
            <param name="uiaParent">UIA parent of this item.</param>
            <param name="uiaName">Custom name for this item.</param>
            <param name="itemControl">Original control of this item.</param>
            <param name="objectToCache">Object for caching.</param>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItem.Initialize">
            <summary>
            Initializes the item and changes state.
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItem.Uninitialize">
            <summary>
            Uninitializes the item and clears inner items.
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItem.DoInitialize">
            <summary>
            Initializes the item.
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItem.ValidateItems">
            <summary>
            Validates the types or number of elements of this uia element.
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItem.GetItemId(C1.Win.Accessibility.UiaItem)">
            <summary>
            Gets UIA item number in inner collection.
            </summary>
            <param name="uiaItem">UIA item.</param>
            <returns>Number in collection.</returns>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItem.RefreshInnerItems">
            <summary>
            Refreshes inner items in container.
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItem.ElementProviderFromPoint(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItem.GetFocus">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItem.FindUiaItemInCache(System.Object)">
            <summary>
            Finds UIA item by source item in cache.
            </summary>
            <param name="sourceItem">Source item.</param>
            <returns>UIA item.</returns>
        </member>
        <member name="P:C1.Win.Accessibility.UiaItem.BoundingRectangle">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.UiaItem.FragmentRoot">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.UiaItem.ProviderOptions">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.Accessibility.UiaItem.HostRawElementProvider">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItem.GetEmbeddedFragmentRoots">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItem.GetPatternProvider(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItem.GetPropertyValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItem.GetRuntimeId">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItem.Navigate(System.Windows.Automation.Provider.NavigateDirection)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItem.SetFocus">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItem.GetNextSibling(System.Windows.Automation.Provider.IRawElementProviderFragment)">
            <summary>
            Gets sibling item in the view after the giving one.
            </summary>
            <param name="current">Item after which need sibling</param>
            <returns>UIA object</returns>
        </member>
        <member name="M:C1.Win.Accessibility.UiaItem.GetPrevSibling(System.Windows.Automation.Provider.IRawElementProviderFragment)">
            <summary>
            Gets sibling item in the view before the giving one.
            </summary>
            <param name="current">Item before which need sibling</param>
            <returns>UIA object</returns>
        </member>
        <member name="T:C1.Win.Accessibility.UiAutomationExt">
            <summary>
            UI Automation extension
            </summary>
        </member>
        <member name="M:C1.Win.Accessibility.UiAutomationExt.RaiseUiaEvent(System.Windows.Automation.Provider.IRawElementProviderSimple,System.Windows.Automation.AutomationEvent,System.Windows.Automation.AutomationEventArgs)">
            <summary>
            Raises UIA common event.
            </summary>
            <param name="provider">UIA provider object</param>
            <param name="uiaEvent">UIA event object</param>
            <param name="uiaArgs">UIA event arguments object</param>
        </member>
        <member name="M:C1.Win.Accessibility.UiAutomationExt.RaiseUiaEvent(System.Windows.Automation.Provider.IRawElementProviderSimple,System.Windows.Automation.AutomationPropertyChangedEventArgs)">
            <summary>
            Raises UIA property-event.
            </summary>
            <param name="provider">UIA provider object</param>
            <param name="uiaArgs">UIA event arguments object</param>
        </member>
        <member name="M:C1.Win.Accessibility.UiAutomationExt.RaiseUiaEvent(System.Windows.Automation.Provider.IRawElementProviderSimple,System.Windows.Automation.StructureChangedEventArgs)">
            <summary>
            Raises UIA structure-event.
            </summary>
            <param name="provider">UIA provider object</param>
            <param name="uiaArgs">UIA event arguments object</param>
        </member>
        <member name="M:C1.Win.Accessibility.UiAutomationExt.ToDouble(System.Drawing.Rectangle)">
            <summary>
            Converts Rectangle to array of double.
            </summary>
            <param name="value">Rectangle value</param>
            <returns>array of double values</returns>
        </member>
        <member name="M:C1.Win.Accessibility.UiAutomationExt.ToDouble(System.Windows.Rect)">
            <summary>
            Converts Windows.Rect to array of double.
            </summary>
            <param name="value">Rectangle value</param>
            <returns>array of double values</returns>
        </member>
        <member name="M:C1.Win.Accessibility.UiAutomationExt.ToRect(System.Drawing.Rectangle)">
            <summary>
            Converts Rectangle to Windows.Rect.
            </summary>
            <param name="value">Rectangle value</param>
            <returns>Rect value</returns>
        </member>
        <member name="M:C1.Win.Accessibility.UiAutomationExt.ToRectangle(System.Windows.Rect)">
            <summary>
            Converts Windows.Rect to Rectangle.
            </summary>
            <param name="value">Windows.Rect value</param>
            <returns>Rectangle value</returns>
        </member>
        <member name="T:C1.Win.Design.DesignerNames">
            <summary>
            Represents a list of designers names for design-time.
            </summary>
        </member>
        <member name="T:C1.Win.Design.EditorNames">
            <summary>
            Represents a list of editors names for design-time.
            </summary>
        </member>
        <member name="T:C1.Win.Design.DesignUtil">
            <summary>
            Provides various tool methods for design time.
            </summary>
        </member>
        <member name="M:C1.Win.Design.DesignUtil.InDebugMode(System.ComponentModel.Design.IDesignerHost)">
            <summary>
            Determines if the debugger is running for the specified IDesignerHost.
            </summary>
        </member>
        <member name="M:C1.Win.Design.DesignUtil.IsInDesignMode">
            <summary>
            Determines whether code is executing inside Visual Studio designer.
            </summary>
        </member>
        <member name="T:C1.Win.Drawing.StringRendererBase">
            <summary>
            Provides base methods used to measure and render text.
            </summary>
        </member>
        <member name="M:C1.Win.Drawing.StringRendererBase.PrepareHdc(System.Drawing.Graphics)">
            <summary>
            Gets the handle to the device context associated with <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <param name="graphics">The device context.</param>
            <returns>Handle to the device context associated with <see cref="T:System.Drawing.Graphics"/>.</returns>
        </member>
        <member name="M:C1.Win.Drawing.StringRendererBase.ReleaseHdc(System.Drawing.Graphics,System.IntPtr)">
            <summary>
            Releases a device context handle obtained by a previous call to the <see cref="M:C1.Win.Drawing.StringRendererBase.PrepareHdc(System.Drawing.Graphics)"/> method of <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <param name="graphics">The device context.</param>
            <param name="hdc">Handle to the device context associated with <see cref="T:System.Drawing.Graphics"/></param>
        </member>
        <member name="T:C1.Win.Drawing.StringRendererGDI">
            <summary>
            Provides methods used to measure and render text using GDI.
            </summary>
        </member>
        <member name="M:C1.Win.Drawing.StringRendererGDI.GetTextFormatFlags(System.Drawing.StringFormat,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Windows.Forms.TextFormatFlags"/> corresponding to the specified <see cref="T:System.Drawing.StringFormat"/>.
            </summary>
            <param name="stringFormat">The text layout information.</param>
            <param name="rightToLeft">If true, the text is displayed from right to left.</param>
            <returns>The display and layout information for text strings.</returns>
        </member>
        <member name="M:C1.Win.Drawing.StringRendererGDI.HighlightSubstring(System.Drawing.Graphics,System.Drawing.Font,System.Windows.Forms.TextFormatFlags,System.Drawing.Color,System.Drawing.Rectangle,System.String,System.Drawing.Color,System.String,System.Int32)">
            <summary>
            Draws text and highlight a part of that text with a special background.
            </summary>
            <param name="graphics">The device context in which to draw the text.</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> to apply to the drawn text.</param>
            <param name="textFormatFlags">The text layout information.</param>
            <param name="foreColor">The <see cref="T:System.Drawing.Color"/> to apply to the drawn text.</param>
            <param name="bounds">The <see cref="T:System.Drawing.Rectangle"/> that represents the bounds of the text.</param>
            <param name="text">The text to draw.</param>
            <param name="highlightColor">The highlight <see cref="T:System.Drawing.Color"/> of substrings.</param>
            <param name="substring">The substring to highlight.</param>
            <param name="substringStartIndex">The position at which the substring starts.</param>
        </member>
        <member name="M:C1.Win.Drawing.StringRendererGDI.HighlightSubstring(System.Drawing.Graphics,System.Drawing.Font,System.Windows.Forms.TextFormatFlags,System.Drawing.Color,System.Drawing.Rectangle,System.String,System.Drawing.Color,System.Collections.Generic.IList{System.Drawing.CharacterRange})">
            <summary>
            Draws text and highlight a parts of that text with a special background.
            </summary>
            <param name="graphics">The device context in which to draw the text.</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> to apply to the drawn text.</param>
            <param name="textFormatFlags">The text layout information.</param>
            <param name="foreColor">The <see cref="T:System.Drawing.Color"/> to apply to the drawn text.</param>
            <param name="bounds">The <see cref="T:System.Drawing.Rectangle"/> that represents the bounds of the text.</param>
            <param name="text">The text to draw.</param>
            <param name="highlightColor">The highlight <see cref="T:System.Drawing.Color"/> of substrings.</param>
            <param name="substringRanges">Positions and lengths of all occurrences of substrings to highlight.</param>
        </member>
        <member name="M:C1.Win.Drawing.StringRendererGDI.MeasureSubstring(System.Drawing.Graphics,System.Drawing.Font,System.Windows.Forms.TextFormatFlags,System.Drawing.Rectangle,System.String,System.String,System.Int32)">
            <summary>
            Gets the bounds for displaying the part of this text.
            </summary>
            <param name="graphics">The device context.</param>
            <param name="font">The Font of text.</param>
            <param name="textFormatFlags">The text layout information.</param>
            <param name="bounds">The <see cref="T:System.Drawing.Rectangle"/> that represents the bounds of the text.</param>
            <param name="text">The text to draw.</param>
            <param name="substring">The substring to highlight.</param>
            <param name="substringStartIndex">The position at which the substring starts.</param>
        </member>
        <member name="M:C1.Win.Drawing.StringRendererGDI.MeasureSubstring(System.Drawing.Graphics,System.Drawing.Font,System.Windows.Forms.TextFormatFlags,System.Drawing.Rectangle,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the bounds for displaying the part of this text.
            </summary>
            <param name="graphics">The device context.</param>
            <param name="font">The Font of text.</param>
            <param name="textFormatFlags">The text layout information.</param>
            <param name="bounds">The <see cref="T:System.Drawing.Rectangle"/> that represents the bounds of the text.</param>
            <param name="text">The text to draw.</param>
            <param name="substringStartIndex">The position at which the substring starts.</param>
            <param name="substringLength">The length of substring.</param>
        </member>
        <member name="M:C1.Win.Drawing.StringRendererGDI.MeasureSubstring(System.Drawing.Graphics,System.Drawing.Font,System.Windows.Forms.TextFormatFlags,System.Drawing.Rectangle,System.String,System.Collections.Generic.IList{System.Drawing.CharacterRange})">
            <summary>
            Gets the bounds for displaying the part of this text.
            </summary>
            <param name="graphics">The device context.</param>
            <param name="font">The Font of text.</param>
            <param name="textFormatFlags">The text layout information.</param>
            <param name="bounds">The <see cref="T:System.Drawing.Rectangle"/> that represents the bounds of the text.</param>
            <param name="text">The text to draw.</param>
            <param name="substringRanges">Positions and lengths of all occurrences of substrings to highlight.</param>
        </member>
        <member name="T:C1.Win.Drawing.StringRendererGDIPlus">
            <summary>
            Provides methods used to measure and render text using GDI plus.
            </summary>
        </member>
        <member name="M:C1.Win.Drawing.StringRendererGDIPlus.HighlightSubstring(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.StringFormat,System.Drawing.Brush,System.Drawing.Rectangle,System.String,System.Drawing.Brush,System.String,System.Int32)">
            <summary>
            Draws text and highlight a part of that text with a special background.
            </summary>
            <param name="graphics">The device context in which to draw the text.</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> to apply to the drawn text.</param>
            <param name="stringFormat">The text layout information.</param>
            <param name="foreBrush">The <see cref="T:System.Drawing.Brush"/> to apply to the drawn text.</param>
            <param name="bounds">The <see cref="T:System.Drawing.Rectangle"/> that represents the bounds of the text.</param>
            <param name="text">The text to draw.</param>
            <param name="highlightBrush">The highlight <see cref="T:System.Drawing.Brush"/> of substrings.</param>
            <param name="substring">The substring to highlight.</param>
            <param name="substringStartIndex">The position at which the substring starts.</param>
        </member>
        <member name="M:C1.Win.Drawing.StringRendererGDIPlus.HighlightSubstring(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.StringFormat,System.Drawing.Brush,System.Drawing.Rectangle,System.String,System.Drawing.Brush,System.Collections.Generic.IList{System.Drawing.CharacterRange})">
            <summary>
            Draws text and highlight a parts of that text with a special background.
            </summary>
            <param name="graphics">The device context in which to draw the text.</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> to apply to the drawn text.</param>
            <param name="stringFormat">The text layout information.</param>
            <param name="foreBrush">The <see cref="T:System.Drawing.Brush"/> to apply to the drawn text.</param>
            <param name="bounds">The <see cref="T:System.Drawing.Rectangle"/> that represents the bounds of the text.</param>
            <param name="text">The text to draw.</param>
            <param name="highlightBrush">The highlight <see cref="T:System.Drawing.Brush"/> of substrings.</param>
            <param name="substringRanges">Positions and lengths of all occurrences of substrings to highlight.</param>
        </member>
        <member name="M:C1.Win.Drawing.StringRendererGDIPlus.MeasureSubstring(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.StringFormat,System.Drawing.Rectangle,System.String,System.String,System.Int32)">
            <summary>
            Gets the bounds for displaying the part of this text.
            </summary>
            <param name="graphics">The device context.</param>
            <param name="font">The Font of text.</param>
            <param name="stringFormat">The text layout information.</param>
            <param name="bounds">The <see cref="T:System.Drawing.Rectangle"/> that represents the bounds of the text.</param>
            <param name="text">The text to draw.</param>
            <param name="substring">The substring to highlight.</param>
            <param name="substringStartIndex">The position at which the substring starts.</param>
        </member>
        <member name="M:C1.Win.Drawing.StringRendererGDIPlus.MeasureSubstring(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.StringFormat,System.Drawing.Rectangle,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the bounds for displaying the part of this text.
            </summary>
            <param name="graphics">The device context.</param>
            <param name="font">The Font of text.</param>
            <param name="stringFormat">The text layout information.</param>
            <param name="bounds">The <see cref="T:System.Drawing.Rectangle"/> that represents the bounds of the text.</param>
            <param name="text">The text to draw.</param>
            <param name="substringStartIndex">The position at which the substring starts.</param>
            <param name="substringLength">The length of substring.</param>
        </member>
        <member name="M:C1.Win.Drawing.StringRendererGDIPlus.MeasureSubstring(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.StringFormat,System.Drawing.Rectangle,System.String,System.Collections.Generic.IList{System.Drawing.CharacterRange})">
            <summary>
            Gets the bounds for displaying the part of this text.
            </summary>
            <param name="graphics">The device context.</param>
            <param name="font">The Font of text.</param>
            <param name="stringFormat">The text layout information.</param>
            <param name="bounds">The <see cref="T:System.Drawing.Rectangle"/> that represents the bounds of the text.</param>
            <param name="text">The text to draw.</param>
            <param name="substringRanges">Positions and lengths of all occurrences of substrings to highlight.</param>
        </member>
        <member name="T:C1.Win.CommonDialogExt">
            <summary>
            Provides extenstion methods for the <see cref="T:System.Windows.Forms.CommonDialog"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.CommonDialogExt.ShowLocalizedDialog(System.Windows.Forms.CommonDialog)">
            <summary>
            Runs a common dialog box with a default owner.
            </summary>        
            <returns><see cref="F:System.Windows.Forms.DialogResult.OK"/> if the user clicks OK in the dialog box; otherwise, <see cref="F:System.Windows.Forms.DialogResult.Cancel"/>.</returns>
        </member>
        <member name="T:C1.Win.SuperTooltip.ISupportSuperTooltip">
            <summary>
            The interface implemented by the control extended by a super tooltip.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.ISupportSuperTooltip.ShowToolTips">
            <summary>
            Gets or sets whether the control should display tooltips.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.ISupportSuperTooltip.SuperTooltip">
            <summary>
            Gets or sets the external instance of C1SuperTooltip class used to display tooltips.
            </summary>
        </member>
        <member name="T:C1.Win.SuperTooltip.C1SuperLabelBase">
            <summary>
            Represents a label that shows static information on a form.
            </summary>
        </member>
        <member name="E:C1.Win.SuperTooltip.C1SuperLabelBase.LinkClicked">
            <summary>
            Event that fires when the user clicks a hyperlink within a <see cref="T:C1.Win.SuperTooltip.C1SuperLabelBase"/> control.
            </summary>
            <remarks>
            Hyperlinks are created using "A" tags in the HTML source text. When hyperlinks are clicked,
            the <b>LinkClicked</b> event fires and provides information about the link. The event handler
            can then take appropriate action.
            </remarks>
            <example>
            The example below creates some hyperlinks using "A" tags. When the user clicks the link, the
            event handler shows a message box.
            <code>
            // configure c1superLabel
            c1superLabel.AutoSize = true;
            c1superLabel.Text =
                "click &lt;a href='about'&gt;&lt;b&gt;HERE&lt;/b&gt;&lt;/a&gt; to see an about box.&lt;br&gt;" +
                "or click &lt;a href='time'&gt;&lt;b&gt;HERE&lt;/b&gt;&lt;/a&gt; to see the current time.";
            
            // attach event handler
            c1superLabel.LinkClicked += new C1SuperLabelLinkClickedEventHandler(c1superLabel_LinkClicked);
            // ...
            
            void c1superLabel_LinkClicked(object sender, C1SuperLabelLinkClickedEventArgs e)
            {
              if (e.HRef == "about")
              {
                MessageBox.Show("About C1SuperLabel!");
              }
              else if (e.HRef == "time")
              {
                MessageBox.Show("The time is " + DateTime.Now.ToShortTimeString());
              }
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.SuperTooltip.C1SuperLabelBase"/> control.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperLabelBase.BorderStyle">
            <summary>
            Gets or sets the type of border around the control.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperLabelBase.Images">
            <summary>
            Gets a collection of images that may be shown in the label.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperLabelBase.UseMnemonic">
            <summary>
            Gets or sets whether ampersands (&amp;) are used to indicate the next character is a hot key.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.OnLinkClicked(C1.Win.SuperTooltip.C1SuperLabelLinkClickedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.SuperTooltip.C1SuperLabelBase.LinkClicked"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.SuperTooltip.C1SuperLabelLinkClickedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.Measure">
            <summary>
            Measures the width and height of the control content.
            </summary>
            <returns><see cref="T:System.Drawing.Size"/> object that represents the size of the content, in pixels.</returns>
            <example>
            The code below scans all the rows in a <b>C1FlexGrid</b> and calculates the width needed
            to display the cell with the widest content:
            <code>
            int GetMaximumCellWidth(int col)
            {
              // maximum width is unknown
              int maxWidth = -1;
            
              // scan all rows to find the widest content
              for (int row = 0; row &lt; _flex.Rows.Count; row++)
              {
                // get cell content
                string text = _flex.GetDataDisplay(row, col);
            
                // check that the cell contains html
                if (!string.IsNullOrEmpty(text) &amp;&amp;
                     text.StartsWith("&lt;html&gt;"))
                {
                  // measure width needed to render the Html
                  _superLabel.Text = text;
                  int width = _superLabel.Measure().Width;
            
                  // save maximum width
                  if (width > maxWidth)
                    maxWidth = width;
              }
              return maxWidth;
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.Measure(System.Drawing.Graphics)">
            <summary>
             Measures the width and height of the control content using specified <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <param name="graphics"><see cref="T:System.Drawing.Graphics"/> used to measure.</param>
            <returns><see cref="T:System.Drawing.Size"/> object that represents the size of the content, in pixels.</returns>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.Measure(System.Int32)">
            <summary>
            Measures the height of the control content when rendered with a given width.
            </summary>
            <param name="width">Width used to calculate word-wrapping.</param>
            <returns><see cref="T:System.Drawing.Size"/> object that represents the size of the content, in pixels.</returns>
            <example>
            The code below scans all the columns in a <b>C1FlexGrid</b> and calculates the height needed
            to display the cell with the tallest content:
            <code>
            int GetMaximumCellHeight(int row)
            {
              // maximum height is unknown
              int maxHeight = -1;
            
              // scan all columns to find the tallest content
              for (int col = 0; col &lt; _flex.Cols.Count; col++)
              {
                // get cell content
                string text = _flex.GetDataDisplay(row, col);
            
                // check that the cell contains html
                if (!string.IsNullOrEmpty(text) &amp;&amp;
                     text.StartsWith("&lt;html&gt;"))
                {
                  // measure height needed to render the Html
                  _superLabel.Text = text;
                  int width = _flex.Cols[col].WidthDisplay;
                  int height = _superLabel.Measure(width).Height;
            
                  // save maximum height
                  if (height > maxHeight)
                    maxHeight = height;
              }
              return maxHeight;
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.Measure(System.Drawing.Graphics,System.Int32)">
            <summary>
            Measures the height of the control content using specified <see cref="T:System.Drawing.Graphics"/> when rendered with a given width.
            </summary>
            <param name="graphics"><see cref="T:System.Drawing.Graphics"/> used to measure.</param>
            <param name="width">Width used to calculate word-wrapping.</param>
            <returns><see cref="T:System.Drawing.Size"/> object that represents the size of the content, in pixels.</returns>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.DrawToGraphics(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the control content into a given <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the content will be rendered.</param>
            <param name="bounds"><see cref="T:System.Drawing.Rectangle"/> that specifies the bounds where the content will be rendered.</param>
            <example>
            The example below uses the <b>DrawToGraphics</b> method to render Html in a <b>C1FlexGrid</b> control.
            Grid cells containing text that starts with an &lt;html&gt; tag are rendered as Html. Other cells are
            rendered by the grid as usual.
            <code>
            void _flex_OwnerDrawCell(object sender, OwnerDrawCellEventArgs e)
            {
              // get cell content
              string text = _flex.GetDataDisplay(e.Row, e.Col);
            
              // check that the cell contains html
              if (!string.IsNullOrEmpty(text) &amp;&amp;
                   text.StartsWith("&lt;html&gt;"))
              {
                // set label back color and content
                _superLabel.BackColor = e.Style.BackColor;
                _superLabel.Text = text;
            
                // draw the Html into grid cell
                _superLabel.DrawToGraphics(e.Graphics, e.Bounds);
            
                // cell has been drawn
                e.Handled = true;
              }
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.DrawToGraphics(System.Drawing.Graphics,System.Drawing.RectangleF,System.Int32)">
            <summary>
            Draws an HTML string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects,
            starting at a given offset within the string.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the content will be rendered.</param>
            <param name="bounds"><see cref="T:System.Drawing.Rectangle"/> that specifies the bounds where the content will be rendered.</param>
            <param name="offset">Offset of the first line to draw (usually the return value of a previous call to <b>DrawStringHtml</b>).</param>
            <returns>The offset of the first line that was not printed because it did not fit in the specified rectangle, or the value of 
            <see cref="F:System.Int32.MaxValue"/> if the entire string was rendered. By default zero.</returns>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.GetInnerElement">
            <summary>
            This method is intended for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            Update internal style when RightToLeft property changes.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperLabelBase.AutoSize">
            <summary>
            Gets or sets a value indicating whether the control is automatically resized to display its entire contents. 
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperLabelBase.BackgroundImageLayout">
            <summary>
            Gets or sets the background image layout as defined in the <see cref="P:C1.Win.SuperTooltip.C1SuperLabelBase.BackgroundImageLayout"/> enumeration. 
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperLabelBase.BackgroundImage">
            <summary>
            Gets or sets the background image displayed in the control. 
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.ProcessMnemonic(System.Char)">
            <summary>
            Processes a mnemonic character.
            </summary>
            <param name="charCode">The character to process. </param>
            <returns>True if the character was processed as a mnemonic by the control; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.OnTextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.TextChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.OnBackColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.OnForeColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.ForeColorChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.OnFontChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.FontChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.SizeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.OnPaddingChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.PaddingChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.OnCursorChanged(System.EventArgs)">
            <summary>
            Occurs when the value of the <see cref="T:System.Windows.Forms.Cursor"/> property changes. 
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperLabelBase.CreateParams">
            <summary>
            Gets the required creation parameters when the control handle is created.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.Dispose(System.Boolean)">
            <summary>
            Releases resources used by the component
            </summary>
            <param name="disposing">True to release all resources; false to release unmanaged resources only.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.GetOrCreateStyle">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.ApplyStyle(C1.Framework.Style)">
            <summary>
            Recreates HTML element using the specified style and UseMnemonic value,
            re-parses the text.
            </summary>
            <param name="style">The style to apply.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.UpdateText">
            <summary>
            Parses the Text property into Html.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelBase.UpdateControlSize">
            <summary>
            Handles auto-sizing when necessary.
            </summary>
        </member>
        <member name="T:C1.Win.SuperTooltip.C1SuperLabelLinkClickedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.SuperTooltip.C1SuperLabelBase.LinkClicked"/> event.
            </summary>
            <param name="sender">Object that fired the event.</param>
            <param name="e"><see cref="T:System.Windows.Forms.LinkClickedEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="T:C1.Win.SuperTooltip.C1SuperLabelLinkClickedEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.SuperTooltip.C1SuperLabelBase.LinkClicked"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperLabelLinkClickedEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.String,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:System.Windows.Forms.LinkClickedEventArgs"/>.
            </summary>
            <param name="button"><see cref="T:System.Windows.Forms.MouseButtons"/> that was pressed on the link.</param>
            <param name="hRef">Value of the link's HREF attribute.</param>
            <param name="target">Value of the link's TARGET attribute.</param>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperLabelLinkClickedEventArgs.Button">
            <summary>
            Gets the button that was clicked on the link.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperLabelLinkClickedEventArgs.HRef">
            <summary>
            Gets the value of the link's HREF attribute.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperLabelLinkClickedEventArgs.Target">
            <summary>
            Gets the value of the link's TARGET attribute.
            </summary>
        </member>
        <member name="T:C1.Win.SuperTooltip.BackgroundGradient">
            <summary>
            Specifies a background gradient for the ToolTip.
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.BackgroundGradient.None">
            <summary>
            Use no background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.BackgroundGradient.Automatic">
            <summary>
            Use a gradient that matches the current system Visual Style.
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.BackgroundGradient.Silver">
            <summary>
            Use a silver background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.BackgroundGradient.Blue">
            <summary>
            Use a blue background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.BackgroundGradient.Gold">
            <summary>
            Use a gold background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.BackgroundGradient.Olive">
            <summary>
            Use an olive background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.BackgroundGradient.Vista">
            <summary>
            Use the Vista-style background gradient.
            </summary>
        </member>
        <member name="T:C1.Win.SuperTooltip.BackgroundImageLayout">
            <summary>
            Specifies the layout logic used to display the background image.
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.BackgroundImageLayout.None">
            <summary>
            The image is left-aligned at the top across the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.BackgroundImageLayout.Tile">
            <summary>
            The image is tiled across the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.BackgroundImageLayout.Center">
            <summary>
            The image is centered within the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.BackgroundImageLayout.Stretch">
            <summary>
            The image is stretched across the control's client rectangle. 
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.BackgroundImageLayout.Zoom">
            <summary>
            The image is enlarged within the control's client rectangle.
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.BackgroundImageLayout.TileStretch">
            <summary>
            The image is split into nine pieces and tiled within the control's client rectangle.
            Center tiles are stretched, corner tiles are rendered with the original size.
            </summary>
        </member>
        <member name="T:C1.Win.SuperTooltip.StaysOpenMode">
            <summary>
            Specifies under what conditions the tooltip will remain visible 
            if the mouse pointer leaves the control.
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.StaysOpenMode.Never">
            <summary>
            The tooltip never remains visible.
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.StaysOpenMode.HoldControl">
            <summary>
            The tooltip remains visible only when the Control key is pressed.
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.StaysOpenMode.HoldAlt">
            <summary>
            The tooltip remains visible only when the Alt key is pressed.
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.StaysOpenMode.HoldShift">
            <summary>
            The tooltip remains visible only when the Shift key is pressed.
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.StaysOpenMode.Always">
            <summary>
            The tooltip always remains visible.
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.StaysOpenMode.Hovered">
            <summary>
            The tooltip remains visible while the mouse cursor is hovered over it.
            </summary>
        </member>
        <member name="T:C1.Win.SuperTooltip.C1SuperTooltipBase">
            <summary>
            Represents a pop-up window that displays a brief description of a control's purpose 
            when the mouse hovers over the control.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> component.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.StaysOpenMode">
            <summary>
            Gets or sets a value indicating under what conditions the tooltip will remain 
            visible if the mouse pointer leaves the control.
            Period of time (in milliseconds) the tooltip remains visible can be set using 
            the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.AutoPopDelay"/> property.
            </summary>
            <remarks>
            This property works only if <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.HitTestVisible"/> is true. Otherwise, 
            the Control behaves as if the property is set to a value <see cref="F:C1.Win.SuperTooltip.StaysOpenMode.Never"/>.
            </remarks>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.Active">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> is currently active.
            </summary>
            <remarks>
            <para>This property allows you to enable or disable the display of <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> 
            text for all controls that have text specified in this particular <b>C1SuperTooltip</b>. 
            More than one <b>C1SuperTooltip</b> can be created and assigned to a form; setting the 
            <b>Active</b> property to false only affects the specified <b>C1SuperTooltip</b>.</para>
            <para>You can allow users to set the value of this property in a form that provides 
            application options to provide the ability for the user to enable or disable the display 
            of <b>C1SuperTooltips</b> in your application.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.FollowCursor">
            <summary>
            Gets or sets a value indicating whether the tooltip follows the cursor.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.AutomaticDelay">
            <summary>
            Gets or sets the automatic delay for the <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/>.
            </summary>
            <remarks>
            <para>The <b>AutomaticDelay</b> property enables you to set a single delay value which 
            is then used to set the values of the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.AutoPopDelay"/>, <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.InitialDelay"/>, 
            and <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.ReshowDelay"/> properties. Each time the <b>AutomaticDelay</b> property is set, 
            the following values are set by default.</para>
            <para><b>AutoPopDelay</b>: 10 times the <b>AutomaticDelay</b> property value.</para>
            <para><b>InitialDelay</b>: Equal to the <b>AutomaticDelay</b> property value.</para>
            <para><b>ReshowDelay</b>: 1/5 of the <b>AutomaticDelay</b> property value.</para>
            <para>These properties can also be set independently once the AutomaticDelay property has been set. 
            For more information, see the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.AutoPopDelay"/>, <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.InitialDelay"/>, and 
            <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.ReshowDelay"/> properties. This property is typically used to provide a consistent 
            delay pattern for your <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> windows.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.UseCellTips">
            <summary>
            Gets or sets a value indicating whether the tooltip should display ToolTipText of Microsoft's ListView items or Microsoft's DataGridView cells.
            </summary> 
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.ShouldSerializeAutoPopDelay">
            <summary>
            Gets a value that determines whether the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.AutoPopDelay"/> property should be serialized.
            </summary>
            <returns>True if the current value is different from the default (10 * <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.AutomaticDelay"/>).</returns>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.ShouldSerializeInitialDelay">
            <summary>
            Gets a value that determines whether the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.InitialDelay"/> property should be serialized.
            </summary>
            <returns>True if the current value is different from the default (<see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.AutomaticDelay"/>).</returns>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.ShouldSerializeReshowDelay">
            <summary>
            Gets a value that determines whether the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.ReshowDelay"/> property should be serialized.
            </summary>
            <returns>True if the current value is different from the default (<see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.AutomaticDelay"/> / 5).</returns>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.AutoPopDelay">
            <summary>
            Gets or sets the period of time (in milliseconds) the tooltip remains visible if the 
            mouse pointer is stationary within a control.
            </summary>
            <remarks>
            <para>This property enables you to shorten or lengthen the time that the <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> 
            window is displayed when the mouse pointer is over a control. For example, if you display 
            extensive help in a <b>C1SuperTooltip</b> window, you can increase the value of this property 
            to ensure that the user has sufficient time to read the text.</para>
            <para>If you want to have a consistent delay pattern for your <b>C1SuperTooltip</b> windows, 
            you can set the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.AutomaticDelay"/> property. The <b>AutomaticDelay</b> property 
            sets the <b>AutoPopDelay</b>, <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.ReshowDelay"/>, and <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.InitialDelay"/> 
            properties to initial values based on a single value. Every time the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.AutomaticDelay"/> 
            property is set, the <b>AutoPopDelay</b> property is set to 10 times the <b>AutomaticDelay</b>
            property value. Once the <b>AutomaticDelay</b> property is set, you can independently 
            set the <b>AutoPopDelay</b> property, overriding the default value.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.ShowAlways">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> window is displayed even 
            when its parent control is not active.
            </summary>
            <remarks>
            
            <para>This property enables you to display a <b>C1SuperTooltip</b> window even when the container 
            of the tooltip is not active.</para>
            
            <para>You can use this feature in a modeless window application to enable <b>C1SuperTooltip</b>
            windows to be displayed regardless of which modeless window is active. This feature is also 
            useful when creating a control using the <b>UserControl</b> that contains a number of 
            controls that display tooltips. Since the <b>UserControl</b> is often not the active 
            window on a form, setting this property to true enables the controls within the 
            <b>UserControl</b> to display <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> windows at any time.</para>
            
            </remarks>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.InitialDelay">
            <summary>
            Gets or sets the time that passes before the tooltip appears.
            </summary>
            <remarks>
            <para>This property enables you to shorten or lengthen the time that the <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> 
            waits before displaying a tooltip window. If the value of the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.InitialDelay"/> 
            property is set to a value that is too long in duration, the user of your application 
            may not know that your application provides <b>C1SuperTooltip</b> help. You can use this 
            property to ensure that the user has tooltips displayed quickly by shortening the time 
            specified.</para>
            <para>If you want to have a consistent delay pattern for your <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> windows,
            you can set the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.AutomaticDelay"/> property. The <b>AutomaticDelay</b> property sets the 
            <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.AutoPopDelay"/>, <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.ReshowDelay"/>, and <b>InitialDelay</b> properties 
            to initial values based on a single time value. Every time the <b>AutomaticDelay</b> property 
            is set, the <b>InitialDelay</b> property is set to the same value as the <b>AutomaticDelay</b>
            property. Once the <b>AutomaticDelay</b> property is set, you can independently set the 
            <b>InitialDelay</b> property, overriding the default value.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.ReshowDelay">
            <summary>
            Gets or sets the length of time that must transpire before subsequent <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> windows appear 
            as the mouse pointer moves from one control to another.
            </summary>
            <remarks>
            <para>This property enables you to shorten or lengthen the time that the <b>C1SuperTooltip</b> 
            waits before displaying a tooltip window after a previous tooltip window is displayed. 
            The first time a tooltip window is displayed the value of the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.InitialDelay"/> 
            property is used to determine the delay to apply before initially showing the tooltip 
            window. When a tooltip window is currently being displayed and the user moves the cursor 
            to another control that displays a tooltip window, the value of the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.ReshowDelay"/> 
            property is used before showing the tooltip for the new control. The tooltip window from 
            the previous control must still be displayed in order for the delay specified in the 
            <b>ReshowDelay</b> property to be used; otherwise the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.InitialDelay"/> property 
            value is used.</para>
            <para>If you want to have a consistent delay pattern for your <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> windows,
            you can set the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.AutomaticDelay"/> property. The <b>AutomaticDelay</b> property sets the 
            <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.AutoPopDelay"/>, <b>ReshowDelay</b>, and <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.InitialDelay"/> properties 
            to initial values based on a single time value. Every time the <b>AutomaticDelay</b> property 
            is set, the <b>InitialDelay</b> property is set to the same value as the <b>AutomaticDelay</b>
            property. Once the <b>AutomaticDelay</b> property is set, you can independently set the 
            <b>InitialDelay</b> property, overriding the default value.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.GetToolTipInt(System.Windows.Forms.Control)">
            <summary>
            Retrieves the <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> text associated with the specified control.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.GetToolTipInt(System.Windows.Forms.ToolStripItem)">
            <summary>
            Retrieves the <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> text associated with the specified <see cref="T:System.Windows.Forms.ToolStripItem"/> component.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.SetToolTipInt(System.Windows.Forms.Control,System.String)">
            <summary>
            Associates tooltip HTML text with the specified control.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.SetToolTipInt(System.Windows.Forms.ToolStripItem,System.String)">
            <summary>
            Associates tooltip HTML text with the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.RemoveAll">
            <summary>
            Removes all tooltip text currently associated with the <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> component.
            </summary>
            <remarks>
            You can use this method to remove all tooltip text that is associated with the 
            <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> component. To disable the display of text instead of removing all 
            tooltip text from the <b>C1SuperTooltip</b> control, use the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.Active"/> property.
            </remarks>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.BackColor">
            <summary>
            Gets or sets the background color of the tooltip window.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.ForeColor">
            <summary>
            Gets or sets the foreground color of the tooltip window.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.Font">
            <summary>
            Gets or sets the default font used to display the tooltip.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.Shadow">
            <summary>
            Gets or sets whether the tooltip window should display a shadow.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.Border">
            <summary>
            Gets or sets whether the tooltip window should display a solid border.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.BorderColor">
            <summary>
            Gets or sets whether the color of the border drawn around the tooltip when the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.Border"/> property is set to true.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.BackgroundImage">
            <summary>
            Gets or sets the background image displayed in tooltip window.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.BackgroundImageLayout">
            <summary>
            Gets or sets the background image layout as defined in the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.BackgroundImageLayout"/> enumeration.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.IsBalloon">
            <summary>
            Gets or sets whether the tooltip is shown in a balloon shape.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.RoundedCorners">
            <summary>
            Gets or sets whether the tooltip window has rounded corners.
            </summary>
            <remarks>
            This property has no effect if <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.IsBalloon"/> is set to true.
            </remarks>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.StripAmpersands">
            <summary>
            Gets or sets whether ampersands in the text should be hidden.
            </summary>
            <remarks>
            Ampersands should be encoded in HTML as '&amp;amp;' or '&amp;#38;'.
            Ampersands that are not properly encoded will not be hidden.
            </remarks>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.UseFading">
            <summary>
            Gets or sets whether a fade effect should be used when displaying the tooltip.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.Images">
            <summary>
            Gets a collection of images that may be shown in tooltips.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.BackgroundGradient">
            <summary>
            Gets or sets the background gradient for the tooltips.
            </summary>
            <remarks>
            <para>When the <b>BackgroundGradient</b> is set to a value other than none, the gradient
            is used instead of the image specified by the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.BackgroundImage"/> property.</para>
            <para>If you want to use a gradient different from the built-in ones, create an image
            and assign it to the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.BackgroundImage"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.MaximumWidth">
            <summary>
            Gets or sets the maximum width of the tooltips.
            </summary>
            <remarks>
            <para>The <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> displays Html text. If the tip contains a lot
            of text without Html tags that cause line breaks (such as &lt;br&gt; or &lt;p&gt;
            for example), then the text will not wrap and the tooltip window may be too wide.</para>
            <para>Use this property to force text to wrap within the tooltip so it fits in the
            given width, even without Html line break tags.</para>
            <para>Values less than or equal to zero disable the property and cause the tip text 
            to wrap only at the specified Html break tags.</para>
            <example>
            The code below forces all super tooltips to be less than or equal to 200 pixels 
            wide.
            <code>
            c1SuperTooltip1.MaximumWidth = 200;
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.Opacity">
            <summary>
            Gets or sets the opacity of the tooltips.
            </summary>
            <remarks>
            This property should be set to a value between zero (totally transparent)
            and one (totally opaque).
            </remarks>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.HitTestVisible">
            <summary>
            Gets or sets a value that determines whether the tooltip can be clicked.
            </summary>
            <remarks>
            <para>This property is set to false by default, so the tooltip is invisible to 
            the mouse. All mouse events are passed on to the control under the tooltip.</para>
            <para>Set this property to true if you want to add clickable areas to the tooltip, 
            such as hyperlinks. In this case, the tooltip becomes visible to the mouse handles
            the mouse events itself instead of passing them to the control under the tooltip.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.GetPublicRtl">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.Rtl">
            <summary>
            Gets or sets a value indicating if the tooltip should be displayed in right-to-left mode.
            </summary>
        </member>
        <member name="E:C1.Win.SuperTooltip.C1SuperTooltipBase.Popup">
            <summary>
            Fires before the <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> is displayed.
            </summary>
            <remarks>
            This event allows you to modify the location of the tooltip (by adjusting the <see cref="P:C1.Win.SuperTooltip.PopupEventArgs.Location"/> 
            parameter), or to prevent the tooltip from being displayed (by setting the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> parameter.
            </remarks>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.OnPopup(C1.Win.SuperTooltip.PopupEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.SuperTooltip.C1SuperTooltipBase.Popup"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.SuperTooltip.PopupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="E:C1.Win.SuperTooltip.C1SuperTooltipBase.LinkClicked">
            <summary>
            Event that fires when the user clicks a hyperlink within a <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/>.
            </summary>
            <remarks>
            <para>By default, tooltips are invisible to the mouse and therefore cannot be clicked. 
            You must set the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.HitTestVisible"/> property is to true in order to make the
            tooltip visible to the mouse (and clickable).</para>
            <para>Hyperlinks are created using "A" tags in the HTML source text. When hyperlinks are clicked,
            the <b>LinkClicked</b> event fires and provides information about the link. The event handler
            can then take appropriate action.</para>
            </remarks>
            <example>
            The example below creates some hyperlinks using "A" tags. When the user clicks the link, the
            event handler shows a message box.
            <code>
            // configure c1superTooltip
            c1superTooltip.HitTestVisible = true;
            var tipText =
                "click &lt;a href='about'&gt;&lt;b&gt;HERE&lt;/b&gt;&lt;/a&gt; to see an about box.&lt;br&gt;" +
                "or click &lt;a href='time'&gt;&lt;b&gt;HERE&lt;/b&gt;&lt;/a&gt; to see the current time.";
            c1superTooltip.SetToolTip(someControl, tipText);
            
            // attach event handler
            c1superTooltip.LinkClicked += c1superTooltip_LinkClicked;
            // ...
            
            void c1superTooltip_LinkClicked(object sender, C1SuperLabelLinkClickedEventArgs e)
            {
              if (e.HRef == "about")
              {
                MessageBox.Show("About C1SuperLabel!");
              }
              else if (e.HRef == "time")
              {
                MessageBox.Show("The time is " + DateTime.Now.ToShortTimeString());
              }
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.OnLinkClicked(C1.Win.SuperTooltip.C1SuperLabelLinkClickedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.SuperTooltip.C1SuperTooltipBase.LinkClicked"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.SuperTooltip.C1SuperLabelLinkClickedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.Control,System.Drawing.Point,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, at the specified position, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="pt"><see cref="T:System.Drawing.Point"/> in client coordinates where the tooltip is to be displayed.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.Control,System.Int32,System.Int32,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, at the specified position, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="x">X client coordinate where the tooltip is to be displayed.</param>
            <param name="y">Y client coordinate where the tooltip is to be displayed.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.Control,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, at the specified position.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="pt"><see cref="T:System.Drawing.Point"/> in client coordinates where the tooltip is to be displayed.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified control, at the specified position.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
            <param name="x">X client coordinate where the tooltip is to be displayed.</param>
            <param name="y">Y client coordinate where the tooltip is to be displayed.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.Control)">
            <summary>
            Shows the tooltip with the specified text for the specified control.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="control"><see cref="T:System.Windows.Forms.Control"/> that the tooltip is associated with.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.Hide">
            <summary>
            Hides the <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> if it is currently visible.
            </summary>
            <remarks>
            This method does not disable or otherwise prevent the tooltip from being displayed in the future.
            To do that, set the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.Active"/> property to false instead.
            </remarks>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.Hide(System.Windows.Forms.Control)">
            <summary>
            Hides the <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> if it is currently visible.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> that the <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> is associated with.</param>
            <remarks>
            This method does not disable or otherwise prevent the tooltip from being displayed in the future.
            To do that, set the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.Active"/> property to false instead.
            </remarks>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.ToolStripItem,System.Drawing.Point,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>, at the specified position, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
            <param name="pt"><see cref="T:System.Drawing.Point"/> in client coordinates where the tooltip is to be displayed.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.ToolStripItem,System.Int32,System.Int32,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>, at the specified position, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
            <param name="x">X client coordinate where the tooltip is to be displayed.</param>
            <param name="y">Y client coordinate where the tooltip is to be displayed.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.ToolStripItem,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>, for a specified amount of time.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
            <param name="duration">Duration of the tooltip, in milliseconds.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.ToolStripItem,System.Drawing.Point)">
            <summary>
            Shows the tooltip with the specified text, for the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>, at the specified position.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
            <param name="pt"><see cref="T:System.Drawing.Point"/> in client coordinates where the tooltip is to be displayed.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.ToolStripItem,System.Int32,System.Int32)">
            <summary>
            Shows the tooltip with the specified text, for the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>, at the specified position.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
            <param name="x">X client coordinate where the tooltip is to be displayed.</param>
            <param name="y">Y client coordinate where the tooltip is to be displayed.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.Show(System.String,System.Windows.Forms.ToolStripItem)">
            <summary>
            Shows the tooltip with the specified text for the specified <see cref="T:System.Windows.Forms.ToolStripItem"/>.
            </summary>
            <param name="text">Text to be displayed in the tooltip.</param>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.Hide(System.Windows.Forms.ToolStripItem)">
            <summary>
            Hides the <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> if it is currently visible.
            </summary>
            <param name="item"><see cref="T:System.Windows.Forms.ToolStripItem"/> that the tooltip is associated with.</param>
            <remarks>
            This method does not disable or otherwise prevent the tooltip from being displayed in the future.
            To do that, set the <see cref="P:C1.Win.SuperTooltip.C1SuperTooltipBase.Active"/> property to false instead.
            </remarks>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.GetOrCreateStyle">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.ApplyStyle(C1.Framework.Style)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.GetGradientImage(C1.Win.SuperTooltip.BackgroundGradient)">
            <summary>
            This method is intended for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.IsTooltipWindow(System.Windows.Forms.Control)">
            <summary>
            This method is intended for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.GetMSListViewItemTip(System.Windows.Forms.ListView)">
            <summary>
            Gets ToolTipText for MS ListViewItem placed under the mouse cursor if specified.
            </summary>
            <param name="lv">MS ListView control.</param>
            <returns>MS ListViewItem ToolTipText if not empty, or CurrentText.</returns>
        </member>
        <member name="M:C1.Win.SuperTooltip.C1SuperTooltipBase.GetMSDataGridViewCellTip(System.Windows.Forms.DataGridView)">
            <summary>
            Gets ToolTipText for MS DataGridView placed under the mouse cursor if specified.
            </summary>
            <param name="dgv">MS DataGridView control.</param>
            <returns>MS DataGridView Cell ToolTipText if not empty, or CurrentText.</returns>
            <remarks>
            <para>If Cell ToolTipText is empty then column ToolTipText will be assumed as Cell ToolTipText.</para>
            <para>TopLeftHeaderCell, row HeaderCell or column HeaderCell ToolTipText also can be obtained.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.SuperTooltip.C1SuperTooltipBase.TrackingMode">
            <summary>
            Returns <see cref="T:System.Boolean"/> value specifying that there is currently opened hit testable tooltip window and Ctrl key is pressed.
            </summary>
            <remarks>If this property returns true, tooltip should not be closed on mouse movements.</remarks>
        </member>
        <member name="T:C1.Win.SuperTooltip.C1SuperTooltipBase.ToolStripItemControl">
            <summary>
            Proxy control to allow adding tooltips to ToolStripItems.
            </summary>
        </member>
        <member name="T:C1.Win.SuperTooltip.PopupEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:C1.Win.SuperTooltip.C1SuperTooltipBase.Popup"/> event.
            </summary>
            <param name="sender"><see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> object that fired the event.</param>
            <param name="e"><see cref="T:C1.Win.SuperTooltip.PopupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:C1.Win.SuperTooltip.PopupEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.SuperTooltip.C1SuperTooltipBase.Popup"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.PopupEventArgs.#ctor(System.Windows.Forms.Form,System.Windows.Forms.Control,System.Drawing.Point,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.SuperTooltip.PopupEventArgs"/> object.
            </summary>
            <param name="form"><see cref="P:C1.Win.SuperTooltip.PopupEventArgs.Form"/> that contains the tooltip.</param>
            <param name="control"><see cref="P:C1.Win.SuperTooltip.PopupEventArgs.Control"/> that contains the tooltip text.</param>
            <param name="location"><see cref="T:System.Drawing.Point"/> that specifies the top left corner of the tooltip.</param>
            <param name="text">String that will be displayed in the tooltip.</param>
        </member>
        <member name="P:C1.Win.SuperTooltip.PopupEventArgs.Form">
            <summary>
            Gets a reference to the <see cref="P:C1.Win.SuperTooltip.PopupEventArgs.Form"/> that contains the tooltip.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.PopupEventArgs.Control">
            <summary>
            Gets a reference to the <see cref="P:C1.Win.SuperTooltip.PopupEventArgs.Control"/> that provides the tooltip text and location.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.PopupEventArgs.ToolStripItem">
            <summary>
            Gets a reference to the <see cref="P:C1.Win.SuperTooltip.PopupEventArgs.ToolStripItem"/> that provides the tooltip text.
            </summary>
            <remarks>
            The <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> can be used to display information about controls
            or ToolStrip items. If the tooltip is displaying information about a control, then this property 
            returns null. If it is displaying information about a <see cref="P:C1.Win.SuperTooltip.PopupEventArgs.ToolStripItem"/>, then 
            this property returns a reference to that item.
            </remarks>
        </member>
        <member name="P:C1.Win.SuperTooltip.PopupEventArgs.Location">
            <summary>
            Gets or sets the location where the tooltip will be displayed.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.PopupEventArgs.Text">
            <summary>
            Gets or sets the text that will be displayed in the tooltip.
            </summary>
        </member>
        <member name="T:C1.Win.SuperTooltip.ToolTipWindow">
            <summary>
            Popup control that shows the tooltip content
            </summary>
        </member>
        <member name="T:C1.Win.SuperTooltip.ImageCollection">
            <summary>
            Collection of images to be displayed in <see cref="T:C1.Win.SuperTooltip.C1SuperLabelBase"/> or 
            <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> components.
            </summary>
        </member>
        <member name="F:C1.Win.SuperTooltip.ImageCollection.IMAGE_FILTER">
            <summary>
            String containing all common image extensions, used as a filter for an open file dialog.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.ImageCollection.#ctor(System.ComponentModel.Component)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.SuperTooltip.ImageCollection"/>.
            </summary>
            <param name="owner">Component that owns the collection.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.ImageCollection.Add(System.String,System.Drawing.Image)">
            <summary>
            Adds an <see cref="T:System.Drawing.Image"/> to the collection.
            </summary>
            <param name="key">String used to retrieve the image from the collection.</param>
            <param name="image"><see cref="T:System.Drawing.Image"/> to add to the collection.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.ImageCollection.Add(System.Windows.Forms.ImageList)">
            <summary>
            Adds all images in an <see cref="T:System.Windows.Forms.ImageList"/> component to the collection.
            </summary>
            <param name="list"><see cref="T:System.Windows.Forms.ImageList"/> component that contains the images to add to the collection.</param>
        </member>
        <member name="P:C1.Win.SuperTooltip.ImageCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:C1.Win.SuperTooltip.ImageEntry"/> with the specified key <see cref="T:C1.Win.SuperTooltip.ImageCollection"/>.
            </summary>
            <param name="key">String that identifies the <see cref="T:C1.Win.SuperTooltip.ImageEntry"/>.</param>
            <returns>The <see cref="T:C1.Win.SuperTooltip.ImageEntry"/> with the specified key.</returns>
            <remarks>The <paramref name="key"/> parameter is not case-sensitive.</remarks>
        </member>
        <member name="M:C1.Win.SuperTooltip.ImageCollection.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:C1.Win.SuperTooltip.ImageCollection"/> contains a given key.
            </summary>
            <param name="key">String that identifies the <see cref="T:C1.Win.SuperTooltip.ImageEntry"/>.</param>
            <returns>True if the collection contains an <see cref="T:C1.Win.SuperTooltip.ImageEntry"/> associated with the given key, false otherwise.</returns>
            <remarks>The <paramref name="key"/> parameter is not case-sensitive.</remarks>
        </member>
        <member name="M:C1.Win.SuperTooltip.ImageCollection.IndexOf(System.String)">
            <summary>
            Gets the index of the <see cref="T:C1.Win.SuperTooltip.ImageEntry"/> with a given key.
            </summary>
            <param name="key">String that identifies the <see cref="T:C1.Win.SuperTooltip.ImageEntry"/>.</param>
            <returns>The index of the <see cref="T:C1.Win.SuperTooltip.ImageEntry"/> in the collection, or -1 if the 
            collection does not contain the key.</returns>
            <remarks>The <paramref name="key"/> parameter is not case-sensitive.</remarks>
        </member>
        <member name="T:C1.Win.SuperTooltip.ImageEntry">
            <summary>
            Entry in a <see cref="T:C1.Win.SuperTooltip.ImageCollection"/>.
            </summary>
            <remarks>
            <para>Each entry contains an <see cref="P:C1.Win.SuperTooltip.ImageEntry.Image"/> and its associated <see cref="P:C1.Win.SuperTooltip.ImageEntry.Key"/>.</para>
            <para>Entries may be retrieved from the collection by index or by key.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.SuperTooltip.ImageEntry.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.SuperTooltip.ImageEntry"/>.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
            <param name="image">Image associated with the key.</param>
        </member>
        <member name="M:C1.Win.SuperTooltip.ImageEntry.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.SuperTooltip.ImageEntry"/>.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.ImageEntry.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.SuperTooltip.ImageEntry"/>.
            </summary>
        </member>
        <member name="P:C1.Win.SuperTooltip.ImageEntry.Key">
            <summary>
            Gets or sets the key used to retrieve the image from the <see cref="T:C1.Win.SuperTooltip.ImageCollection"/>.
            </summary>
            <remarks>The key value is not case-sensitive.</remarks>
        </member>
        <member name="P:C1.Win.SuperTooltip.ImageEntry.Image">
            <summary>
            <see cref="P:C1.Win.SuperTooltip.ImageEntry.Image"/> in the <see cref="T:C1.Win.SuperTooltip.ImageCollection"/>.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.ImageEntry.NewEntries(System.Boolean)">
            <summary>
            This method is intended for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.ImageEntry.NewEntry">
            <summary>
            This method is intended for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.SuperTooltip.ImageEntryTypeConverter">
            <summary>
            <see cref="T:System.ComponentModel.TypeConverter"/> used to persist <see cref="T:C1.Win.SuperTooltip.ImageEntry"/> objects.
            </summary>
            <remarks>
            <para>This converter causes Visual Studio to persist the type in code-behind, which is version-neutral.</para>
            <para>Without this, the <see cref="T:C1.Win.SuperTooltip.ImageEntry"/> objects would be persisted as binary resources,
            along with their specific version, so upgrading the component version would break projects 
            created with previous versions.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.SuperTooltip.ImageEntryTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a value that indicates whether the object can be converted to a specified data type.
            </summary>
            <param name="context">The context.</param>
            <param name="destType">The data type.</param>
            <returns>True if the conversion is supported, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.SuperTooltip.ImageEntryTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object into the specified data type.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The object to convert.</param>
            <param name="destType">The type to convert to.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="T:C1.Win.SuperTooltip.ISuperErrorProvider">
            <summary>
            Defines the interface for properties and methods to C1SuperErrorProvider component.
            </summary>
        </member>
        <member name="M:C1.Win.SuperTooltip.ISuperErrorProvider.SetError(System.Windows.Forms.Control,System.String)">
            <summary>
            Sets the error description text for the specified control.
            </summary>
            <param name="control">The control to set the error description text for.</param>
            <param name="value">The error description text.</param>
        </member>
        <member name="P:C1.Win.SuperTooltip.ISuperErrorProvider.ContainerControl">
            <summary>
            Gets or sets a value indicating the parent control for this <see cref="T:C1.Win.SuperTooltip.ISuperErrorProvider"/>.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute">
            <summary>
            Allows to redefine default end user localize options for property, field or class.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.EndUserLocalizeOptionsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.EndUserLocalizeOptionsAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute"/> attribute.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:C1.Win.Localization.EndUserLocalizeOptionsAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute"/> attribute.
            </summary>
            <param name="exclude"></param>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Properties">
            <summary>
            Defines the list of properties that should be localized.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.ExcludedMembers">
            <summary>
            Defines a list of members of control that should be excluded from localization.
            Currently used only AddControlToResources application for automatically generating
            control resources.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Exclude">
            <summary>
            If true then class, property or field will be not displayed for 
            enduser localization.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description">
            <summary>
            Gets the description of string that will be displayed in the
            end user localizer in design-time.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.StringsType">
            <summary>
            Gets or sets type providing string used to localize <see cref="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Key">
            <summary>
            Gets or sets resource key containing localized string for <see cref="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description"/>.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the StringsManager and Strings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.C1DescriptionAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.C1DescriptionAttribute"/> attribute.
            </summary>
            <param name="stringsType">The <see cref="T:System.Type"/> defining string properties.</param>
            <param name="key">The key value used to keep specific string description.</param>
            <param name="description">Default non-localized description text.</param>
        </member>
        <member name="M:C1.Win.Localization.C1DescriptionAttribute.#ctor(System.Type,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.C1DescriptionAttribute"/> attribute.
            </summary>
            <param name="stringsType">The <see cref="T:System.Type"/> defining string properties.</param>
            <param name="key">The key value used to keep specific string description.</param>
            <param name="formatDescription">Default non-localized description text.</param>
            <param name="ag0">Argument for formatDescription parameter.</param>
        </member>
        <member name="P:C1.Win.Localization.C1DescriptionAttribute.Description">
            <summary>
            Returns localized description text if it is available or default value 
            </summary>
        </member>
        <member name="T:C1.Win.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the StringsManager and Strings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.C1CategoryAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.C1CategoryAttribute"/> attribute.
            </summary>
            <param name="stringsType">The <see cref="T:System.Type"/> defining string properties.</param>
            <param name="categoryName">Default non-localized category name.</param>
        </member>
        <member name="M:C1.Win.Localization.C1CategoryAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.C1CategoryAttribute"/> attribute.
            </summary>
            <param name="stringsType">The <see cref="T:System.Type"/> defining string properties.</param>
            <param name="key">The key value used to keep specific category.</param>
            <param name="categoryName">Default non-localized category name.</param>
        </member>
        <member name="M:C1.Win.Localization.C1CategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            Looks up the localized name of the specified category.
            </summary>
            <param name="value">The identifer for the category to look up.</param>
            <returns>The localized name of the category, or null if a localized name does not exist.</returns>
        </member>
        <member name="T:C1.Win.Localization.StringsManager">
            <summary>
            The utility class which handles localization tasks.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetC1BuiltinResourceStream(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            Returns ResourceStream for "official" resources
            that provided only by C1, typicallly those resources contains
            design-time strings.
            Those resources can be only in main control assembly like C1.C1Preview.2.dll 
            and name of resource should have following format:
            CulturePrefix.StringsTypeName
            for example:
            ja.C1.C1Preview.Design.DesignStrings.resx
            </summary>
            <param name="resourceName"></param>
            <param name="assembly"></param>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetResourceStream(System.String,System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>
            Searches for standard resources which looks like BlaBla.Strings.CultureName.resx,
            like C1.Win.C1Preview.Strings.zh.resx or C1.Win.C1Preview.Strings.resx etc.
            Ensures that resource is not *C1* built-in resource, i.e. its name DOES NOT HAVE format
            like
            CultureName.BlaBla.Strings.resx, otherwise bug can occur if entry assembly 
            have C1 builtin resources as in case of C1 executables like C1ThemeDesigner or C1FlexReportDesigner.
            For example C1ThemeDesigner have ja.C1ThemeDesigner.Strings.resx resource
            and this resource *SHOULD BE IGNORED* if  resouceName is "C1ThemeDesigner.Strings.resx" and
            cultureName is "" (invariant).
            </summary>
            <param name="resourceName"></param>
            <param name="assembly"></param>
            <param name="cultureName"></param>
            <param name="searchInSatelliteOnly"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetParentCulture(System.String)">
            <summary>
            Returns the parent of the CultureInfo passed in. Differs from ci.Parent
            in that while ci can be equal to ci.Parent, this method it never returns
            the passed ci itself, rather it would return null.
            Also this function has special handling for chinese culture.
            Under NET2 it returns "zh" culture name for
            neutral "zh-Hans" and "zh-Hant" chinese cultures, under
            NET2 "zh" is not exists.
            </summary>
            <param name="cultureName">The culture name to get parent for.</param>
            <returns>The parent of the culture info, or null.</returns>
        </member>
        <member name="T:C1.Win.Localization.Design.DesignLocalizationStrings">
            <summary>
            Contains localizable design-time strings.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Warning">
            <summary>
            Gets the "Warning" string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Question">
            <summary>
            Gets the "Question" string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.None">
            <summary>
            Gets the "None" string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Error">
            <summary>
            Gets the "Error" string.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.DesignLocalizationStrings.RootResourceGroup">
            <summary>
            Contains localizable design-time strings for the root group.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.RootResourceGroup.ReadOnlyFile">
            <summary>
            Gets the "overwrite a readonly file?" format string.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.DesignLocalizationStrings.RootResourceGroup.Errors">
            <summary>
            Contains error strings.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.RootResourceGroup.Errors.SaveToFile">
            <summary>
            Gets the "errors while saving resources" format string.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.DesignLocalizationStrings.StringsDesigner">
            <summary>
            Contains strings designer strings.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.StringsDesigner.AllStringsCaption">
            <summary>
            Gets the "All" string.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.DesignLocalizationStrings.StringsDesigner.Errors">
            <summary>
            Contains error strings.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.StringsDesigner.Errors.CantInitializeDte">
            <summary>
            Gets the "Localizer can be used under MS Visual Studio only." string.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer">
            <summary>
            Contains localizer strings.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.DesignActionCaption">
            <summary>
            Gets the "Localize..." string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.CultureAlreadyExists">
            <summary>
            Gets the "Culture [{0}] already added to the current translation." format string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.LoadResXStringsException">
            <summary>
            Gets the "Exception occurs during loading strings from resource file:\r{0}\rException message:\r{1}" format string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.SaveQuestion">
            <summary>
            Gets the "The translation has been changed, save?" string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.NewTranslation">
            <summary>
            Gets the "Select product to translate" string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.SaveAsDialogCaption">
            <summary>
            Gets the "Select project to store translation" string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.ImageResourceNotFound">
            <summary>
            Gets the "Resource image with name [{0}] is not found." format string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.InvariantCultureDescription">
            <summary>
            Gets the "Invariant culture" string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.DeleteCultureWarning">
            <summary>
            Gets the "You have selected {0} culture to delete, there are {1} strings of this culture. Are you sure?" format string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.DeleteCulturesWarning">
            <summary>
            Gets the "You have selected {0} cultures to delete, there are {1} strings of these cultures. Are you sure?" format string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.CantCreateLocalizedFolder">
            <summary>
            Gets the "Can't create the [{0}] folder in the project.\rError message:\r{1}" format string.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.OpenTranslationDialog">
            <summary>
            Contains the open translation dialog strings.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.OpenTranslationDialog.SolutionMask">
            <summary>
            Gets the "Solution '{0}'" format string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.OpenTranslationDialog.NoCultures">
            <summary>
            Gets the "Can't build list of cultures" string.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.LocalizeActionList">
            <summary>
            Represents a localization <see cref="T:System.ComponentModel.Design.DesignerActionList"/>.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.Design.LocalizeActionList.#ctor(System.ComponentModel.IComponent,System.ComponentModel.Design.ComponentDesigner)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.Design.LocalizeActionList"/> class.
            </summary>
            <param name="component">The designed component.</param>
            <param name="designer">The component designer.</param>
        </member>
        <member name="M:C1.Win.Localization.Design.LocalizeActionList.GetSortedActionItems">
            <summary>
            Returns the list of associated action items.
            </summary>
            <returns>The list containing the "Localize" item.</returns>
        </member>
        <member name="M:C1.Win.Localization.Design.LocalizeActionList.Localize">
            <summary>
            Performs localizaion.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.Design.LocalizeActionList.Localize(System.ComponentModel.Design.ComponentDesigner)">
            <summary>
            Performs localizaion.
            </summary>
            <param name="designer">The designer to localize.</param>
        </member>
        <member name="T:C1.Win.Themes.Shared.Dock_SizeMode">
            <summary>
            Used in:
            C1DockingTab\Style
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Dock_SizeMode.Normal">
            <summary>
            Borders are shown only for headers of columns.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Dock_SizeMode.Fit">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Dock_SizeMode.FillToEnd">
            <summary>
            Only left and right borders of columns are shown.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.TabShape">
            <summary>
            Used in:
            C1DockingTab\Style
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TabShape.Rectangle">
            <summary>
            Rectangular tab shape.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TabShape.Rounded">
            <summary>
            Tabs are rounded.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TabShape.Sloping">
            <summary>
            Tabs are sloped on one side.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TabShape.Office365">
            <summary>
            Office365 tab shape.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.TabStyle">
            <summary>
            Used in:
            C1DockingTab\Style
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TabStyle.Classic">
            <summary>
            Classic look.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TabStyle.Sloping">
            <summary>
            Tabs are sloped on one side.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TabStyle.Rounded">
            <summary>
            Tabs are rounded.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TabStyle.Rectangle">
            <summary>
            Rectangular tabs.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TabStyle.Office2007">
            <summary>
            Tabs are drawn using the Office 2007 style.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TabStyle.Office2010">
            <summary>
            Tabs are drawn using the Office 2010 style.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TabStyle.Office365">
            <summary>
            Tabs are drawn using the Office 365 style.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.TreeViewBorderStyleEnum">
            <summary>
            Used in:
            C1TreeView\Style
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TreeViewBorderStyleEnum.ColumnsHeaderOnly">
            <summary>
            Borders are shown only for headers of columns.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TreeViewBorderStyleEnum.None">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TreeViewBorderStyleEnum.ColumnsLineOnly">
            <summary>
            Only left and right borders of columns are shown.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TreeViewBorderStyleEnum.Full">
            <summary>
            Borders are shown for all cells.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.CheckBoxStyleEnum">
            <summary>
            Used in:
            C1TreeView\Style
            C1MultiSelect\C1CheckList\Style
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.CheckBoxStyleEnum.System">
            <summary>
            Standard system view.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.CheckBoxStyleEnum.Office2007Black">
            <summary>
            Like a MS Office 2007 Black.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.CheckBoxStyleEnum.Office2007Blue">
            <summary>
            Like a MS Office 2007 Blue.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.CheckBoxStyleEnum.Office2007Silver">
            <summary>
            Like a MS Office 2007 Silver.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.CheckBoxStyleEnum.Office2010Black">
            <summary>
            Like a MS Office 2010 Black.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.CheckBoxStyleEnum.Office2010Blue">
            <summary>
            Like a MS Office 2010 Blue.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.CheckBoxStyleEnum.Office2010Silver">
            <summary>
            Like a MS Office 2010 Silver.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.CheckBoxStyleEnum.Office2013">
            <summary>
            Like a MS Office 2013.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.CheckBoxStyleEnum.Windows10">
            <summary>
            Like a Windows 10.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.CheckBoxStyleEnum.Office365White">
            <summary>
            Like a MS Office 365 White.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.CheckBoxStyleEnum.Office365Black">
            <summary>
            Like a MS Office 365 Black.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.TreeViewExpandButtonStyle">
            <summary>
            Used in:
            C1TreeView\Style
            C1MultiSelect\C1CheckList\Style
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TreeViewExpandButtonStyle.System">
            <summary>
            Standard system view.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TreeViewExpandButtonStyle.VS2015">
            <summary>
            Like a Visual Studio 2015.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TreeViewExpandButtonStyle.Windows10">
            <summary>
            Like a Windows 10.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TreeViewExpandButtonStyle.Windows11White">
            <summary>
            Like a Windows 11 White.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TreeViewExpandButtonStyle.Windows11Black">
            <summary>
            Like a Windows 11 Black.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TreeViewExpandButtonStyle.Office365White">
            <summary>
            Like a MS Office 365 White.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TreeViewExpandButtonStyle.Office365Black">
            <summary>
            Like a MS Office 365 Black.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.BackgroundPictureDrawModeEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.BackgroundPictureDrawModeEnum.Center">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.BackgroundPictureDrawModeEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.BackgroundPictureDrawModeEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.BackgroundPictureDrawModeEnum.Fill">
            <summary>
            The image is stretched and aspect ratio is saved.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.BorderType">
            <summary>
            Used in:
            C1TrueDBGrid\GridBorder
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.BorderType.None">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.BorderType.Flat">
            <summary>
            Borders have a Flat appearance.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.BorderType.Raised">
            <summary>
            Borders have a 3D raised appearance.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.BorderType.Inset">
            <summary>
            Borders have a 3D inset appearance.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.BorderType.Groove">
            <summary>
            A line around the inside of the border.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.BorderType.Fillet">
            <summary>
            A fillet type border.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.BorderType.RaisedBevel">
            <summary>
            Borders have a 3D raised with a bevel.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.BorderType.InsetBevel">
            <summary>
            Borders have a 3D inset with a bevel.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.ForegroundPicturePosition">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ForegroundPicturePosition.Near">
            <summary>
            Image is rendered in the near side of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ForegroundPicturePosition.Far">
            <summary>
            Image is rendered in the far side of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ForegroundPicturePosition.LeftOfText">
            <summary>
            Image is rendered to the left of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ForegroundPicturePosition.RightOfText">
            <summary>
            Image is rendered to the right of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ForegroundPicturePosition.TopOfText">
            <summary>
            Image is rendered on top of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ForegroundPicturePosition.BottomOfText">
            <summary>
            Image is rendered below any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ForegroundPicturePosition.PictureOnly">
            <summary>
            Text is not displayed.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ForegroundPicturePosition.TextOnly">
            <summary>
            Image is not displayed.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.AlignHorzEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.AlignHorzEnum.General">
            <summary>
            Text is aligned Near and numeric values Far
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.AlignHorzEnum.Near">
            <summary>
            Text is aligned to the left.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.AlignHorzEnum.Center">
            <summary>
            Text is aligned centered.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.AlignHorzEnum.Far">
            <summary>
            Text is aligned to the right.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.AlignHorzEnum.Justify">
            <summary>
            Text is aligned with respect to the cells boundries.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.AlignVertEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.AlignVertEnum.Top">
            <summary>
            Text is rendered at the top of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.AlignVertEnum.Center">
            <summary>
            Text is rendered at the center of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.AlignVertEnum.Bottom">
            <summary>
            Text is rendered at the bottom of the cell.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.LineStyle">
            <summary>
            Used in:
            C1TrueDBGrid\GridLines
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.LineStyle.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.LineStyle.Single">
            <summary>
            Single line.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.LineStyle.Double">
            <summary>
            Double line.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.LineStyle.Raised">
            <summary>
            Line with 3D raised appearance.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.LineStyle.Inset">
            <summary>
            Line with 3D inset appearance.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.PaletteType">
            <summary>
            Used in:
            C1Schedule\PaletteType
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.PaletteType.Office2007">
            <summary>
            Office 2007 palette includes back and border colors 
            of free and working hours and days, day headers, grid borders 
            and calendar tabs. 
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.PaletteType.Office2010">
            <summary>
            Office 2010 palette includes back and border colors 
            of free and working hours and days, day headers, grid borders 
            and calendar tabs. 
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.PaletteType.Office2016">
            <summary>
            Office 2016 palette includes accent color to use in calendar headers and additional darker color for current day.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.PaletteType.Office2016Dark">
            <summary>
            Office 2016 dark palette includes accent color to use in calendar headers and additional darker color for current day.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.FlexChartPalette">
            <summary>
            Used in:
            C1Chart\Palette
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.FlexChartPalette.Standard">
            <summary>
            Standard.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.FlexChartPalette.Cocoa">
            <summary>
            Cocoa
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.FlexChartPalette.Coral">
            <summary>
            Coral
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.FlexChartPalette.Dark">
            <summary>
            Dark
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.FlexChartPalette.Highcontrast">
            <summary>
            Highcontrast
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.FlexChartPalette.Light">
            <summary>
            Light
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.FlexChartPalette.Midnight">
            <summary>
            Midnight
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.FlexChartPalette.Modern">
            <summary>
            Modern
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.FlexChartPalette.Organic">
            <summary>
            Organic
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.FlexChartPalette.Slate">
            <summary>
            Slate
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.FlexChartPalette.Zen">
            <summary>
            Zen
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.FlexChartPalette.Cyborg">
            <summary>
            Cyborg
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.FlexChartPalette.Superhero">
            <summary>
            Superhero
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.FlexChartPalette.Flatly">
            <summary>
            Flatly
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.FlexChartPalette.Darkly">
            <summary>
            Darkly
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.FlexChartPalette.Cerulean">
            <summary>
            Cerulean
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.FlexChartPalette.Custom">
            <summary>
            Custom palette.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.GroupTabStyle">
            <summary>
            Used in:
            C1Schedule\GroupTabStyle
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.GroupTabStyle.FullWidth">
            <summary>
            Group headers of rectangular shape take the full width of the corresponding group.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.GroupTabStyle.Office2007">
            <summary>
            Group headers of Office2007 appearance.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.GroupTabStyle.Office2016">
            <summary>
            Group headers of Office2016 appearance.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.WeekTabStyle">
            <summary>
            Used in:
            C1Schedule\WeekTabStyle
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.WeekTabStyle.Office2007">
            <summary>
            Week tabs of Office2007 appearance.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.WeekTabStyle.Office2016">
            <summary>
            Week tabs of Office2016 appearance.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.BackgroundGradient.None">
            <summary>
            Use no background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.BackgroundGradient.Automatic">
            <summary>
            Use a gradient that matches the current system Visual Style.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.BackgroundGradient.Silver">
            <summary>
            Use a silver background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.BackgroundGradient.Blue">
            <summary>
            Use a blue background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.BackgroundGradient.Gold">
            <summary>
            Use a gold background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.BackgroundGradient.Olive">
            <summary>
            Use an olive background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.BackgroundGradient.Vista">
            <summary>
            Use the Vista-style background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.GradientMode.None">
            <summary>
            No gradient.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.GradientMode.Horizontal">
            <summary>
            Horizontal gradient (left to right).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.GradientMode.Vertical">
            <summary>
            Vertical gradient (top to bottom).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.GradientMode.DiagonalDown">
            <summary>
            Diagonal gradient (left-top to right-bottom).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.GradientMode.DiagonalUp">
            <summary>
            Diagonal gradient (left-bottom to right-top).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.GradientMode.Radial">
            <summary>
            Radial gradient.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageAlignment.LeftTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageAlignment.CenterTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageAlignment.RightTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageAlignment.LeftCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageAlignment.CenterCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned at the center. 
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageAlignment.RightCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageAlignment.LeftBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the left. 		
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageAlignment.CenterBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageAlignment.RightBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageScaling.Clip">
            <summary>
            Use the image's original size, clipping it to the display area if necessary.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageScaling.Stretch">
            <summary>
            Stretch the image to fill the display area. 
            This mode will usually change the image's aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageScaling.Scale">
            <summary>
            Scale the image to fit the display area. 
            This mode may increase or reduce the size of the image 
            while maintaining its aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageScaling.Tile">
            <summary>
            Tile the image to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageScaling.TileStretch">
            <summary>
            Tile the image into the 3x3 matrix and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageScaling.TileStretchHorizontal">
            <summary>
            Tile the image into the row of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageScaling.TileStretchVertical">
            <summary>
            Tile the image into the column of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageScaling.Hide">
            <summary>
            Hide the image.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Alignment.NotSet">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Alignment.Near">
            <summary>
            Near.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Alignment.Far">
            <summary>
            Far.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Alignment.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Alignment.Spread">
            <summary>
            Spread.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TextDirection.Normal">
            <summary>
            Text is drawn in the horizontal direction, left to right.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TextDirection.Up">
            <summary>
            Text is draw vertically, from the bottom up.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.TextDirection.Down">
            <summary>
            Text is draw vertically, from the top down.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.RadialMenuTooltipPosition.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.RadialMenuTooltipPosition.Left">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.RadialMenuTooltipPosition.Top">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.RadialMenuTooltipPosition.Right">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.RadialMenuTooltipPosition.Bottom">
            <summary>For internal use.</summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.ImageSetEnum">
            <summary>
            Describes the image set used for toolbar images of the
            preview actions.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageSetEnum.Classic">
            <summary>
            Classic image set.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageSetEnum.Flat">
            <summary>
            Flat image set.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageSetEnum.XP">
            <summary>
            XP image set.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageSetEnum.XP2">
            <summary>
            XP alternative image set.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageSetEnum.XP3">
            <summary>
            XP second alternative image set.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageSetEnum.Adobe">
            <summary>
            Adobe image set.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageSetEnum.OsX">
            <summary>
            Os X image set.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ImageSetEnum.Original">
            <summary>
            Original (C1Preview "classic") image set.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_BorderDirEnum.Both">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_BorderDirEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_BorderDirEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_BorderDirEnum.BothDifferent">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_BorderStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_BorderStyleEnum.Flat">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_BorderStyleEnum.Double">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_BorderStyleEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_BorderStyleEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_BorderStyleEnum.Groove">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_BorderStyleEnum.Fillet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_BorderStyleEnum.Dotted">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_DisplayEnum.TextOnly">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_DisplayEnum.ImageOnly">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_DisplayEnum.Overlay">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_DisplayEnum.Stack">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_DisplayEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_IconsStyle.Default">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_IconsStyle.Office365">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_ImageAlignEnum.LeftTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_ImageAlignEnum.LeftCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_ImageAlignEnum.LeftBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_ImageAlignEnum.CenterTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_ImageAlignEnum.CenterCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_ImageAlignEnum.CenterBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_ImageAlignEnum.RightTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_ImageAlignEnum.RightCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_ImageAlignEnum.RightBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_ImageAlignEnum.Scale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_ImageAlignEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_ImageAlignEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_ImageAlignEnum.Hide">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_ImageAlignEnum.TileStretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TextAlignEnum.LeftTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TextAlignEnum.LeftCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TextAlignEnum.LeftBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TextAlignEnum.CenterTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TextAlignEnum.CenterCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TextAlignEnum.CenterBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TextAlignEnum.RightTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TextAlignEnum.RightCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TextAlignEnum.RightBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TextAlignEnum.GeneralTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TextAlignEnum.GeneralCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TextAlignEnum.GeneralBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TextDirectionEnum.Normal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TextDirectionEnum.Up">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TextDirectionEnum.Down">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TextEffectEnum.Flat">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TextEffectEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TextEffectEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TreeStyleFlags.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TreeStyleFlags.Lines">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TreeStyleFlags.Symbols">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TreeStyleFlags.ButtonBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TreeStyleFlags.Leaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TreeStyleFlags.Columns">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TreeStyleFlags.Complete">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TreeStyleFlags.Simple">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TreeStyleFlags.CompleteLeaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TreeStyleFlags.SimpleLeaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TreeStyleFlags.SimpleColumns">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TreeStyleFlags.SimpleLeafColumns">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TreeStyleFlags.SymbolsAndColumns">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_TreeStyleFlags.SymbolsAndBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_FocusRectEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_FocusRectEnum.Light">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_FocusRectEnum.Heavy">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_FocusRectEnum.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_FocusRectEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_FocusRectEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_FocusRectEnum.Background">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_BorderAlign.Inside">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_BorderAlign.Center">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_BorderAlign.Outside">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_MarqueeBorderMode.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Flex_MarqueeBorderMode.CellRange">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_BarShape.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_BarShape.ThickBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_BarShape.TopBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_BarShape.MiddleBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_BarShape.BottomBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_BarShape.TopLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_BarShape.MiddleLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_BarShape.BottomLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_BarShape.Frame">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_BarShape.HalfFrame">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_HatchPattern.Empty">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_HatchPattern.SolidBrush">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_HatchPattern.Gradient">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_HatchPattern.Percent25">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_HatchPattern.Percent50">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_HatchPattern.Percent70">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_HatchPattern.ForwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_HatchPattern.BackwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_HatchPattern.DiagonalCross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_HatchPattern.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_HatchPattern.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_HatchPattern.NarrowVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_HatchPattern.NarrowHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_HatchPattern.Confetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_HatchPattern.ZigZag">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_TaskProperty.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_TaskProperty.Name">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_TaskProperty.Mode">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_TaskProperty.Calendar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_TaskProperty.Duration">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_TaskProperty.DurationUnits">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_TaskProperty.Start">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_TaskProperty.Finish">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_TaskProperty.PercentComplete">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_TaskProperty.Deadline">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_TaskProperty.ConstraintType">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_TaskProperty.ConstraintDate">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_TaskProperty.Predecessors">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_TaskProperty.ResourceNames">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_TaskProperty.Notes">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_ProgressLineStyle.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_ProgressLineStyle.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_ProgressLineStyle.Dash">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_ProgressLineStyle.Dot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_ProgressLineStyle.DashDot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Gantt_ProgressLineStyle.DashDotDot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Ribbon_ThemeColor.Azure">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Ribbon_ThemeColor.Blue">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Ribbon_ThemeColor.Green">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Ribbon_ThemeColor.Orange">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Ribbon_ThemeColor.Orchid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Ribbon_ThemeColor.Red">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Ribbon_ThemeColor.Teal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Ribbon_ThemeColor.Violet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Ribbon_ThemeLightness.DarkGray">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Ribbon_ThemeLightness.LightGray">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Ribbon_ThemeLightness.White">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Ribbon365_ThemeLightness.Colorful">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Ribbon365_ThemeLightness.Black">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Ribbon365_ThemeLightness.DarkGray">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Ribbon365_ThemeLightness.White">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.CopyCurrentToCustom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Custom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Standard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Office">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.GrayScale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Apex">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Aspect">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Civic">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Concourse">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Equity">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Flow">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Foundry">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Median">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Metro">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Module">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Opulent">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Oriel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Origin">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Paper">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Solstice">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Technic">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Trek">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Urban">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_ColorGeneration.Verve">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_GradientStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_GradientStyleEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_GradientStyleEnum.HorizontalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_GradientStyleEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_GradientStyleEnum.VerticalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_GradientStyleEnum.Diagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_GradientStyleEnum.DiagonalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_GradientStyleEnum.DiagonalBack">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_GradientStyleEnum.DiagonalBackCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_GradientStyleEnum.Radial">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_GradientStyleEnum.FromCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.ForwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.BackwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Cross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.DiagonalCross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Percent05">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Percent10">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Percent20">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Percent25">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Percent30">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Percent40">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Percent50">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Percent60">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Percent70">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Percent75">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Percent80">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Percent90">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.LightDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.LightUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.DarkDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.DarkUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.WideDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.WideUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.LightVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.LightHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.NarrowVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.NarrowHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.DarkVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.DarkHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.DashedDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.DashedUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.DashedHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.DashedVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.SmallConfetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.LargeConfetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.ZigZag">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Wave">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.DiagonalBrick">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.HorizontalBrick">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Weave">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Plaid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Divot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.DottedGrid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.DottedDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Shingle">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Trellis">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.Sphere">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.SmallGrid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.SmallCheckerBoard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.LargeCheckerBoard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.OutlinedDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_HatchStyleEnum.SolidDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_AlignImageEnum.Hide">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_AlignImageEnum.Left">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_AlignImageEnum.Right">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_AlignImageEnum.Top">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_AlignImageEnum.Bottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_AlignImageEnum.Center">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_AlignImageEnum.Scale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_AlignImageEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_AlignImageEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_RotationEnum.Rotate0">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_RotationEnum.Rotate90">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_RotationEnum.Rotate180">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_RotationEnum.Rotate270">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_BorderStyleEnum.NotSet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_BorderStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_BorderStyleEnum.Empty">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_BorderStyleEnum.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_BorderStyleEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_BorderStyleEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_BorderStyleEnum.RaisedBevel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_BorderStyleEnum.InsetBevel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_BorderStyleEnum.Groove">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_BorderStyleEnum.Fillet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_BorderStyleEnum.Double">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_BorderStyleEnum.Dashed">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Chart_BorderStyleEnum.Opaque">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.Custom">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.System">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.Office2007Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.Office2007Black">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.Office2007Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.Office2010Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.Office2010Black">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.Office2010Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.Windows7">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.WinXPBlue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.WinXPSilver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.WinXPOlive">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.Royale">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.Yahoo">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.Aero">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.Office2003Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.Office2003Olive">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.Office2003Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.OfficeXP">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.Classic">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVisualStyle.WindowsXP">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1GaugeBorderStyle.None">
            <summary>
            Hides the border.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1GaugeBorderStyle.Solid">
            <summary>
            Specifies a solid line.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1GaugeBorderStyle.Dash">
            <summary>
            Specifies a line consisting of dashes.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1GaugeBorderStyle.Dot">
            <summary>
            Specifies a line consisting of dots.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1GaugeBorderStyle.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1GaugeBorderStyle.DashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1MapDashStyle.Solid">
            <summary>
            Specifies a solid line.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1MapDashStyle.Dash">
            <summary>
            Specifies a line consisting of dashes.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1MapDashStyle.Dot">
            <summary>
            Specifies a line consisting of dots.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1MapDashStyle.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1MapDashStyle.DashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1MapGradientStyle.None">
            <summary>
            No gradient filling.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1MapGradientStyle.Horizontal">
            <summary>
            From left (first color) to right (second color).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1MapGradientStyle.HorizontalCenter">
            <summary>
            From center (first color) to left and right (second color).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1MapGradientStyle.Vertical">
            <summary>
            From top (first color) to bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1MapGradientStyle.VerticalCenter">
            <summary>
            From center (first color) to top and bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1MapGradientStyle.Diagonal">
            <summary>
            From left-bottom (first color) to right-top (second color).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1MapGradientStyle.DiagonalCenter">
            <summary>
            From center (first color) to left-bottom and right-top (second color).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1MapGradientStyle.DiagonalBack">
            <summary>
            From left-top (first color) to right-bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1MapGradientStyle.DiagonalBackCenter">
            <summary>
            From center (first color) to left-top and right-bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1MapGradientStyle.Radial">
            <summary>
            From center (first color) to corners (second color) in radial direction.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.C1MapGradientStyle.FromCenter">
            <summary>
            From center (first color) to corners (second color).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThumbType.Rectangle">
            <summary>
            Thumb with rectangular icon.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThumbType.Rounded">
            <summary>
            Thumb with round icon.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.SelectionView.Default">
            <summary>
            Default selection view.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.SelectionView.LeftBorderLine">
            <summary>
            Selection as a bar on the item's left border.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.DataFilter_CaptionGlyphType.Default">
            <summary>
            Plus and minus glyph.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.DataFilter_CaptionGlyphType.Arrow">
            <summary>
            Up and down arrow glyph.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.DataFilter_GlyphSize.Small">
            <summary>
            Small size glyph.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.DataFilter_GlyphSize.Medium">
            <summary>
            Medium size glyph.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.DataFilter_GlyphSize.Large">
            <summary>
            Large size glyph.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Tile_ScrollBarStyle.Default">
            <summary>
            Scroll bar uses the same style as on Windows 8 start screen.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Tile_ScrollBarStyle.System">
            <summary>
            The default system scroll bar should appear.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.Tile_ScrollBarStyle.Windows11">
            <summary>
            The scroll bar has the same style as the Windows 11 scroll bars.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.Shared.IC1ThemeControl.ThemeChanged(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="theme"></param>
        </member>
        <member name="T:C1.Win.Themes.Shared.ThemeBrushBase">
            <summary>
            Abstract base class for all classes representing a brush in a theme.
            Use the <see cref="M:C1.Win.Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)"/> method to get an actual matching GDI+ brush.
            Classes derived from <see cref="T:C1.Win.Themes.Shared.ThemeBrushBase"/> override Equals() and
            GetHashCode() methods and compare objects by content rather than by references.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeBrushBase.EncodeValues(C1.Win.Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeBrushBase.DecodeValues(C1.Win.Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeBrushBase.AssignFrom(C1.Win.Themes.Shared.ThemeBrushBase)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeBrushBase.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:C1.Win.Themes.Shared.ThemeBrushBase"/>.
            </summary>
            <returns>The <see cref="T:C1.Win.Themes.Shared.ThemeBrushBase"/> this method creates.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Returns a GDI+ brush matching the theme brush.
            It is the caller's responsibility to dispose this brush when it is no longer needed.
            </summary>
            <param name="brushRect">The brush rectangle (used for gradient brushes).</param>
            <returns>The GDI+ <see cref="T:System.Drawing.Brush"/> object.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeBrushBase.DependOnRect">
            <summary>
            Returns true if a GDI+ brush created for this theme brush depends on the rectangle
            passed to the <see cref="M:C1.Win.Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)"/> method. E.g. gradient brushes return
            true in this method while solid return false.
            </summary>
            <returns>True if the GDI+ brush depends on the application area, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeBrushBase.EncodeToString">
            <summary>
            Encodes this <see cref="T:C1.Win.Themes.Shared.ThemeBrushBase"/> object to string.
            </summary>
            <returns>String represengin this <see cref="T:C1.Win.Themes.Shared.ThemeBrushBase"/> object.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeBrushBase.IsBrushesEqual(C1.Win.Themes.Shared.ThemeBrushBase,C1.Win.Themes.Shared.ThemeBrushBase)">
            <summary>
            Checks whether the two <see cref="T:C1.Win.Themes.Shared.ThemeBrushBase"/> objects are equal by value
            (i.e. represent identically described theme brushes).
            </summary>
            <param name="tb1">First <see cref="T:C1.Win.Themes.Shared.ThemeBrushBase"/> object.</param>
            <param name="tb2">Second <see cref="T:C1.Win.Themes.Shared.ThemeBrushBase"/> object.</param>
            <returns>True if the two brushes are identical, or are both null.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeBrushBase.TryDecodeFromString(System.String,C1.Win.Themes.Shared.ThemeBrushBase@)">
            <summary>
            Create <see cref="T:C1.Win.Themes.Shared.ThemeBrushBase"/> object from specified string.
            </summary>
            <param name="s">String representing <see cref="T:C1.Win.Themes.Shared.ThemeBrushBase"/> object.</param>
            <param name="value"><see cref="T:C1.Win.Themes.Shared.ThemeBrushBase"/> object created from string.</param>
            <returns>True if string was successfully parsed, false otherwise.</returns>
        </member>
        <member name="T:C1.Win.Themes.Shared.ThemeSolidBrush">
            <summary>
            Represents a solid theme brush.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeSolidBrush.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.Themes.Shared.ThemeSolidBrush"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeSolidBrush.#ctor(System.Drawing.Color)">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.Themes.Shared.ThemeSolidBrush"/> class.
            </summary>
            <param name="color">Theme solid brush color to set.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeSolidBrush.EncodeValues(C1.Win.Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeSolidBrush.DecodeValues(C1.Win.Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeSolidBrush.AssignFrom(C1.Win.Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeSolidBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a GDI+ <see cref="T:System.Drawing.SolidBrush"/> matching this <see cref="T:C1.Win.Themes.Shared.ThemeSolidBrush"/> object.
            Can return null if color is not specified or transparent.
            </summary>
            <param name="brushRect">Target application area for the brush (ignored).</param>
            <returns>A <see cref="T:System.Drawing.SolidBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeSolidBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeSolidBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeSolidBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeSolidBrush.Color">
            <summary>
            Gets or sets the color of this solid brush.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.ThemeGradientBrush">
            <summary>
            Abstract base class for gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeGradientBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.Themes.Shared.ThemeLinearBrush">
            <summary>
            Abstract base class for linear gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeLinearBrush.EncodeValues(C1.Win.Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeLinearBrush.DecodeValues(C1.Win.Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeLinearBrush.AssignFrom(C1.Win.Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeLinearBrush.GammaCorrection">
            <summary>
            Gets or sets a value indicating whether gamma correction is enabled,
            same as LinearGradientBrush.GammaCorrection.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeLinearBrush.Angle">
            <summary>
            Gets or sets the angle, measured in degrees clockwise from the x-axis,
            of the gradient's orientation line. 
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.ThemeTwoColorLinearBrush">
            <summary>
            Represents a linear gradient brush based on the starting and ending colors,
            and a <see cref="P:C1.Win.Themes.Shared.ThemeTwoColorLinearBrush.Blend"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeTwoColorLinearBrush.EncodeValues(C1.Win.Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeTwoColorLinearBrush.DecodeValues(C1.Win.Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeTwoColorLinearBrush.AssignFrom(C1.Win.Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeTwoColorLinearBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> matching this <see cref="T:C1.Win.Themes.Shared.ThemeTwoColorLinearBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeTwoColorLinearBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeTwoColorLinearBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeTwoColorLinearBrush.StartColor">
            <summary>
            Gets or sets the starting gradient color.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeTwoColorLinearBrush.EndColor">
            <summary>
            Gets or sets the ending gradient color.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeTwoColorLinearBrush.Blend">
            <summary>
            Gets or sets the <see cref="P:C1.Win.Themes.Shared.ThemeTwoColorLinearBrush.Blend"/> object. Can be null.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.ThemeMultiColorLinearBrush">
            <summary>
            Represents a multicolor linear gradient brush.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeMultiColorLinearBrush.EncodeValues(C1.Win.Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeMultiColorLinearBrush.DecodeValues(C1.Win.Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeMultiColorLinearBrush.AssignFrom(C1.Win.Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeMultiColorLinearBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> matching this <see cref="T:C1.Win.Themes.Shared.ThemeMultiColorLinearBrush"/> object.
            </summary>
            <param name="brushRect">Gradient brush rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeMultiColorLinearBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeMultiColorLinearBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeMultiColorLinearBrush.InterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines a multicolor linear gradient.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.ThemeRadialBrush">
            <summary>
            Abstract base class for radial gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeRadialBrush.CreateBrush(System.Drawing.Rectangle)">
            <summary>
            For internal use.
            </summary>
            <param name="brushRect"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeRadialBrush.EncodeValues(C1.Win.Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeRadialBrush.DecodeValues(C1.Win.Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeRadialBrush.AssignFrom(C1.Win.Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeRadialBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeRadialBrush.Center">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Point"/> structure that defines position
            of center point.
            (0,0) is the top-left corner, (100,100) is the bottom-right corner.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.ThemeTwoColorRadialBrush">
            <summary>
            Represents a radial gradient brush based on center point,
            surrounding color and a <see cref="P:C1.Win.Themes.Shared.ThemeTwoColorRadialBrush.Blend"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeTwoColorRadialBrush.EncodeValues(C1.Win.Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeTwoColorRadialBrush.DecodeValues(C1.Win.Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeTwoColorRadialBrush.AssignFrom(C1.Win.Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeTwoColorRadialBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> matching this <see cref="T:C1.Win.Themes.Shared.ThemeTwoColorRadialBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeTwoColorRadialBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeTwoColorRadialBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeTwoColorRadialBrush.CenterColor">
            <summary>
            Gets or sets the color at the center of the radial gradient.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeTwoColorRadialBrush.SurroundColor">
            <summary>
            Gets or sets the surrounding color of the radial gradient.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeTwoColorRadialBrush.Blend">
            <summary>
            Gets or sets the <see cref="P:C1.Win.Themes.Shared.ThemeTwoColorRadialBrush.Blend"/> object. Can be null.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.ThemeMultiColorRadialBrush">
            <summary>
            Represents a multicolor radial gradient brush.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeMultiColorRadialBrush.EncodeValues(C1.Win.Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeMultiColorRadialBrush.DecodeValues(C1.Win.Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeMultiColorRadialBrush.AssignFrom(C1.Win.Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeMultiColorRadialBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> matching this <see cref="T:C1.Win.Themes.Shared.ThemeMultiColorRadialBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeMultiColorRadialBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeMultiColorRadialBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeMultiColorRadialBrush.InterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines this multicolor radiant gradient.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeBrushHelper.ForeignBrush">
            <summary>
            Gets or sets a brush object which is stored but not managed by this ThemeBrushHelper -
            i.e. it will not be disposed when this ThemeBrushHelper is disposed, or a new brush is
            assigned to it.
            Note that while the 'get' accessor is provided for this property, there is no need to use it -
            just use the <see cref="M:C1.Win.Themes.Shared.ThemeBrushHelper.GetBrush(System.Drawing.Rectangle)"/> method to get a usable GDI+ brush.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeBrushHelper.CreateThemeBrushNoTransparentOrEmpty(C1.Win.Themes.Shared.C1ThemeProxy,System.String,C1.Win.Themes.Shared.ThemeBrushBase)">
            <summary>
            Creates brush based on specified theme path.
            Returns defaultValue if brush can not be created or it is solid and color is transparent or empty.
            </summary>
            <param name="themeProxy"></param>
            <param name="path"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.Themes.Shared.ThemeScrollBars">
            <summary>
            A utility class for adding theme support to scrollbars. 
            </summary>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeScrollBars.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Themes.Shared.ThemeScrollBars" /> class.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeScrollBars.#ctor(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Themes.Shared.ThemeScrollBars" /> class.
            </summary>
            <param name="control">The control.</param>
            <param name="invertOnRtl">if set to <c>true</c> invert horizontal scrolling handling.</param>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeScrollBars.Use">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:C1.Win.Themes.Shared.ThemeScrollBars"/> is use.
            </summary>
            <value>
              <c>true</c> if use; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeScrollBars.ApplyScrollBarsStyle(System.Object,System.String)">
            <summary>
            Applies the scroll bars style.
            </summary>
            <param name="theme">The theme.</param>
            <param name="scrollBarsPath">The scroll bars path.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeScrollBars.ApplyScrollBarsStyle(System.Object,System.String,System.Boolean)">
            <summary>
            Applies the scroll bars style.
            </summary>
            <param name="theme">The theme.</param>
            <param name="scrollBarsPath">The scroll bars path.</param>
            <param name="forceVerticalScrollBar">if set to <c>true</c> [force vertical scroll bar].</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeScrollBars.ApplyScrollBarsStyle(System.Object,System.String,System.Boolean,System.Boolean)">
            <summary>
            Applies the scroll bars style.
            </summary>
            <param name="theme">The theme.</param>
            <param name="scrollBarsPath">The scroll bars path.</param>
            <param name="forceVerticalScrollBar">if set to <c>true</c> [force vertical scroll bar].</param>
            <param name="forceHorizontalScrollBar">if set to <c>true</c> [force horizontal scroll bar].</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeScrollBars.ResetScrollBarsStyle">
            <summary>
            Resets the scroll bars style.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeScrollBars.VerticalScrollBarIsVisible">
            <summary>
            Returns true if the vertical scroll bar is visible.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeScrollBars.HorizontalScrollBarIsVisible">
            <summary>
            Returns true if the horizontal scroll bar is visible.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeScrollBars.VerticalScrollBarWidth">
            <summary>
            Gets the width of the vertical scroll bar.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeScrollBars.HorizontalScrollBarHeight">
            <summary>
            Gets the height of the horizontal scroll bar.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeScrollBars.ScrollBars">
            <summary>
            Gets or sets the type of scroll bars to display for the control.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeScrollBars.VerticalPosition">
            <summary>
            Gets or sets the position of vertical scroll bar.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeScrollBars.VerticalTrackPosition">
            <summary>
            Gets or sets the track position of vertical scroll bar.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeScrollBars.SetScrollSize(System.Drawing.Size)">
            <summary>
            Sets the size of the scrollbars.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeScrollBars.HorizontalPosition">
            <summary>
            Gets or sets the position of horizontal scroll bar.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeScrollBars.HorizontalTrackPosition">
            <summary>
            Gets or sets the track position of horizontal scroll bar.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeScrollBars.ForceVerticalScrollBar">
            <summary>
            Gets or sets whether vertical scrollbar should always be displayed.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.Shared.ThemeScrollBars.ForceHorizontalScrollBar">
            <summary>
            Gets or sets whether horizontal scrollbar should always be displayed.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeScrollBars.NcCalcSize(System.Windows.Forms.Message@)">
            <summary>
            Handles NcCalcSize message of the control.
            </summary>
            <param name="m">The message to process.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeScrollBars.NcHitTest(System.Windows.Forms.Message@)">
            <summary>
            Handles NcHitTest message of the control.
            </summary>
            <param name="m">The message to process.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeScrollBars.NcPaint(System.IntPtr)">
            <summary>
            Draws scrollbars in the non-client area of the control.
            </summary>
            <param name="hdc">The handle to the device context.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeScrollBars.NcMouseHover(System.Windows.Forms.Message@)">
            <summary>
            Handles NcMouseHover message of the control.
            </summary>
            <param name="m">The message to process.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeScrollBars.MouseMove(System.Windows.Forms.Message@)">
            <summary>
            Handles MouseMove message of the control.
            </summary>
            <param name="m">The message to process.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeScrollBars.NcMouseMove(System.Windows.Forms.Message@)">
            <summary>
            Handles NcMouseMove message of the control.
            </summary>
            <param name="m">The message to process.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeScrollBars.NcMouseLeave(System.Windows.Forms.Message@)">
            <summary>
            Handles NcMouseLeave message of the control.
            </summary>
            <param name="m">The message to process.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeScrollBars.NcLButtonDown(System.Windows.Forms.Message@)">
            <summary>
            Handles NcLButtonDown message of the control.
            </summary>
            <param name="m">The message to process.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.ThemeScrollBars.LButtonUp(System.Windows.Forms.Message@)">
            <summary>
            Handles LButtonUp message of the control.
            </summary>
            <param name="m">The message to process.</param>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTBORDER">
            <summary>
            In the border of a window that does not have a sizing border.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTBOTTOM">
            <summary>
            In the lower-horizontal border of a resizable window (the user can click the mouse to resize the window vertically).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTBOTTOMLEFT">
            <summary>
            In the lower-left corner of a border of a resizable window (the user can click the mouse to resize the window diagonally).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTBOTTOMRIGHT">
            <summary>
            In the lower-right corner of a border of a resizable window (the user can click the mouse to resize the window diagonally).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTCAPTION">
            <summary>
            In a title bar.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTCLIENT">
            <summary>
            In a client area.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTCLOSE">
            <summary>
            In a Close button.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTERROR">
            <summary>
            On the screen background or on a dividing line between windows (same as HTNOWHERE, except that the DefWindowProc function produces a system beep to indicate an error).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTGROWBOX">
            <summary>
            In a size box (same as HTSIZE).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTHELP">
            <summary>
            In a Help button.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTHSCROLL">
            <summary>
            In a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTLEFT">
            <summary>
            In the left border of a resizable window (the user can click the mouse to resize the window horizontally).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTMENU">
            <summary>
            In a menu.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTMAXBUTTON">
            <summary>
            In a Maximize button.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTMINBUTTON">
            <summary>
            In a Minimize button.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTNOWHERE">
            <summary>
            On the screen background or on a dividing line between windows.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTREDUCE">
            <summary>
            In a Minimize button.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTRIGHT">
            <summary>
            In the right border of a resizable window (the user can click the mouse to resize the window horizontally).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTSIZE">
            <summary>
            In a size box (same as HTGROWBOX).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTSYSMENU">
            <summary>
            In a window menu or in a Close button in a child window.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTTOP">
            <summary>
            In the upper-horizontal border of a window.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTTOPLEFT">
            <summary>
            In the upper-left corner of a window border.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTTOPRIGHT">
            <summary>
            In the upper-right corner of a window border.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTTRANSPARENT">
            <summary>
            In a window currently covered by another window in the same thread (the message will be sent to underlying windows in the same thread until one of them returns a code that is not HTTRANSPARENT).
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTVSCROLL">
            <summary>
            In the vertical scroll bar.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.HitTestValues.HTZOOM">
            <summary>
            In a Maximize button.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeviceContextValues">
            <summary>Values to pass to the GetDCEx method.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeviceContextValues.Window">
            <summary>DCX_WINDOW: Returns a DC that corresponds to the window rectangle rather 
            than the client rectangle.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeviceContextValues.Cache">
            <summary>DCX_CACHE: Returns a DC from the cache, rather than the OWNDC or CLASSDC 
            window. Essentially overrides CS_OWNDC and CS_CLASSDC.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeviceContextValues.NoResetAttrs">
            <summary>DCX_NORESETATTRS: Does not reset the attributes of this DC to the 
            default attributes when this DC is released.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeviceContextValues.ClipChildren">
            <summary>DCX_CLIPCHILDREN: Excludes the visible regions of all child windows 
            below the window identified by hWnd.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeviceContextValues.ClipSiblings">
            <summary>DCX_CLIPSIBLINGS: Excludes the visible regions of all sibling windows 
            above the window identified by hWnd.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeviceContextValues.ParentClip">
            <summary>DCX_PARENTCLIP: Uses the visible region of the parent window. The 
            parent's WS_CLIPCHILDREN and CS_PARENTDC style bits are ignored. The origin is 
            set to the upper-left corner of the window identified by hWnd.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeviceContextValues.ExcludeRgn">
            <summary>DCX_EXCLUDERGN: The clipping region identified by hrgnClip is excluded 
            from the visible region of the returned DC.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeviceContextValues.IntersectRgn">
            <summary>DCX_INTERSECTRGN: The clipping region identified by hrgnClip is 
            intersected with the visible region of the returned DC.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeviceContextValues.ExcludeUpdate">
            <summary>DCX_EXCLUDEUPDATE: Unknown...Undocumented</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeviceContextValues.IntersectUpdate">
            <summary>DCX_INTERSECTUPDATE: Unknown...Undocumented</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeviceContextValues.LockWindowUpdate">
            <summary>DCX_LOCKWINDOWUPDATE: Allows drawing even if there is a LockWindowUpdate 
            call in effect that would otherwise exclude this window. Used for drawing during 
            tracking.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeviceContextValues.Validate">
            <summary>DCX_VALIDATE When specified with DCX_INTERSECTUPDATE, causes the DC to 
            be completely validated. Using this function with both DCX_INTERSECTUPDATE and 
            DCX_VALIDATE is identical to using the BeginPaint function.</summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeferWindowPosCommands.SWP_DRAWFRAME">
            <Summary>Draws a frame (defined in the window's class description) around the window.</Summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeferWindowPosCommands.SWP_FRAMECHANGED">
            <Summary>Sends a WM_NCCALCSIZE message to the window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE is sent only when the window's size is being changed.</Summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeferWindowPosCommands.SWP_HIDEWINDOW">
            <Summary>Hides the window.</Summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeferWindowPosCommands.SWP_NOACTIVATE">
            <Summary>Does not activate the window. If this flag is not set, the window is activated and moved to the top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).</Summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeferWindowPosCommands.SWP_NOCOPYBITS">
            <Summary>Discards the entire contents of the client area. If this flag is not specified, the valid contents of the client area are saved and copied back into the client area after the window is sized or repositioned.</Summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeferWindowPosCommands.SWP_NOMOVE">
            <Summary>Retains the current position (ignores the x and y parameters).</Summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeferWindowPosCommands.SWP_NOOWNERZORDER">
            <Summary>Does not change the owner window's position in the Z order.</Summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeferWindowPosCommands.SWP_NOREDRAW">
            <Summary>Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of the window being moved. When this flag is set, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.</Summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeferWindowPosCommands.SWP_NOREPOSITION">
            <Summary>Same as the SWP_NOOWNERZORDER flag.</Summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeferWindowPosCommands.SWP_NOSENDCHANGING">
            <Summary>Prevents the window from receiving the WM_WINDOWPOSCHANGING message.</Summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeferWindowPosCommands.SWP_NOSIZE">
            <Summary>Retains the current size (ignores the cx and cy parameters).</Summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeferWindowPosCommands.SWP_NOZORDER">
            <Summary>Retains the current Z order (ignores the hWndInsertAfter parameter).</Summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.DeferWindowPosCommands.SWP_SHOWWINDOW">
            <Summary>Displays the window.</Summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.ThemeScrollBars.Win32.TMEFlags">
            <summary>
            The services requested. This member can be a combination of the following values.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.TMEFlags.TME_CANCEL">
            <summary>
            The caller wants to cancel a prior tracking request. The caller should also specify the type of tracking that it wants to cancel. For example, to cancel hover tracking, the caller must pass the TME_CANCEL and TME_HOVER flags.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.TMEFlags.TME_HOVER">
            <summary>
            The caller wants hover notification. Notification is delivered as a WM_MOUSEHOVER message.
            If the caller requests hover tracking while hover tracking is already active, the hover timer will be reset.
            This flag is ignored if the mouse pointer is not over the specified window or area.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.TMEFlags.TME_LEAVE">
            <summary>
            The caller wants leave notification. Notification is delivered as a WM_MOUSELEAVE message. If the mouse is not over the specified window or area, a leave notification is generated immediately and no further tracking is performed.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.TMEFlags.TME_NONCLIENT">
            <summary>
            The caller wants hover and leave notification for the nonclient areas. Notification is delivered as WM_NCMOUSEHOVER and WM_NCMOUSELEAVE messages.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeScrollBars.Win32.TMEFlags.TME_QUERY">
            <summary>
            The function fills in the structure instead of treating it as a tracking request. The structure is filled such that had that structure been passed to TrackMouseEvent, it would generate the current tracking. The only anomaly is that the hover time-out returned is always the actual time-out and not HOVER_DEFAULT, if HOVER_DEFAULT was specified during the original TrackMouseEvent request. 
            </summary>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.EmptyIfTransparent(System.Drawing.Color)">
            <summary>
            Gets an empty color instead of a transparent color; otherwise, it returns the specified color.
            </summary>
            <param name="color">The specified color.</param>
            <returns>Empty color if transparent color was set.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.IsBlendEqual(System.Drawing.Drawing2D.Blend,System.Drawing.Drawing2D.Blend)">
            <summary>
            For internal use.
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.IsColorBlendEqual(System.Drawing.Drawing2D.ColorBlend,System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            For internal use.
            </summary>
            <param name="cb1"></param>
            <param name="cb2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.GradientModeToAngle(C1.Win.Themes.Shared.GradientMode)">
            <summary>
            For internal use.
            </summary>
            <param name="gradientMode"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.AngleToGradientMode(System.Single)">
            <summary>
            For internal use.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.ColorToString(System.Drawing.Color)">
            <summary>
            Converts color value to string.
            </summary>
            <param name="value">The color to be converted.</param>
            <returns>The string represents the color.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.ColorFromString(System.String)">
            <summary>
            Converts string value to color.
            </summary>
            <param name="s">The string to be converted.</param>
            <returns>The color value.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.TryColorFromString(System.String,System.Drawing.Color@)">
            <summary>
            Converts string to color.
            </summary>
            <param name="s">The string to be converted.</param>
            <param name="value">The color is the result of the conversion.</param>
            <returns>True if the string to color conversion was successful, otherwise returns false.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.BoolToString(System.Boolean)">
            <summary>
            Gets a string based on a boolean value.
            </summary>
            <param name="value">Boolean value.</param>
            <returns>"true" if value is true and "false" if value is false.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.TryBoolFromString(System.String,System.Boolean@)">
            <summary>
            Gets a string based on a boolean value.
            </summary>
            <param name="s">String value to convert.</param>
            <param name="value">Boolean result.</param>
            <returns>True if conversion was successful.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.BlendToString(System.Drawing.Drawing2D.Blend)">
            <summary>
            Converts blend pattern object to string.
            </summary>
            <param name="blend"><see cref="T:System.Drawing.Drawing2D.Blend"/> pattern object to convert.</param>
            <returns>Converted blend pattern as string if conversion was successful.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.TryBlendFromString(System.String,System.Drawing.Drawing2D.Blend@)">
            <summary>
            Converts string to blend pattern object.
            </summary>
            <param name="s">String to convert.</param>
            <param name="value"><see cref="T:System.Drawing.Drawing2D.Blend"/> pattern object.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.ColorBlendToString(System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            Converts <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> object to string.
            </summary>
            <param name="blend"><see cref="T:System.Drawing.Drawing2D.ColorBlend"/> object to convert.</param>
            <returns>Converted ColorBlend pattern as string if conversion was successful.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.TryColorBlendFromString(System.String,System.Drawing.Drawing2D.ColorBlend@)">
            <summary>
            Converts string to <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> object.
            </summary>
            <param name="s">String to convert.</param>
            <param name="value">Converted ColorBlend pattern as string if conversion was successful.</param>
            <returns>True if conversion was successful, otherwise returns false.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.PointToString(System.Drawing.Point)">
            <summary>
            Converts <see cref="T:System.Drawing.Point"/> object to string.
            </summary>
            <param name="value">The <see cref="T:System.Drawing.Point"/> object to convert.</param>
            <returns>The string representing point.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.TryPointFromString(System.String,System.Drawing.Point@)">
            <summary>
            Converts string to <see cref="T:System.Drawing.Point"/> object.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="value">The <see cref="T:System.Drawing.Point"/> object.></param>
            <returns>True if conversion was successful, otherwise returns false.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.PointFToString(System.Drawing.PointF)">
            <summary>
            Converts <see cref="T:System.Drawing.PointF"/> object to string.
            </summary>
            <param name="value">The <see cref="T:System.Drawing.PointF"/> object to convert.</param>
            <returns>The string representing point.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.TryPointFFromString(System.String,System.Drawing.PointF@)">
            <summary>
            Converts string to <see cref="T:System.Drawing.Point"/> object.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="value">The <see cref="T:System.Drawing.Point"/> object.></param>
            <returns>True if conversion was successful, otherwise returns false.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.PointsToString(System.Drawing.PointF[])">
            <summary>
            Converts an array of the Point to string.
            </summary>
            <param name="value">The <see cref="T:System.Drawing.Point"/> object to convert.</param>
            <returns>The string representing point.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.Utils.TryPointsFromString(System.String,System.Drawing.PointF[]@)">
            <summary>
            Converts string to an array of the Point.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="value">The <see cref="T:System.Drawing.Point"/> object.></param>
            <returns>True if conversion was successful, otherwise returns false.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.ValuesStore.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.Themes.Shared.Utils.ValuesStore"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.ValuesStore.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.Themes.Shared.Utils.ValuesStore"/> class.
            </summary>
            <param name="data">The string of data to assign.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.ValuesStore.GetData">
            <summary>
            Gets the data string.
            </summary>
            <returns>The data string.</returns>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.ValuesStore.Add(System.String)">
            <summary>
            Appends a string to data.
            </summary>
            <param name="s">The string to add.</param>
        </member>
        <member name="M:C1.Win.Themes.Shared.Utils.ValuesStore.Next">
            <summary>
            Finds characters to the end of the string.
            </summary>
            <returns>True if characters were found; otherwise, false.</returns>
        </member>
        <member name="P:C1.Win.Themes.Shared.Utils.ValuesStore.Value">
            <summary>
            Gets the characters to the end of the string.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.Shared.ThemeVersions">
            <summary>
            Versions of c1theme XML.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVersions.c_PlatformVersionPrefix">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVersions.c_InitialFormatVersion">
            <summary>
            First public versions of C1Themes.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVersions.c_NewBackgroundsFormatVersion">
            <summary>
            Version of theme XML when structure of BackgroundProp was changed.
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVersions.c_NewRibbonFormatVersion">
            <summary>
            Version of theme XML when structure of C1Ribbon theme was changed
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVersions.c_C1PrefixRemovedFormatVersion">
            <summary>
            Version of theme XML when C1 prefix was removed
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVersions.c_NewInputFormatVersion">
            <summary>
            Version of theme XML when structure of C1Input theme was changed
            </summary>
        </member>
        <member name="F:C1.Win.Themes.Shared.ThemeVersions._newCommandFormatVersion">
            <summary>
            Version of theme XML when tab shape was added as themeable property for C1DockingTab.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.BaseC1FrameworkStyle">
            <summary>
            Base C1Framework style.
            </summary>    
            <summary>
            Base C1Framework style.
            </summary>    
        </member>
        <member name="M:C1.Win.Themes.BaseC1FrameworkStyle.#ctor(C1.Win.Themes.BaseThemeProvider,System.String,C1.Win.Themes.StyledPropertyInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Themes.BaseC1FrameworkStyle"/>.
            </summary>
            <param name="provider">Theme provider.</param>
            <param name="name">Style name.</param>
            <param name="props">Styled properties.</param>
        </member>
        <member name="M:C1.Win.Themes.BaseC1FrameworkStyle.#ctor(System.String,C1.Win.Themes.StyledPropertyInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Themes.BaseC1FrameworkStyle"/>.
            </summary>
            <param name="name">Style name.</param>
            <param name="props">Styled properties.</param>
        </member>
        <member name="M:C1.Win.Themes.BaseC1FrameworkStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Themes.BaseC1FrameworkStyle"/>.
            </summary>
            <remarks>Styled properties will be initialized automatically.</remarks>
        </member>
        <member name="P:C1.Win.Themes.BaseC1FrameworkStyle.BackBrushProvider">
            <summary>
            Gets <see cref="T:C1.Framework.BackgroundBrushProvider"/> objects used to paint backgrounds.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.BaseC1FrameworkStyle.GetStyle">
            <summary>
            Gets the new <see cref="T:C1.Framework.Style"/> object that matches the current style if it is possible.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.BaseC1FrameworkStyle.ApplyToStyle(C1.Framework.Style)">
            <summary>
            Applies style to destination <see cref="T:C1.Framework.Style"/> object if it is possible.
            </summary>
            <param name="dst">destination style.</param>
        </member>
        <member name="M:C1.Win.Themes.BaseC1FrameworkStyle.IsDefaultProperty(System.String)">
            <summary>
            Returns value indicating whether the specified property is default.
            </summary>
            <param name="name">Specified property name.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.BaseC1FrameworkStyle.ResetProperty(System.String)">
            <summary>
            Reset specified property to its default value.
            </summary>
            <param name="name">Specified property.</param>
        </member>
        <member name="M:C1.Win.Themes.BaseC1FrameworkStyle.Copy(C1.Win.Themes.BaseStyle)">
            <summary>
            Copies properties of the specified style of the same type.
            </summary> 
            <param name="prototype">Specified style.</param>
        </member>
        <member name="M:C1.Win.Themes.BaseC1FrameworkStyle.Dispose(System.Boolean)">
            <summary>
            Releases all unmanaged resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:C1.Win.Themes.BackgroundBrushProviderExtension">
            <summary>
            static class helping to work with BackgroundBrushProvider
            </summary>
        </member>
        <member name="M:C1.Win.Themes.BackgroundBrushProviderExtension.Copy(C1.Framework.BackgroundBrushProvider,C1.Framework.BackgroundBrushProvider)">
            <summary>
            Copies properties of the source BackgroundBrushProvider.
            </summary> 
            <param name="dst">the target BackgroundBrushProvider.</param>
            <param name="src">the source BackgroundBrushProvider.</param>
        </member>
        <member name="T:C1.Win.Themes.BaseStyle">
            <summary>
            Base style.
            </summary>    
        </member>
        <member name="M:C1.Win.Themes.BaseStyle.#ctor(C1.Win.Themes.BaseThemeProvider,System.String,C1.Win.Themes.StyledPropertyInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Themes.BaseStyle"/>.
            </summary>
            <param name="provider">Theme provider.</param>
            <param name="name">Style name.</param>
            <param name="props">Styled properties.</param>
        </member>
        <member name="M:C1.Win.Themes.BaseStyle.#ctor(System.String,C1.Win.Themes.StyledPropertyInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Themes.BaseStyle"/>.
            </summary>
            <param name="name">Style name.</param>
            <param name="props">Styled properties.</param>
        </member>
        <member name="M:C1.Win.Themes.BaseStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Themes.BaseStyle"/>.
            </summary>
            <remarks>Styled properties will be initialized automatically.</remarks>
        </member>
        <member name="P:C1.Win.Themes.BaseStyle.Root">
            <summary>
            Gets or sets the root directory in C1Theme.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.BaseStyle.ThemeProvider">
            <summary>
            Gets theme provider of the current theme.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.BaseStyle.Reset">
            <summary>
            Resets style to it default value according to the applied theme.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.BaseStyle.ResetProperty(System.String,System.Object)">
            <summary>
            Reset specified property to its default value.
            </summary>
            <param name="name">Specified property.</param>
            <param name="defaultValue">Resets to this value if can't reset automatically.</param>
        </member>
        <member name="P:C1.Win.Themes.BaseStyle.DefaultStyle">
            <summary>
            Gets a style that contains the default values for current style.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.BaseStyle.ApplyTheme(System.Object)">
            <summary>
            Applies a new C1Theme to a style
            </summary>
            <param name="newTheme">Applied C1Theme</param>
        </member>
        <member name="M:C1.Win.Themes.BaseStyle.Copy(C1.Win.Themes.BaseStyle)">
            <summary>
            Copies properties of the specified style of the same type.
            </summary> 
            <param name="prototype">specified style.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:C1.Win.Themes.BaseStyle.Clone">
            <summary>
            Creates an instance of the <see cref="T:C1.Win.Themes.BaseStyle"/> class that is identical to the current <see cref="T:C1.Win.Themes.BaseStyle"/> 
            </summary>
        </member>
        <member name="P:C1.Win.Themes.BaseStyle.IsDefault">
            <summary>
            Gets value indicating whether the style is default.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.BaseStyle.IsDefaultProperty(System.String)">
             <summary>
             Returns value indicating whether the specified property is default.
             </summary>
             <param name="name">Specified property name.</param>
             <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"/>
        </member>
        <member name="M:C1.Win.Themes.BaseStyle.ToString">
            <summary>
            Returns the string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.BaseStyle.ResetProperty(System.String)">
            <summary>
            Reset specified property to its default value.
            </summary>
            <param name="name">Specified property.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException" />
        </member>
        <member name="M:C1.Win.Themes.BaseStyle.OnGetUninitializedProperty(System.String)">
            <summary>
            Called when trying to get an initialized property value.
            </summary>
            <param name="name">Property name.</param>
            <returns>Returns new value.</returns>
            <remarks> Ideally this should never happen. The property can be initialized here and return its new value.</remarks>
            <exception cref="T:C1.Win.Themes.StyledPropertyCollection.UninitializedPropertyException"/>
        </member>
        <member name="M:C1.Win.Themes.BaseStyle.OnOwnerChanged">
            <summary>
            Called when collection owner is changed.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.BaseThemeProvider">
            <summary>
            Base ThemeProvider class working with theme.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.BaseThemeProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Themes.BaseThemeProvider"/>.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.BaseThemeProvider.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Themes.BaseThemeProvider"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.BaseThemeProvider.IsDisposed">
            <summary>
            Gets a value indicating whether the object has been disposed.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.BaseThemeProvider.InnerTheme">
            <summary>
            Gets the current C1Theme.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.BaseThemeProvider.EmptyTheme">
            <summary>
            Gets an empty theme.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.BaseThemeProvider.DefaultTheme">
            <summary>
            Gets the default theme.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.BaseThemeProvider.CurrentTheme">
            <summary>
            Gets the current theme.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.BaseThemeProvider.Control">
            <summary>
            Gets or sets owner control.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.BaseThemeProvider.Updating">
            <summary>
            Gets value indicating whether the current theme is updating now. Deny events until the end of the operation.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.BaseThemeProvider.BeginUpdate">
            <summary>
            Start editing the current theme.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.BaseThemeProvider.EndUpdate">
            <summary>
            Stop editing the current theme.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.BaseThemeProvider.ApplyTheme(System.Object)">
            <summary>
            Applies a new C1Theme to a style
            </summary>
            <param name="newTheme">C1Theme to apply.</param>
        </member>
        <member name="M:C1.Win.Themes.BaseThemeProvider.CreateEmptyTheme">
            <summary>
            Creates a new instance of an current empty theme.
            </summary>
        </member>
        <member name="E:C1.Win.Themes.BaseThemeProvider.PropertyChanged">
            <summary>
            Fires when any properties change.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.BaseThemeProvider.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.Themes.BaseThemeProvider.PropertyChanged"/> event.
            </summary>
            <param name="sender"><see cref="T:System.Object"/> event sender.</param>
            <param name="e"><see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.Themes.BaseThemeProvider.Dispose(System.Boolean)">
            <summary>
            Releases all unmanaged resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Win.Themes.BaseThemeProvider.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.StyledPropertyCollection">
            <summary>
            Closed collection of <see cref="T:C1.Win.Themes.StyledPropertyCollection.StyledProperty"/> objects.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.StyledPropertyCollection.#ctor(C1.Win.Themes.StyledPropertyInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Themes.StyledPropertyCollection"/>.
            </summary>
            <param name="props">Styled properties. Represents non-public styled properties.</param>
        </member>
        <member name="M:C1.Win.Themes.StyledPropertyCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Themes.StyledPropertyCollection"/>.
            </summary>
            <remarks>Styled properties will be initialized automatically.</remarks>
        </member>
        <member name="M:C1.Win.Themes.StyledPropertyCollection.CreateAutoProperties">
            <summary>
            Add auto property only for public real properties. 
            Non-public properties shuold be added manually as "props" of the constructor,
            in case this is styled properties.
            </summary>
            <remarks>
            Non-public auto properties greatly affects performance.
            </remarks>
        </member>
        <member name="P:C1.Win.Themes.StyledPropertyCollection.Name">
            <summary>
            Gets or sets the style name.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.StyledPropertyCollection.Owner">
            <summary>
            Gets collection owner.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.StyledPropertyCollection.TopOwner">
            <summary>
            Gets top owner of the collection.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.StyledPropertyCollection.BeginUpdate">
            <summary>
            Start editing the collection.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.StyledPropertyCollection.EndUpdate">
            <summary>
            Stop editing the collection.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.StyledPropertyCollection.HasProperty(System.String)">
            <summary>
            Gets a value indicating whether the collection contains a property with the specified name.
            </summary>
            <param name="name">Specified property name.</param>
            <returns>True if property exists.</returns>
        </member>
        <member name="M:C1.Win.Themes.StyledPropertyCollection.IsInitialized(System.String)">
            <summary>
            Gets a value indicating whether the a specified property is initialized.
            </summary>
            <param name="name">Specified property name.</param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException" />
        </member>
        <member name="M:C1.Win.Themes.StyledPropertyCollection.GetProperty(System.String)">
            <summary>
            Gets value of the specified styled property.
            </summary>
            <param name="name">Styled property name.</param>
            <returns>Styled property value.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException" />
            <exception cref="T:C1.Win.Themes.StyledPropertyCollection.UninitializedPropertyException" />
        </member>
        <member name="M:C1.Win.Themes.StyledPropertyCollection.TryGetProperty(System.Object@,System.String)">
            <summary>
            Tries to get value of the specified styled property.
            </summary>
            <param name="value">Property value.</param>
            <param name="name">Styled property name.</param>
            <returns>True if success.</returns>
        </member>
        <member name="M:C1.Win.Themes.StyledPropertyCollection.GetPropertiesByType``1">
            <summary>
            Gets value of the styled property with the specified type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.StyledPropertyCollection.SetProperty(System.Object,System.String)">
            <summary>
            Sets value of the existing styled property.
            </summary>
            <param name="value">Property value.</param>
            <param name="name">Styled property name.</param>
            <returns>True if the value was successfully set, otherwise False</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="P:C1.Win.Themes.StyledPropertyCollection.Parent">
            <summary>
            Gets the parent collection. If some properties are reset or not initialized, 
            the collection will search for them from the parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Themes.StyledPropertyCollection.ResetProperty(System.String)">
            <summary>
            Completely resets specified property (make it uninitialized, initialization required after that).
            </summary>
            <param name="name">Specified property name.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException" />
        </member>
        <member name="M:C1.Win.Themes.StyledPropertyCollection.OnGetUninitializedProperty(System.String)">
            <summary>
            Called when trying to get an initialized property value.
            </summary>
            <param name="name">Property name.</param>
            <returns>Returns new value.</returns>
            <remarks> Ideally this should never happen. The property can be initialized here and return its new value.</remarks>
            <exception cref="T:C1.Win.Themes.StyledPropertyCollection.UninitializedPropertyException"/>
        </member>
        <member name="M:C1.Win.Themes.StyledPropertyCollection.OnOwnerChanged">
            <summary>
            Called when collection owner is changed.
            </summary>
        </member>
        <member name="E:C1.Win.Themes.StyledPropertyCollection.PropertyChanged">
            <summary>
            Fires when any properties change.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.StyledPropertyCollection.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.Themes.StyledPropertyCollection.PropertyChanged"/> event.
            </summary>
            <param name="sender"><see cref="T:System.Object"/> event sender.</param>
            <param name="e"><see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:C1.Win.Themes.StyledPropertyCollection.IsDisposed">
            <summary>
            Gets a value indicating whether the object has been disposed.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.StyledPropertyCollection.Dispose(System.Boolean)">
            <summary>
            Releases all unmanaged resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Win.Themes.StyledPropertyCollection.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.StyledPropertyCollection.UninitializedPropertyException">
            <summary>
            The exception that is thrown when trying to use uninitialized <see cref="T:C1.Win.Themes.StyledPropertyCollection.StyledProperty"/>.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.StyledPropertyCollection.UninitializedPropertyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Themes.StyledPropertyCollection.UninitializedPropertyException"/> class.
            </summary>
            <param name="propertyName">The name of the property that causes this exception.</param>
        </member>
        <member name="P:C1.Win.Themes.StyledPropertyCollection.UninitializedPropertyException.PropertyName">
            <summary>
            Gets the name of the property that causes this exception.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.StyledPropertyCollection.ExcludeFromStyledPropertyAttribute">
            <summary>
            A property with this attribute will be excluded from the styled properties 
            when <see cref="T:C1.Win.Themes.StyledPropertyCollection"/> default constructor is used.
            </summary>
        </member>
        <member name="T:C1.Win.Themes.StyledPropertyInfo">
            <summary>
            Contains information about styled property.
            </summary>
        </member>
        <member name="M:C1.Win.Themes.StyledPropertyInfo.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Themes.StyledPropertyInfo"/>.
            </summary>
            <param name="name">Property name.</param>
            <param name="type">Property type.</param>
        </member>
        <member name="P:C1.Win.Themes.StyledPropertyInfo.PropertyType">
            <summary>
            Gets property type.
            </summary>
        </member>
        <member name="P:C1.Win.Themes.StyledPropertyInfo.Name">
            <summary>
            Gets property name.
            </summary>
        </member>
        <member name="T:C1.Win.Shared.Themes.ScrollBarElementStyles">
            <summary>
            A utility class for adding theme support to C1Framework's ScrollBarElement. 
            </summary>
        </member>
        <member name="M:C1.Win.Shared.Themes.ScrollBarElementStyles.StoreScrollBarElementStyles(System.Object,System.String)">
            <summary>
            Stores the scroll bar element styles.
            </summary>
            <param name="theme">The theme.</param>
            <param name="scrollBarsPath">The scroll bars path.</param>        
        </member>
        <member name="M:C1.Win.Shared.Themes.ScrollBarElementStyles.ClearScrollBarElementStyles">
            <summary>
            Restores the scroll bar element styles.
            </summary>
        </member>
        <member name="M:C1.Win.Shared.Themes.ScrollBarElementStyles.ApplyScrollBarElementStyles(C1.Framework.ScrollBarElement,System.Boolean)">
            <summary>
            Applies the scroll bar element styles.
            </summary>
            <param name="scrollBarElement">The scroll bar element.</param>
            <param name="clone">if set to <c>true</c> [clone].</param>
        </member>
        <member name="T:C1.Win.Util.CodeRange">
            <summary>
            Represents range of character codes.
            </summary>
        </member>
        <member name="M:C1.Win.Util.CodeRange.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.Util.CodeRange"/> class.
            </summary>
            <param name="first"></param>
            <param name="last"></param>
        </member>
        <member name="M:C1.Win.Util.CodeRange.#ctor(System.Char)">
            <summary>
            Initialization of the range of character codes
            </summary>
            <param name="ch">Adding character.</param>
        </member>
        <member name="M:C1.Win.Util.CodeRange.#ctor(System.Char,System.Char)">
            <summary>
            Initialization of the range of character codes
            </summary>
            <param name="first">The first character code.</param>
            <param name="last">The last character code.</param>
        </member>
        <member name="M:C1.Win.Util.CodeRange.Clone">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:C1.Win.Util.CodeRange.Contains(C1.Win.Util.CodeRange)">
            <summary>
            
            </summary>
            <param name="cr"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Util.CodeRange.IsSurrogateHigh(System.Char)">
            <summary>Whether is high code (Unicode) of surrogate character.</summary>
            <param name="ch">The character for test.</param>
            <returns><b>true</b> if is high code of surrogate character, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:C1.Win.Util.CodeRange.IsSurrogateLow(System.Char)">
            <summary>Whether is low code (Unicode) of surrogate character.</summary>
            <param name="ch">The character for test.</param>
            <returns><b>true</b> if is low code of surrogate character, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:C1.Win.Util.CodeRange.IsSurrogatePair(System.String,System.Int32)">
            <summary>Whether is pair of surrogate characters.</summary>
            <param name="text">The text string for test.</param>
            <param name="idx">The index of text.</param>
            <returns><b>true</b> if is pair of surrogate characters, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:C1.Win.Util.CodeRange.IsSurrogatePair(System.Char[],System.Int32)">
            <summary>Whether is pair of surrogate characters.</summary>
            <param name="text">The text as character's array for test.</param>
            <param name="idx">The index of array.</param>
            <returns><b>true</b> if is pair of surrogate characters, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:C1.Win.Util.CodeRange.ToUtf32(System.Char,System.Char)">
            <summary>Convert surrogate pair to UTF32 code.</summary>
            <param name="highSurrogate">The high code (Unicode) of surrogate character.</param>
            <param name="lowSurrogate">The high code (Unicode) of surrogate character.</param>
            <returns>The UTF32 code.</returns>
        </member>
        <member name="M:C1.Win.Util.CodeRange.ToUtf32(System.String,System.Int32)">
            <summary>Convert text's character (maybe with surrogate pairs) to UTF32 code.</summary>
            <param name="text">The text string for test.</param>
            <param name="idx">The index of text.</param>
            <returns>The UTF32 code.</returns>
        </member>
        <member name="M:C1.Win.Util.CodeRange.FromUtf32(System.Int32)">
            <summary>Convert form code point to text.</summary>
            <param name="codePoint">The code point value.</param>
            <returns>The text as one or two characters.</returns>
        </member>
        <member name="P:C1.Win.Util.CodeRange.First">
            <summary>The begin code of character.</summary>
        </member>
        <member name="P:C1.Win.Util.CodeRange.Last">
            <summary>The end code of character.</summary>
        </member>
        <member name="T:C1.Win.Util.CodeRanges">
            <summary>
            Represents collection of unique <see cref="T:C1.Win.Util.CodeRange"/> objects.
            All CodeRange objects within collection not intersect and sorted
            by First field.
            </summary>
        </member>
        <member name="M:C1.Win.Util.CodeRanges.Add(System.Char[])">
            <summary>
            
            </summary>
            <param name="chars"></param>
        </member>
        <member name="M:C1.Win.Util.CodeRanges.Add(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:C1.Win.Util.CodeRanges.Add(System.Char)">
            <summary>
            
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:C1.Win.Util.CodeRanges.Add(C1.Win.Util.CodeRange)">
            <summary>
            
            </summary>
            <param name="cr"></param>
        </member>
        <member name="M:C1.Win.Util.CodeRanges.Add(System.Char,System.Char)">
            <summary>
            
            </summary>
            <param name="first"></param>
            <param name="last"></param>
        </member>
        <member name="M:C1.Win.Util.CodeRanges.AddNoCheck(C1.Win.Util.CodeRange)">
            <summary>
            Adds <see cref="T:C1.Win.Util.CodeRange"/> object to current without any check, typically used during deserialization.
            </summary>
            <param name="cr"><see cref="T:C1.Win.Util.CodeRange"/> to add.</param>
        </member>
        <member name="M:C1.Win.Util.CodeRanges.Add(System.Collections.Generic.IEnumerable{C1.Win.Util.CodeRange})">
            <summary>
            
            </summary>
            <param name="crs"></param>
        </member>
        <member name="M:C1.Win.Util.CodeRanges.GetGlyphs">
            <summary>
            Gets the array of chars contained in this list of code ranges.
            </summary>
            <returns>Array of char</returns>
        </member>
        <member name="M:C1.Win.Util.CodeRanges.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Util.CodeRanges.AssignFrom(C1.Win.Util.CodeRanges)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:C1.Win.Util.CodeRanges.ContainsAllChars">
            <summary>
            Gets a value indicating whether the <see cref="T:C1.Win.Util.CodeRanges"/> collection
            contains all characters from 0x0000 to 0xFFFF.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.Util.AssemblyHelper">
            <summary>
            Assembly helper routines.
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.Util.AssemblyHelper.GetTargetDotNetVersion(System.Reflection.Assembly)">
            <summary>
            Returns targeted .NET version for the specified control's assembly.
            </summary>
            <param name="assembly">Assembly</param>
            <returns>String containing .NET version, e.g. 4.8.</returns>
        </member>
        <member name="T:C1.Win.Util.BinarySerializer">
            <summary>
            Utility class for binary serialization.
            </summary>
        </member>
        <member name="M:C1.Win.Util.BinarySerializer.ImageToBase64String(System.Drawing.Image)">
            <summary>
            Converts an image into the base 64 string.
            </summary>
            <param name="image">The image to convert.</param>
            <returns>The string representation, in base 64, of the contents of an image.</returns>
        </member>
        <member name="M:C1.Win.Util.BinarySerializer.ImageFromBase64String(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as base-64 digits into the <see cref="T:System.Drawing.Image"/> object.
            </summary>
            <param name="base64String">The string to convert.</param>
            <returns>The image.</returns>
        </member>
        <member name="M:C1.Win.Util.BinarySerializer.SaveImage(System.Xml.XmlWriter,System.Drawing.Image)">
            <summary>
            Saves an image into the specified <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that will receive the object data.</param>
            <param name="image">An image to write.</param>
        </member>
        <member name="M:C1.Win.Util.BinarySerializer.LoadImage(System.Xml.XmlNode)">
            <summary>
            Loads an image from the specified <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="node">A <see cref="T:System.Xml.XmlNode"/> which contains the object data.</param>
            <returns>The image.</returns>
        </member>
        <member name="T:C1.Win.Util.BoundsChangedEventArgs">
            <summary>
            Provides data for the BoundsChanged event.
            </summary>
        </member>
        <member name="P:C1.Win.Util.BoundsChangedEventArgs.OldValue">
            <summary>
            Gets old value.
            </summary>
        </member>
        <member name="P:C1.Win.Util.BoundsChangedEventArgs.NewValue">
            <summary>
            Gets new value.
            </summary>
        </member>
        <member name="M:C1.Win.Util.BoundsChangedEventArgs.#ctor(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Creates instance.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="T:C1.Win.Util.DpiHelper">
            <summary>
            Helper class for scaling coordinates and images according to DPI scaling.
            </summary>
        </member>
        <member name="F:C1.Win.Util.DpiHelper.DEFAULT_DPI">
            <summary>
            Default DPI value.
            </summary>
        </member>
        <member name="P:C1.Win.Util.DpiHelper.SystemDpi">
            <summary>
            Gets the DPI value set in Windows for the primary screen.
            </summary>
        </member>
        <member name="M:C1.Win.Util.DpiHelper.ScaleToSystemDPI(System.Int32)">
            <summary>
            Scales a int value to the system dpi.
            </summary>
            <param name="value">The value for scaling.</param>
            <returns>The scaled value.</returns>
        </member>
        <member name="M:C1.Win.Util.DpiHelper.ScaleToSystemDPI(System.Drawing.Size)">
            <summary>
            Scales a <see cref="T:System.Drawing.Size"/> value to the system dpi.
            </summary>
            <param name="value">The value for scaling.</param>
            <returns>The scaled value.</returns>
        </member>
        <member name="M:C1.Win.Util.DpiHelper.ScaleToDPI(System.Int32,System.Int32)">
            <summary>
            Scales a int value to the dpi.
            </summary>
            <param name="value">The value for scaling.</param>
            <param name="dpi">The DPI value for the current display device.</param>
            <returns>The scaled value.</returns>
        </member>
        <member name="M:C1.Win.Util.DpiHelper.ScaleToDPI(System.Drawing.Size,System.Int32)">
            <summary>
            Scales a <see cref="T:System.Drawing.Size"/> value to the dpi.
            </summary>
            <param name="value">The value for scaling.</param>
            <param name="dpi">The DPI value for the current display device.</param>
            <returns>The scaled value.</returns>
        </member>
        <member name="M:C1.Win.Util.DpiHelper.ScaleToDPI(C1.Framework.Thickness,System.Int32)">
            <summary>
            Scales a <see cref="T:C1.Framework.Thickness"/> value to the dpi.
            </summary>
            <param name="value">The value for scaling.</param>
            <param name="dpi">The DPI value for the current display device.</param>
            <returns>The scaled value.</returns>
        </member>
        <member name="M:C1.Win.Util.DpiHelper.ScaleToDPI(C1.Framework.Style,System.Int32)">
            <summary>
            Scales the <see cref="T:C1.Framework.Style"/> instance to the dpi.
            </summary>
            <param name="value">The style for scaling.</param>
            <param name="dpi">The DPI value for the current display device.</param>
            <remarks>
            This method doen't scale the Font property.
            </remarks>
        </member>
        <member name="M:C1.Win.Util.DpiHelper.ScaleBitmapLogicalToDevice(System.Drawing.Bitmap@,System.Int32)">
            <summary>
            Scales a logical bitmap value to it's equivalent device unit value.
            </summary>
            <param name="bitmap">The bitmap to scale.</param>
            <param name="dpi">The DPI value for the current display device.</param>
        </member>
        <member name="M:C1.Win.Util.DpiHelper.GetVerticalScrollBarWidth(System.Int32)">
            <summary>
            Gets the default height, in pixels, of the vertical scroll bar for a current DPI value.
            </summary>
            <param name="dpi">The DPI value for the current display device.</param>
        </member>
        <member name="M:C1.Win.Util.DpiHelper.GetHorizontalScrollBarHeight(System.Int32)">
            <summary>
            Gets the default height, in pixels, of the horizontal scroll bar for a current DPI value.
            </summary>
            <param name="dpi">The DPI value for the current display device.</param>
        </member>
        <member name="M:C1.Win.Util.DpiHelper.GetHorizontalScrollBarArrowWidth(System.Int32)">
            <summary>        
            Gets the width of the horizontal scroll bar arrow bitmap in pixels for a current DPI value.
            </summary>
            <param name="dpi">The DPI value for the current display device.</param>
        </member>
        <member name="M:C1.Win.Util.DpiHelper.GetBorderSize(System.Int32)">
            <summary>
            Gets the default size, in pixels, of the border for a current DPI value.
            </summary>
            <param name="dpi">The DPI value for the current display device.</param>
        </member>
        <member name="T:C1.Win.Util.ImageRecolorer">
            <summary>
            Provides a method for replacing colors in the source image
            with the specified new colors in the destination image.
            </summary>
        </member>
        <member name="M:C1.Win.Util.ImageRecolorer.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:C1.Win.Util.ImageRecolorer"/>.
            </summary>
        </member>
        <member name="M:C1.Win.Util.ImageRecolorer.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.Win.Util.ImageRecolorer"/>.
            </summary>
            <param name="cBlack">The color to replace Black in the source image.</param>
            <param name="cWhite">The color to replace White in the source image.</param>
            <param name="cBlue">The color to replace Blue in the source image.</param>
            <param name="cMagenta">The color to replace Magenta in the source image.</param>
        </member>
        <member name="M:C1.Win.Util.ImageRecolorer.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.Win.Util.ImageRecolorer"/>.
            </summary>
            <param name="cBlack">The color to replace Black in the source image.</param>
            <param name="cWhite">The color to replace White in the source image.</param>
            <param name="cBlue">The color to replace Blue in the source image.</param>
            <param name="cMagenta">The color to replace Magenta in the source image.</param>
        </member>
        <member name="P:C1.Win.Util.ImageRecolorer.IgnoreColor">
            <summary>
            Gets or sets the color to ignore on replacing.
            </summary>
            <remarks>
            If Color.Empty is set, the value is ignored.
            </remarks>
        </member>
        <member name="P:C1.Win.Util.ImageRecolorer.IgnoreColorTolerance">
            <summary>
            Gets or sets a value that controls the range of colors to ignore when replacing.
            </summary>
            <remarks>
            If zero is set, the value is ignored.
            </remarks>
        </member>
        <member name="P:C1.Win.Util.ImageRecolorer.ChannelBlack">
            <summary>
            Gets or sets the color to replace Black in the source image.
            </summary>
        </member>
        <member name="P:C1.Win.Util.ImageRecolorer.ChannelWhite">
            <summary>
            Gets or sets the color to replace White in the source image.
            </summary>
        </member>
        <member name="P:C1.Win.Util.ImageRecolorer.ChannelBlue">
            <summary>
            Gets or sets the color to replace Blue in the source image.
            </summary>
        </member>
        <member name="P:C1.Win.Util.ImageRecolorer.ChannelMagenta">
            <summary>
            Gets or sets the color to replace Magenta in the source image.
            </summary>
        </member>
        <member name="M:C1.Win.Util.ImageRecolorer.MapPixels(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Copies the source image to the destination image with replacing colors.
            </summary>
            <param name="srcImage">The source image using Format32bppArgb as pixel format.</param>
            <param name="dstImage">The destination image using Format32bppPArgb as pixel format.</param>
            <param name="width">The width of the source and destination images.</param>
            <param name="height">The height of the source and destination images.</param>
        </member>
        <member name="M:C1.Win.Util.ImageRecolorer.BlendOverBackground(System.Drawing.Bitmap,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Blends only the pixels matching the given <paramref name="targetColor"/> against a specified
            <paramref name="background"/> color, preserving all other pixels.
            </summary>
            <param name="srcImage">The source bitmap with alpha channel (must be Format32bppPArgb).</param>
            <param name="targetColor">The color to match.</param>
            <param name="background"> The background color to blend the transparent pixels against</param>
            <returns>A 32bpp image</returns>
            <exception cref="T:System.ArgumentException">Thrown if the source bitmap is not in a supported 32bpp PARGB format.</exception>
        </member>
        <member name="M:C1.Win.ImageWorkerService.Dispose(System.Boolean)">
            <summary>
            Releases all unmanaged resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:C1.Win.ImageWorkerService.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:C1.Win.Interop.MatrixUtil">
            <summary>
            Helper class extends <see cref="T:C1.Win.Interop.Matrix"/> structure.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.MatrixUtil.Rotate(System.Double,System.Double,System.Double)">
            <summary>
            Returns <see cref="T:C1.Win.Interop.Matrix"/> rotated in clockwise direction around specified point.
            </summary>
            <param name="angleDeg">The rotation angle in degrees.</param>
            <param name="centerX">The X coordinate of the point.</param>
            <param name="centerY">The Y coordinate of the point.</param>
            <returns>The rotated <see cref="T:C1.Win.Interop.Matrix"/> structure.</returns>
        </member>
        <member name="M:C1.Win.Interop.MatrixUtil.Rotate(System.Double)">
            <summary>
            Returns <see cref="T:C1.Win.Interop.Matrix"/> rotated in clockwise direction.
            </summary>
            <param name="angleDeg">The rotation angle in degrees.</param>
            <returns>The rotated <see cref="T:C1.Win.Interop.Matrix"/> structure.</returns>
        </member>
        <member name="M:C1.Win.Interop.C1Colors.IsVisible(System.Drawing.Color)">
            <summary>
            Returns a value indicating whether specified Color value represents
            some "visible" value, for example, this function returns <b>false</b> for
            transparent color.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Interop.C1Colors.AreColorsEqual(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Returns true if two colors are equal.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Interop.C1Colors.FromOle(System.Int32)">
            <summary>
            Creates a new Color structure from specified integer.
            NOTE, this function assumes that integer has BBGGRR format.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Interop.C1Colors.FromOleAlpha(System.Int32)">
            <summary>
            Creates a new Color structure from specified integer.
            NOTE, this function assumes that integer has AABBGGRR format.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.Interop.Matrix">
            <summary>
            Represents transformation matrix.
            </summary>
        </member>
        <member name="F:C1.Win.Interop.Matrix.Identity">
            <summary>
            Gets the identity matrix.
            </summary>
            <value>The identity matrix.</value>
        </member>
        <member name="F:C1.Win.Interop.Matrix.M11">
            <summary>
            Element (1,1)
            </summary>
        </member>
        <member name="F:C1.Win.Interop.Matrix.M12">
            <summary>
            Element (1,2)
            </summary>
        </member>
        <member name="F:C1.Win.Interop.Matrix.M21">
            <summary>
            Element (2,1)
            </summary>
        </member>
        <member name="F:C1.Win.Interop.Matrix.M22">
            <summary>
            Element (2,2)
            </summary>
        </member>
        <member name="F:C1.Win.Interop.Matrix.OffsetX">
            <summary>
            Element (3,1)
            </summary>
        </member>
        <member name="F:C1.Win.Interop.Matrix.OffsetY">
            <summary>
            Element (3,2)
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Interop.Matrix"/> struct.
            </summary>
            <param name="M11">The value to assign at row 1 column 1 of the matrix.</param>
            <param name="M12">The value to assign at row 1 column 2 of the matrix.</param>
            <param name="M21">The value to assign at row 2 column 1 of the matrix.</param>
            <param name="M22">The value to assign at row 2 column 2 of the matrix.</param>
            <param name="offsetX">The value to assign at row 3 column 1 of the matrix.</param>
            <param name="offsetY">The value to assign at row 3 column 2 of the matrix.</param>
        </member>
        <member name="M:C1.Win.Interop.Matrix.ToString">
            <summary>
            Returns string representation of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.Interop.Matrix.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity matrix.
            </summary>
            <value>
            <c>true</c> if this instance is an identity matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:C1.Win.Interop.Matrix.Transform(C1.Win.Interop.Point)">
            <summary>
            Transforms a point by this matrix.
            </summary>
            <param name="point">The original point to apply the transformation.</param>
            <returns>The result of the transformation for the input point.</returns>
        </member>
        <member name="M:C1.Win.Interop.Matrix.Transform(System.Double,System.Double)">
            <summary>
            Transforms a point by this matrix.
            </summary>
            <param name="x">The x coordinate of the point.</param>
            <param name="y">The y coordinate of the point.</param>
            <returns>The result of the transformation for the point.</returns>
        </member>
        <member name="M:C1.Win.Interop.Matrix.Multiply(C1.Win.Interop.Matrix@,C1.Win.Interop.Matrix@)">
            <summary>
            Multiplies the current matrix by another matrix passed as parameter,
            returns the resulting matrix in the output parameter.
            </summary>
            <param name="right">The matrix to multiply the current by (the right matrix in the multiplication).</param>
            <param name="result">The product of multiplying the two matrices.</param>
        </member>
        <member name="M:C1.Win.Interop.Matrix.Multiply(C1.Win.Interop.Matrix)">
            <summary>
            Multiplies the current matrix by another matrix passed as parameter.
            </summary>
            <param name="right">The matrix to multiply the current by (the right matrix in the multiplication).</param>
            <returns>The product of multiplying the two matrices.</returns>
        </member>
        <member name="T:C1.Win.Interop.Point">
            <summary>
            Represents an ordered pair of <b>double</b> X and Y coordinates that defines a point 
            in a two-dimensional plane.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Point.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Interop.Point"/> structure.
            </summary>
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The vertical position of the point.</param>
        </member>
        <member name="M:C1.Win.Interop.Point.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Point.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Point.ToString">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Point"/> to a human readable string. 
            </summary>
            <returns>A string that represents the current <see cref="T:C1.Win.Interop.Point"/> structure.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.Ceiling">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Point"/> structure to a <see cref="T:System.Drawing.Point"/> by rounding the 
            <b>double</b> coordinates to the next higher integer values. 
            </summary>
            <returns>The <see cref="T:C1.Win.Interop.Point"/> structure this method converts to.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.Truncate">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Point"/> structure to a <see cref="T:System.Drawing.Point"/> by truncating
            the values of the Point object. 
            </summary>
            <returns>The <see cref="T:C1.Win.Interop.Point"/> structure this method converts to.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.Offset(System.Double,System.Double)">
            <summary>
            Offsets the current <see cref="T:C1.Win.Interop.Point"/> structure by the specified values.
            </summary>
            <param name="dx">The horizontal offset.</param>
            <param name="dy">The vertical offset.</param>
        </member>
        <member name="M:C1.Win.Interop.Point.ToPointF">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Point"/> structure to a <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <returns>The <see cref="T:System.Drawing.PointF"/> structure this method converts to.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.Add(C1.Win.Interop.Point,C1.Win.Interop.Size)">
            <summary>
            Adds a <see cref="T:C1.Win.Interop.Size"/> to a <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
            <param name="pt">The <see cref="T:C1.Win.Interop.Point"/> that is added.</param>
            <param name="sz">The <see cref="T:C1.Win.Interop.Size"/> that is added.</param>
            <returns>A <see cref="T:C1.Win.Interop.Point"/> representing the result of the addition.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.Substract(C1.Win.Interop.Point,C1.Win.Interop.Size)">
            <summary>
            Subtracts a <see cref="T:C1.Win.Interop.Size"/> from a <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
            <param name="pt">The <see cref="T:C1.Win.Interop.Point"/> that is subtracted from.</param>
            <param name="sz">The <see cref="T:C1.Win.Interop.Size"/> that is subtracted.</param>
            <returns>A <see cref="T:C1.Win.Interop.Point"/> representing the result of the subtraction.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.op_Implicit(System.Drawing.Point)~C1.Win.Interop.Point">
            <summary>
            Converts a <see cref="T:System.Drawing.Point"/> to a <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
            <param name="value">The <see cref="T:C1.Win.Interop.Point"/> to convert.</param>
            <returns>The converted <see cref="T:C1.Win.Interop.Point"/>.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.op_Implicit(System.Drawing.PointF)~C1.Win.Interop.Point">
            <summary>
            Converts a <see cref="T:System.Drawing.PointF"/> to a <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
            <param name="value">The <see cref="T:System.Drawing.PointF"/> to convert.</param>
            <returns>The converted <see cref="T:C1.Win.Interop.Point"/>.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.op_Explicit(C1.Win.Interop.Point)~C1.Win.Interop.Size">
            <summary>
            Converts a <see cref="T:C1.Win.Interop.Point"/> to a <see cref="T:C1.Win.Interop.Size"/>.
            </summary>
            <param name="value">The <see cref="T:C1.Win.Interop.Point"/> to convert.</param>
            <returns>The converted <see cref="T:C1.Win.Interop.Size"/>.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.op_Addition(C1.Win.Interop.Point,C1.Win.Interop.Size)">
            <summary>
            Adds a <see cref="T:C1.Win.Interop.Size"/> to a <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
            <param name="pt">The <see cref="T:C1.Win.Interop.Point"/> that is added.</param>
            <param name="sz">The <see cref="T:C1.Win.Interop.Size"/> that is added.</param>
            <returns>A <see cref="T:C1.Win.Interop.Point"/> representing the result of the addition.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.op_Subtraction(C1.Win.Interop.Point,C1.Win.Interop.Size)">
            <summary>
            Subtracts a <see cref="T:C1.Win.Interop.Size"/> from a <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
            <param name="pt">The <see cref="T:C1.Win.Interop.Point"/> that is subtracted from.</param>
            <param name="sz">The <see cref="T:C1.Win.Interop.Size"/> that is subtracted.</param>
            <returns>A <see cref="T:C1.Win.Interop.Point"/> representing the result of the subtraction.</returns>
        </member>
        <member name="M:C1.Win.Interop.Point.op_Equality(C1.Win.Interop.Point,C1.Win.Interop.Point)">
            <summary>
            Indicates whether two <see cref="T:C1.Win.Interop.Point"/> structures are equal.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Point.op_Inequality(C1.Win.Interop.Point,C1.Win.Interop.Point)">
            <summary>
            Indicates whether two <see cref="T:C1.Win.Interop.Point"/> structures are not equal.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Point.X">
            <summary>
            Gets or sets the X coordinate of the current <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Point.Y">
            <summary>
            Gets or sets the Y coordinate of the current <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Point.IsEmpty">
            <summary>
            Gets a value indicating whether the current <see cref="T:C1.Win.Interop.Point"/> is empty.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Point.Empty">
            <summary>
            Represents an empty instance of the <see cref="T:C1.Win.Interop.Point"/> structure.
            </summary>
        </member>
        <member name="T:C1.Win.Interop.Rect">
            <summary>
            Stores a set of four <b>double</b> values that represent the location and size of a rectangle.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Rect.#ctor(C1.Win.Interop.Point,C1.Win.Interop.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
            <param name="location">The location (coordinates of the top left corner) of the rectangle.</param>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:C1.Win.Interop.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
            <param name="x">The X coordinate of the left side of the rectangle.</param>
            <param name="y">The Y coordinate of the top side of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.Win.Interop.Rect.#ctor(C1.Win.Interop.Point,C1.Win.Interop.Point)">
            Initializes a new instance of the <see cref="T:C1.Win.Interop.Rect"/> structure that is exactly
            large enough to contain the two specified points.
            <summary>
            
            </summary>
            <param name="point1">The first point that the new rectangle must contain.</param>
            <param name="point2">The second point that the new rectangle must contain.</param>
        </member>
        <member name="M:C1.Win.Interop.Rect.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Rect.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Rect.Deflate(C1.Win.Interop.Thickness)">
            <summary>
            Deflates the current <see cref="T:C1.Win.Interop.Rect"/> by the specified amounts provided as <see cref="T:C1.Win.Interop.Thickness"/>.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Rect.ToString">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Rect"/> structure to a human-readable string representing it.
            </summary>
            <returns>The string representing the current <see cref="T:C1.Win.Interop.Rect"/>.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Contains(C1.Win.Interop.Point)">
            <summary>
            Tests whether the specified point is contained within the current <see cref="T:C1.Win.Interop.Rect"/>.
            </summary>
            <param name="pt">The <see cref="T:C1.Win.Interop.Point"/> to test.</param>
            <returns><b>true</b> if <paramref name="pt"/> is contained within the current <see cref="T:C1.Win.Interop.Rect"/> structure,
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Contains(C1.Win.Interop.Rect)">
            <summary>
            Tests whether the specified rectangle is entirely contained within the current <see cref="T:C1.Win.Interop.Rect"/>.
            </summary>
            <param name="rc">The <see cref="T:C1.Win.Interop.Rect"/> to test.</param>
            <returns><b>true</b> if <paramref name="rc"/> is completely contained within the current <see cref="T:C1.Win.Interop.Rect"/> structure,
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Contains(System.Double,System.Double)">
            <summary>
            Tests whether a point specified by its coordinates is contained within the current <see cref="T:C1.Win.Interop.Rect"/>.
            </summary>
            <param name="x">The X coordinate of the point to test.</param>
            <param name="y">The Y coordinate of the point to test.</param>
            <returns><b>true</b> if the specified point is contained within the current <see cref="T:C1.Win.Interop.Rect"/> structure,
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Inflate(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Inflates the current <see cref="T:C1.Win.Interop.Rect"/> by the specified amounts on four sides.
            </summary>
            <param name="left">The amount to add on the left.</param>
            <param name="top">The amount to add at the top.</param>
            <param name="right">The amount to add on the right.</param>
            <param name="bottom">The amount to add on the bottom.</param>
        </member>
        <member name="M:C1.Win.Interop.Rect.Inflate(C1.Win.Interop.Size)">
            <summary>
            Inflates the current <see cref="T:C1.Win.Interop.Rect"/> by a specified <see cref="P:C1.Win.Interop.Rect.Size"/>.
            </summary>
            <param name="size">The <see cref="P:C1.Win.Interop.Rect.Size"/> to inflate the current rectangle by.</param>
        </member>
        <member name="M:C1.Win.Interop.Rect.Inflate(System.Double,System.Double)">
            <summary>
            Inflates the current <see cref="T:C1.Win.Interop.Rect"/> by specified horizontal and vertical amounts.
            </summary>
            <param name="x">The amount to add on the left and right of the current <see cref="T:C1.Win.Interop.Rect"/>.</param>
            <param name="y">The amount to add at the top and bottom of the current <see cref="T:C1.Win.Interop.Rect"/>.</param>
        </member>
        <member name="M:C1.Win.Interop.Rect.Intersect(C1.Win.Interop.Rect)">
            <summary>
            Replaces the current <see cref="T:C1.Win.Interop.Rect"/> structure with the intersection
            of itself and another <see cref="T:C1.Win.Interop.Rect"/>.
            </summary>
            <param name="rect">The <see cref="T:C1.Win.Interop.Rect"/> to intersect the current one with.</param>
        </member>
        <member name="M:C1.Win.Interop.Rect.IntersectsWith(C1.Win.Interop.Rect)">
            <summary>
            Tests whether the current <see cref="T:C1.Win.Interop.Rect"/> intersects with another.
            </summary>
            <param name="rc">The <see cref="T:C1.Win.Interop.Rect"/> to test.</param>
            <returns><b>true</b> if the current <see cref="T:C1.Win.Interop.Rect"/> intersects with <paramref name="rc"/>, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Offset(System.Double,System.Double)">
            <summary>
            Offsets the location of the current <see cref="T:C1.Win.Interop.Rect"/> by specified horizontal and vertical amounts.
            </summary>
            <param name="x">The horizontal offset to apply.</param>
            <param name="y">The vertical offset to apply.</param>
        </member>
        <member name="M:C1.Win.Interop.Rect.Offset(C1.Win.Interop.Point)">
            <summary>
            Offsets the location of the current <see cref="T:C1.Win.Interop.Rect"/> by horizontal and vertical amounts specified by a <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
            <param name="pt">The <see cref="T:C1.Win.Interop.Point"/> specifying the horizontal and vertical offsets to apply.</param>
        </member>
        <member name="M:C1.Win.Interop.Rect.ToRectangleF">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Rect"/> to a <see cref="T:System.Drawing.RectangleF"/>.
            </summary>
            <returns>The converted <see cref="T:System.Drawing.RectangleF"/> structure.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.ToRectangle">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Rect"/> to a <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <returns>The converted <see cref="T:System.Drawing.Rectangle"/> structure.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.op_Equality(C1.Win.Interop.Rect,C1.Win.Interop.Rect)">
            <summary>
            Indicates whether two <see cref="T:C1.Win.Interop.Rect"/> structures are equal.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Rect.op_Inequality(C1.Win.Interop.Rect,C1.Win.Interop.Rect)">
            <summary>
            Indicates whether two <see cref="T:C1.Win.Interop.Rect"/> structures are not equal.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Rect.op_Implicit(System.Drawing.Rectangle)~C1.Win.Interop.Rect">
            <summary>
            Converts a <see cref="T:System.Drawing.Rectangle"/> to a <see cref="T:C1.Win.Interop.Rect"/>.
            </summary>
            <param name="value">The <see cref="T:System.Drawing.Rectangle"/> to convert.</param>
            <returns>The converted <see cref="T:C1.Win.Interop.Rect"/> structure.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.op_Implicit(System.Drawing.RectangleF)~C1.Win.Interop.Rect">
            <summary>
            Converts a <see cref="T:System.Drawing.RectangleF"/> to a <see cref="T:C1.Win.Interop.Rect"/>.
            </summary>
            <param name="value">The <see cref="T:System.Drawing.RectangleF"/> to convert.</param>
            <returns>The converted <see cref="T:C1.Win.Interop.Rect"/> structure.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Parse(System.String,C1.Win.Interop.Rect@,System.Boolean)">
            <summary>
            Converts a string to a <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="result">OUT: the created <see cref="T:C1.Win.Interop.Rect"/> structure.</param>
            <param name="throwException">Indicates whether an exception should be thrown if the string cannot be converted.</param>
            <returns><b>true</b> if no error occurred, <b>false</b> otherwise (if <paramref name="throwException"/> is <b>false</b>).</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:C1.Win.Interop.Rect"/> structure based on the coordinates
            of its top-left and bottom-right corners.
            </summary>
            <param name="left">The X coordinate of the upper-left corner of the rectangular region.</param>
            <param name="top">The Y coordinate of the upper-left corner of the rectangular region.</param>
            <param name="right">The X coordinate of the lower-right corner of the rectangular region.</param>
            <param name="bottom">The Y coordinate of the lower-right corner of the rectangular region.</param>
            <returns>The newly created <see cref="T:C1.Win.Interop.Rect"/> structure.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Inflate(C1.Win.Interop.Rect,System.Double,System.Double)">
            <summary>
            Creates a new <see cref="T:C1.Win.Interop.Rect"/> structure from another <b>RectangleD</b>,
            inflated by the specified amounts vertically and horizontally.
            </summary>
            <param name="rc">The <see cref="T:C1.Win.Interop.Rect"/> a copy of which is created and inflated.</param>
            <param name="x">The amount by which to inflate the resulting rectangle horizontally.</param>
            <param name="y">The amount by which to inflate the resulting rectangle vertically.</param>
            <returns>The newly created <see cref="T:C1.Win.Interop.Rect"/> structure.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Intersect(C1.Win.Interop.Rect,C1.Win.Interop.Rect)">
            <summary>
            Creates a new <see cref="T:C1.Win.Interop.Rect"/> structure representing the intersection
            of two <b>RectangleD</b> structures.
            (The intersection may be empty, in which case <see cref="P:C1.Win.Interop.Rect.Empty"/> is returned.)
            </summary>
            <param name="a">The first <see cref="T:C1.Win.Interop.Rect"/> to intersect.</param>
            <param name="b">The second <see cref="T:C1.Win.Interop.Rect"/> to intersect.</param>
            <returns>The newly created <see cref="T:C1.Win.Interop.Rect"/> structure.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Offset(C1.Win.Interop.Rect,C1.Win.Interop.Point)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="r">The rectangle to adjust.</param>
            <param name="offset">Amount to offset the location.</param>
            <returns>The adjusted rectangle.</returns>
        </member>
        <member name="M:C1.Win.Interop.Rect.Union(C1.Win.Interop.Rect,C1.Win.Interop.Rect)">
            <summary>
            Creates a new <see cref="T:C1.Win.Interop.Rect"/> structure representing the smallest possible
            rectangle containing the two specified rectangles.
            </summary>
            <param name="a">The first <see cref="T:C1.Win.Interop.Rect"/> to combine.</param>
            <param name="b">The second <see cref="T:C1.Win.Interop.Rect"/> to combine.</param>
            <returns>The newly created <see cref="T:C1.Win.Interop.Rect"/> structure.</returns>
        </member>
        <member name="P:C1.Win.Interop.Rect.X">
            <summary>
            Gets or sets the X coordinate of the top left corner of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Y">
            <summary>
            Gets or sets the Y coordinate of the top left corner of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Width">
            <summary>
            Gets or sets the width of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Height">
            <summary>
            Gets or sets the height of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Left">
            <summary>
            Gets the X coordinate of the left edge of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Top">
            <summary>
            Gets the Y coordinate of the top edge of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Right">
            <summary>
            Gets the X coordinate of the right edge of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Bottom">
            <summary>
            Gets the Y coordinate of the bottom edge of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Location">
            <summary>
            Gets or sets the coordinates of the top left corner of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Size">
            <summary>
            Gets or sets the size of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.IsEmpty">
            <summary>
            Gets a value indicating whether the <see cref="P:C1.Win.Interop.Rect.Width"/> and <see cref="P:C1.Win.Interop.Rect.Height"/>
            properties of the current <see cref="T:C1.Win.Interop.Rect"/> structure have zero values.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.TopLeft">
            <summary>
            Gets the coordinates of the top left corner of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.TopRight">
            <summary>
            Gets the coordinates of the top right corner of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.BottomRight">
            <summary>
            Gets the coordinates of the bottom right corner of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.BottomLeft">
            <summary>
            Gets the coordinates of the bottom left corner of the current <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Rect.Empty">
            <summary>
            Represents an empty instance of the <see cref="T:C1.Win.Interop.Rect"/> structure.
            </summary>
        </member>
        <member name="T:C1.Win.Interop.Size">
            <summary>
            Stores an ordered pair of <b>double</b> values, typically the width and height of a rectangle.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Size.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Interop.Size"/> structure.
            </summary>
            <param name="width">The horizontal component of the <see cref="T:C1.Win.Interop.Size"/>.</param>
            <param name="height">The vertical component of the <see cref="T:C1.Win.Interop.Size"/>.</param>
        </member>
        <member name="M:C1.Win.Interop.Size.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Size.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Size.ToString">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Size"/> structure to a human-readable string representing it.
            </summary>
            <returns>The string representing the current <see cref="T:C1.Win.Interop.Size"/>.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.Ceiling">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Size"/> structure to a <see cref="T:C1.Win.Interop.Point"/> by rounding the 
            width and height to the next higher integer values. 
            </summary>
            <returns>The <see cref="T:C1.Win.Interop.Size"/> structure this method converts to.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.Truncate">
            <summary>
            Converts the current <see cref="T:C1.Win.Interop.Size"/> structure to a <see cref="T:C1.Win.Interop.Point"/> by truncating the 
            width and height to integer values. 
            </summary>
            <returns>The <see cref="T:C1.Win.Interop.Size"/> structure this method converts to.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.op_Implicit(System.Drawing.Size)~C1.Win.Interop.Size">
            <summary>
            Converts a <see cref="T:System.Drawing.Size"/> to a <see cref="T:C1.Win.Interop.Size"/>.
            </summary>
            <param name="value">The <see cref="T:C1.Win.Interop.Size"/> to convert.</param>
            <returns>The converted <see cref="T:C1.Win.Interop.Size"/>.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.op_Implicit(System.Drawing.SizeF)~C1.Win.Interop.Size">
            <summary>
            Converts a <see cref="T:System.Drawing.SizeF"/> to a <see cref="T:C1.Win.Interop.Size"/>.
            </summary>
            <param name="value">The <see cref="T:System.Drawing.SizeF"/> to convert.</param>
            <returns>The converted <see cref="T:C1.Win.Interop.Size"/>.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.op_Explicit(C1.Win.Interop.Size)~C1.Win.Interop.Point">
            <summary>
            Converts a <see cref="T:C1.Win.Interop.Size"/> to a <see cref="T:C1.Win.Interop.Point"/>.
            </summary>
            <param name="value">The <see cref="T:C1.Win.Interop.Size"/> to convert.</param>
            <returns>The converted <see cref="T:C1.Win.Interop.Point"/>.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.Parse(System.String,C1.Win.Interop.Size@,System.Boolean)">
            <summary>
            Converts a string to a <see cref="T:C1.Win.Interop.Size"/> structure.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="result">OUT: the created <see cref="T:C1.Win.Interop.Size"/> structure.</param>
            <param name="throwException">Indicates whether an exception should be thrown if the string cannot be converted.</param>
            <returns><b>true</b> if no error occurred, <b>false</b> otherwise (if <paramref name="throwException"/> is <b>false</b>).</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.Add(C1.Win.Interop.Size,C1.Win.Interop.Size)">
            <summary>
            Adds two <see cref="T:C1.Win.Interop.Size"/> structures.
            </summary>
            <param name="sz1">The first <see cref="T:C1.Win.Interop.Size"/> that is added.</param>
            <param name="sz2">The second <see cref="T:C1.Win.Interop.Size"/> that is added.</param>
            <returns>A <see cref="T:C1.Win.Interop.Size"/> representing the result of the addition.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.Substract(C1.Win.Interop.Size,C1.Win.Interop.Size)">
            <summary>
            Subtracts one <see cref="T:C1.Win.Interop.Size"/> structure from another.
            </summary>
            <param name="sz1">The <see cref="T:C1.Win.Interop.Size"/> that is subtracted from.</param>
            <param name="sz2">The <see cref="T:C1.Win.Interop.Size"/> that is subtracted.</param>
            <returns>A <see cref="T:C1.Win.Interop.Size"/> representing the result of the subtraction.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.op_Subtraction(C1.Win.Interop.Size,C1.Win.Interop.Size)">
            <summary>
            Subtracts one <see cref="T:C1.Win.Interop.Size"/> structure from another.
            </summary>
            <param name="sz1">The <see cref="T:C1.Win.Interop.Size"/> that is subtracted from.</param>
            <param name="sz2">The <see cref="T:C1.Win.Interop.Size"/> that is subtracted.</param>
            <returns>A <see cref="T:C1.Win.Interop.Size"/> representing the result of the subtraction.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.op_Addition(C1.Win.Interop.Size,C1.Win.Interop.Size)">
            <summary>
            Adds two <see cref="T:C1.Win.Interop.Size"/> structures.
            </summary>
            <param name="sz1">The first <see cref="T:C1.Win.Interop.Size"/> that is added.</param>
            <param name="sz2">The second <see cref="T:C1.Win.Interop.Size"/> that is added.</param>
            <returns>A <see cref="T:C1.Win.Interop.Size"/> representing the result of the addition.</returns>
        </member>
        <member name="M:C1.Win.Interop.Size.op_Equality(C1.Win.Interop.Size,C1.Win.Interop.Size)">
            <summary>
            Indicates whether two <see cref="T:C1.Win.Interop.Size"/> structures are equal.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Size.op_Inequality(C1.Win.Interop.Size,C1.Win.Interop.Size)">
            <summary>
            Indicates whether two <see cref="T:C1.Win.Interop.Size"/> structures are not equal.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Size.Width">
            <summary>
            Gets or sets the horizontal component of the current <see cref="T:C1.Win.Interop.Size"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Size.Height">
            <summary>
            Gets or sets the vertical component of the current <see cref="T:C1.Win.Interop.Size"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Size.IsEmpty">
            <summary>
            Gets a value indicating whether of the current <see cref="T:C1.Win.Interop.Size"/> has zero <see cref="P:C1.Win.Interop.Size.Width"/> and <see cref="P:C1.Win.Interop.Size.Height"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Size.Empty">
            <summary>
            Represents an empty instance of the <see cref="T:C1.Win.Interop.Size"/> structure.
            </summary>
        </member>
        <member name="T:C1.Win.Interop.Thickness">
            <summary>
            Describes the thickness of a frame around a rectangle. Four double
            values describe the <see cref="P:C1.Win.Interop.Thickness.Left"/>, <see cref="P:C1.Win.Interop.Thickness.Top"/>,
            <see cref="P:C1.Win.Interop.Thickness.Right"/>, and <see cref="P:C1.Win.Interop.Thickness.Bottom"/> sides
            of the rectangle, respectively.
            </summary>
        </member>
        <member name="F:C1.Win.Interop.Thickness.Empty">
            <summary>
            Represents an empty instance of the <see cref="T:C1.Win.Interop.Thickness"/> structure.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Thickness.#ctor(System.Double)">
            <summary>
            Initializes a <see cref="T:C1.Win.Interop.Thickness"/> structure that has the specified
            uniform length on each side.
            </summary>
            <param name="uniformLength">The uniform length applied to all four sides of the bounding rectangle.</param>
        </member>
        <member name="M:C1.Win.Interop.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a Windows.UI.Xaml.Thickness structure that has specific lengths
            (supplied as a System.Double) applied to each side of the rectangle.
            </summary>
            <param name="left">The thickness for the left side of the rectangle.</param>
            <param name="top">The thickness for the upper side of the rectangle.</param>
            <param name="right">The thickness for the right side of the rectangle.</param>
            <param name="bottom">The thickness for the lower side of the rectangle.</param>
        </member>
        <member name="M:C1.Win.Interop.Thickness.op_Inequality(C1.Win.Interop.Thickness,C1.Win.Interop.Thickness)">
            <summary>
            Compares two <see cref="T:C1.Win.Interop.Thickness"/> structures for inequality.
            </summary>
            <param name="t1">The first structure to compare.</param>
            <param name="t2">The other structure to compare.</param>
            <returns>true if the two instances of Windows.UI.Xaml.Thickness are not equal; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.Interop.Thickness.op_Equality(C1.Win.Interop.Thickness,C1.Win.Interop.Thickness)">
            <summary>
            Compares the value of two <see cref="T:C1.Win.Interop.Thickness"/> structures for equality.
            </summary>
            <param name="t1">The first structure to compare.</param>
            <param name="t2">The other structure to compare.</param>
            <returns>true if the two instances of Windows.UI.Xaml.Thickness are equal; otherwise, false.</returns>
        </member>
        <member name="P:C1.Win.Interop.Thickness.Bottom">
            <summary>
            Gets or sets the width, of the lower side of the bounding rectangle.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Thickness.Left">
            <summary>
            Gets or sets the width, of the left side of the bounding rectangle.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Thickness.Right">
            <summary>
            Gets or sets the width, of the right side of the bounding rectangle.
            </summary>
        </member>
        <member name="P:C1.Win.Interop.Thickness.Top">
            <summary>
            Gets or sets the width, of the upper side of the bounding rectangle.
            </summary>
        </member>
        <member name="M:C1.Win.Interop.Thickness.Equals(System.Object)">
            <summary>
            Compares this Windows.UI.Xaml.Thickness structure to another System.Object
            for equality.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>true if the two objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.Interop.Thickness.Equals(C1.Win.Interop.Thickness)">
            <summary>
            Compares this Windows.UI.Xaml.Thickness structure to another <see cref="T:C1.Win.Interop.Thickness"/>
            structure for equality.
            </summary>
            <param name="thickness">An instance of <see cref="T:C1.Win.Interop.Thickness"/> to compare for equality.</param>
            <returns>true if the two instances of Windows.UI.Xaml.Thickness are equal; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.Interop.Thickness.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance of <see cref="T:C1.Win.Interop.Thickness"/>.</returns>
        </member>
        <member name="M:C1.Win.Interop.Thickness.ToString">
            <summary>
            Returns the string representation of the <see cref="T:C1.Win.Interop.Thickness"/> structure.
            </summary>
            <returns>A string that represents the <see cref="T:C1.Win.Interop.Thickness"/> value.</returns>
        </member>
        <member name="T:C1.Win.Collections.ObjectModel.ObservableKeyValuePair`2">
            <summary>
            Defines a key/value pair that can be set or retrieved.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="P:C1.Win.Collections.ObjectModel.ObservableKeyValuePair`2.Key">
            <summary>
            Gets the key in the key/value pair.
            </summary>
        </member>
        <member name="P:C1.Win.Collections.ObjectModel.ObservableKeyValuePair`2.Value">
            <summary>
            Gets the value in the key/value pair.
            </summary>
        </member>
        <member name="E:C1.Win.Collections.ObjectModel.ObservableKeyValuePair`2.PropertyChanged">
            <inheritdoc cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
        </member>
        <member name="M:C1.Win.Collections.ObjectModel.ObservableKeyValuePair`2.OnPropertyChanged(System.String)">
            <summary>
            Fires the <see cref="E:C1.Win.Collections.ObjectModel.ObservableKeyValuePair`2.PropertyChanged"/> event.
            </summary>        
        </member>
        <member name="T:C1.Win.Collections.ObjectModel.ObservableDictionary`2">
            <summary>
            Represents a generic collection of key/value pairs that provides notifications when items get added, removed,
            changed or when the whole list is refreshed.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="M:C1.Win.Collections.ObjectModel.ObservableDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:C1.Win.Collections.ObjectModel.ObservableDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="P:C1.Win.Collections.ObjectModel.ObservableDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:C1.Win.Collections.ObjectModel.ObservableDictionary`2"/>.
            </summary>
        </member>
        <member name="M:C1.Win.Collections.ObjectModel.ObservableDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:C1.Win.Collections.ObjectModel.ObservableDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:C1.Win.Collections.ObjectModel.ObservableDictionary`2"/>.</param>
            <returns>true if the <see cref="T:C1.Win.Collections.ObjectModel.ObservableDictionary`2"/> contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.Collections.ObjectModel.ObservableDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:C1.Win.Collections.ObjectModel.ObservableDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false. This method also returns false if key was not found 
            in the original <see cref="T:C1.Win.Collections.ObjectModel.ObservableDictionary`2"/>.</returns>
        </member>
        <member name="M:C1.Win.Collections.ObjectModel.ObservableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise,
            the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the object that implements <see cref="T:C1.Win.Collections.ObjectModel.ObservableDictionary`2"/> contains an element with the specified key; 
            otherwise, false.</returns>
        </member>
        <member name="P:C1.Win.Collections.ObjectModel.ObservableDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:C1.Win.Collections.ObjectModel.ObservableDictionary`2"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Collections.ObjectModel.ObservableDictionary`2.Item(`0)">
            <summary>
             Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <returns>The element with the specified key.</returns>        
        </member>
        <member name="M:C1.Win.Collections.ObjectModel.ObservableDictionary`2.GetEnumerator">
            <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.GetEnumerator"/>
        </member>
        <member name="E:C1.Win.Collections.ObjectModel.ObservableDictionary`2.ItemChanged">
            <summary>
            Occurs when a item value changes.
            </summary>
        </member>
        <member name="M:C1.Win.Collections.ObjectModel.ObservableDictionary`2.OnItemChanged(C1.Win.Collections.ObjectModel.ItemChangedEventArgs{C1.Win.Collections.ObjectModel.ObservableKeyValuePair{`0,`1}})">
            <summary>
            Fires the <see cref="E:C1.Win.Collections.ObjectModel.ObservableDictionary`2.ItemChanged"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.Collections.ObjectModel.ObservableDictionary`2.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Collections.ObjectModel.ObservableDictionary`2.InsertItem(System.Int32,C1.Win.Collections.ObjectModel.ObservableKeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Collections.ObjectModel.ObservableDictionary`2.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.Collections.ObjectModel.ObservableDictionary`2.SetItem(System.Int32,C1.Win.Collections.ObjectModel.ObservableKeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.Collections.ObjectModel.ItemChangedEventArgs`1">
            <summary>
            Provides data for the <see cref="E:C1.Win.Collections.ObjectModel.ObservableDictionary`2.ItemChanged"/> event.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:C1.Win.Collections.ObjectModel.ItemChangedEventArgs`1.Item">
            <summary>
            Gets a changed item.
            </summary>
        </member>
        <member name="T:C1.Win.CoditionalFormatting.IFormattableView">
            <summary>
            Defines events and methods for integration with the C1RulesManager control.
            </summary>
        </member>
        <member name="E:C1.Win.CoditionalFormatting.IFormattableView.DataChanged">
            <summary>
            Fires after any data change notifications.
            </summary>
        </member>
        <member name="E:C1.Win.CoditionalFormatting.IFormattableView.ItemFormatting">
            <summary>
            Occurs when you need to format the contents of an item to display.
            </summary>
        </member>
        <member name="M:C1.Win.CoditionalFormatting.IFormattableView.UpdateView">
            <summary>
            Called when conditional formatting has been changed and view need to be redrawn.
            </summary>
        </member>
        <member name="M:C1.Win.CoditionalFormatting.IFormattableView.GetFieldNames">
            <summary>
            Gets a names of fields.
            </summary>
        </member>
        <member name="M:C1.Win.CoditionalFormatting.IFormattableView.GetItemCount">
            <summary>
            Gets a count of data items.
            </summary>
        </member>
        <member name="M:C1.Win.CoditionalFormatting.IFormattableView.GetValue(System.Int32,System.String)">
            <summary>
            Returns the value of the specified item.
            </summary>
            <param name="item">Specified item index.</param>
            <param name="field">Specified field name.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.CoditionalFormatting.IItemStyle">
            <summary>
            Represents item conditional formatting style.
            </summary> 
        </member>
        <member name="P:C1.Win.CoditionalFormatting.IItemStyle.FontStyle">
            <summary>
            Text font style.
            </summary>
        </member>
        <member name="P:C1.Win.CoditionalFormatting.IItemStyle.TextAlignment">
            <summary>
            Alignment of the text.
            </summary>
        </member>
        <member name="P:C1.Win.CoditionalFormatting.IItemStyle.Icon">
            <summary>
            Cell icon.
            </summary>
        </member>
        <member name="P:C1.Win.CoditionalFormatting.IItemStyle.ForeColor">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="P:C1.Win.CoditionalFormatting.IItemStyle.BackColor">
            <summary>
            Text background color.
            </summary>
        </member>
        <member name="P:C1.Win.CoditionalFormatting.IItemStyle.BorderColor">
            <summary>
            Cell border color.
            </summary>
        </member>
        <member name="M:C1.Win.CoditionalFormatting.IItemStyle.GetHistogramImage(System.Drawing.Rectangle)">
            <summary>
            Represents a Histogram.
            </summary>
        </member>
        <member name="T:C1.Win.CoditionalFormatting.ItemFormattingEventArgs">
            <summary>
            Contains data for the conditional formatting event.
            </summary>
        </member>
        <member name="M:C1.Win.CoditionalFormatting.ItemFormattingEventArgs.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.CoditionalFormatting.ItemFormattingEventArgs"/>.
            </summary>
            <param name="item">Specified item index.</param>
            <param name="field">Specified field name.</param>
        </member>
        <member name="P:C1.Win.CoditionalFormatting.ItemFormattingEventArgs.Style">
            <summary>
            Gets or sets the style of the formatted cell.
            </summary>
        </member>
        <member name="P:C1.Win.CoditionalFormatting.ItemFormattingEventArgs.Item">
            <summary>
            Gets or sets the index of the index of the item to be formatted.
            </summary>
        </member>
        <member name="P:C1.Win.CoditionalFormatting.ItemFormattingEventArgs.Field">
            <summary>
            Gets or sets the name of the current field of the formatted element.
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.Design.HtmlTextBox">
            <summary>
            Specialized TextBox used to edit HTML content.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.HtmlTextBox.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:C1.Win.C1SuperTooltip.Design.HtmlTextBox"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.Design.HtmlTextBox.WordWrap">
            <summary>
            Override to change the default.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.HtmlTextBox.InsertTag(System.String)">
            <summary>
            Insert a span tag around the current selection.
            </summary>
            <param name="tag">Tag to insert (e.g. "b", "i").</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.HtmlTextBox.InsertList(System.Boolean)">
            <summary>
            Insert a list at the selection.
            </summary>
            <param name="ordered">True to insert a numbered list, false to insert a bullet list.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.HtmlTextBox.InsertImage(System.String)">
            <summary>
            Insert an image at the selection.
            </summary>
            <param name="image">Name of the image to insert.</param>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.Design.LabelBaseEditorForm">
            <summary>
            Wizard used to edit SuperLabel contents.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.LabelBaseEditorForm.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.C1SuperTooltip.Design.LabelBaseEditorForm"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.LabelBaseEditorForm.InitializeLabelForm">
            <summary>
            Initializes the Form elements.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.LabelBaseEditorForm.GetNewImage">
            <summary>
            Creates a new entry in the Images collection.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.Design.LabelBaseEditorForm.OwnerLabel">
            <summary>
            Gets or sets the owner label. Used to copy styles to label on the form.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.Design.LabelBaseEditorForm.Context">
            <summary>
            Gets or sets an ITypeDescriptorContext that can be used to gain additional context information.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.Design.LabelBaseEditorForm.Images">
            <summary>
            Gets or sets the collection for storing images.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.Design.LabelBaseEditorForm.PreviewLabel">
            <summary>
            Gets a reference to the preview label
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.Design.LabelBaseEditorForm.EditValue">
            <summary>
            Gets or sets the value of label text.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.LabelBaseEditorForm.OnLoad(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.LabelBaseEditorForm.OnClosed(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.LabelBaseEditorForm.UpdateLabelStyle">
            <summary>
            Update the label style to reflect the owner label properties.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.Design.LabelBaseEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.LabelBaseEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.LabelBaseEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.Design.OfficeTemplate.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.OfficeTemplate.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.OfficeTemplate.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.Design.PlainHtmlTemplate.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.PlainHtmlTemplate.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.PlainHtmlTemplate.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1SuperTooltip.Design.TooltipBaseEditorForm">
            <summary>
            Wizard used to edit SuperTooltip contents.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.TooltipBaseEditorForm.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.C1SuperTooltip.Design.TooltipBaseEditorForm"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.TooltipBaseEditorForm.InitializeTooltipForm">
            <summary>
            Initializes the Form elements.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.TooltipBaseEditorForm.UpdateImages">
            <summary>
            Updates images in the Images collection and PreviewLabel control.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.TooltipBaseEditorForm.GetNewImage">
            <summary>
            Creates a new entry in the Images collection.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.TooltipBaseEditorForm.SaveTooltipSettings">
            <summary>
            When overridden saves the current settings of the tooltip to an internal array.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.TooltipBaseEditorForm.LoadTooltipSettings">
            <summary>
            When overridden restores the previous tooltip settings.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.Design.TooltipBaseEditorForm.OwnerTip">
            <summary>
            Gets or sets the owner tooltip. Used to copy styles to label on the form.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.Design.TooltipBaseEditorForm.Context">
            <summary>
            Gets or sets an ITypeDescriptorContext that can be used to gain additional context information.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.Design.TooltipBaseEditorForm.Images">
            <summary>
            Gets or sets the collection for storing images.
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.Design.TooltipBaseEditorForm.PreviewLabel">
            <summary>
            Gets a reference to the preview label
            </summary>
        </member>
        <member name="P:C1.Win.C1SuperTooltip.Design.TooltipBaseEditorForm.EditValue">
            <summary>
            Gets or sets the value of tooltip text.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.TooltipBaseEditorForm.UpdateLabelStyle">
            <summary>
            Update the label style to reflect the owner tooltip properties.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.TooltipBaseEditorForm.OnLoad(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.TooltipBaseEditorForm.OnClosed(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="F:C1.Win.C1SuperTooltip.Design.TooltipBaseEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.TooltipBaseEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.TooltipBaseEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1SuperTooltip.Design.TooltipProperties.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.TooltipProperties.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1SuperTooltip.Design.TooltipProperties.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.IEmbeddedEditor">
            <summary>
            Represents methods for the embedded editor.	
            </summary>
            <remarks>
            <para>If you want to use a third-party editor, consider creating a derived class 
            and implementing this interface.</para>	
            </remarks>
        </member>
        <member name="M:C1.Win.IEmbeddedEditor.Initialize(System.Object,System.Collections.IDictionary)">
            <summary>
            Initializes the editor content and styles.
            </summary>
            <param name="value">The data that should be displayed in the editor.</param>
            <param name="attrs">The dictionary for customizing the appearance and behavior of the editor.
            Supported keys:
            <list type="table">        
                <item>
                    <term>AcceptEscape</term>
                    <description><see cref="T:System.Boolean"/></description>
                </item>
                <item>
                    <term>AcceptReturn</term>
                    <description><see cref="T:System.Boolean"/></description>
                </item>
                <item>
                    <term>AcceptTab</term>
                    <description><see cref="T:System.Boolean"/></description>
                </item>
                <item>
                    <term>DataType</term>
                    <description><see cref="T:System.Type"/></description>
                </item>
                <item>
                    <term>Format</term>
                    <description><see cref="T:System.String"/></description>
                </item>
                <item>
                    <term>HorizontalAlignment</term>
                    <description><see cref="T:System.Windows.Forms.HorizontalAlignment"/></description>
                </item>
                <item>
                    <term>Margins</term>
                    <description><see cref="T:System.Windows.Forms.Padding"/> or <see cref="T:System.Drawing.Printing.Margins"/></description>
                </item>
                <item>
                    <term>MaxLength</term>
                    <description><see cref="T:System.Int32"/></description>
                </item>
                <item>
                    <term>ReadOnly</term>
                    <description><see cref="T:System.Boolean"/></description>
                </item>
                <item>
                    <term>VerticalAlignment</term>
                    <description><see cref="T:System.Windows.Forms.VisualStyles.VerticalAlignment"/></description>
                </item>
                <item>
                    <term>WordWrap</term>
                    <description><see cref="T:System.Boolean"/></description>
                </item>
            </list>
            </param> 
        </member>
        <member name="M:C1.Win.IEmbeddedEditor.GetValue">
            <summary>
            Gets the current value of the editor.
            </summary>
            <returns>The current value of the editor (any data type).</returns>
        </member>
        <member name="M:C1.Win.IEmbeddedEditor.IsValueValid">
            <summary>
            Gets a value that determines if the editor's current contents are valid.
            </summary>
            <returns>True if the editor currently has valid content.</returns>
        </member>
        <member name="M:C1.Win.IEmbeddedEditor.UpdateBounds(System.Drawing.Rectangle)">
            <summary>
            Updates the editor's size and position.
            </summary>
            <param name="rc">The bounds of the cell being edited, in client coordinates.</param>
        </member>
        <member name="M:C1.Win.IEmbeddedEditor.HandleFinishEdit(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Gets a value that determines whether a given key should finalize editing.
            </summary>
            <param name="e">Key to be tested.</param>
            <returns>True if the key should finish the edits and close the editor.</returns>
            <remarks>
            <para>If this method returns true, the grid copies the editor value to the cell and
            exits edit mode. The key is then processed by the grid (unless the <b>e.Handled</b> 
            parameter is set to true).</para>
            <para>For example, pressing the down arrow typically causes the grid to exit edit 
            mode and move the cursor to the next row.</para>
            <para>The default handler returns true for the TAB, ENTER, and ESC keys.
            It also handles the arrow keys for editors based on <b>TextBox</b>, <b>ComboBox</b>, 
            and <b>DateTimePicker</b> controls.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.IEmbeddedEditor.SetFormat(System.String)">
            <summary>
            Sets the format string used to display the value when the control is in edit mode.
            </summary>
            <param name="format">format string uses standard .NET format specifies.</param>
        </member>
        <member name="M:C1.Win.IEmbeddedEditor.GetEditStyle">
            <summary>
            Gets the editor style, which determines the type of button that is displayed in 
            the cell before and during editing (DropDown, Modal, or None).
            </summary>
            <remarks>
            <para>The default handler returns <b>DropDown</b> for ComboBoxes, DateTimePickers, and
            UpDown controls. It returns <b>None</b> for other control types.</para>
            <para>The <b>UITypeEditorEditStyle</b> enumeration is defined in the <b>System.Drawing.Design</b>
            namespace. The available settings are <b>DropDown</b>, <b>Modal</b>, and <b>None</b>.</para>
            </remarks>
        </member>
        <member name="T:C1.Win.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the StringsManager and DesignStrings classes to
            return the localized Attribute string.   
            </summary>
        </member>
        <member name="T:C1.Win.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the StringsManager and DesignStrings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="T:C1.Win.DesignStrings">
            <summary>
            Static class containing UI strings used by the designer.
            </summary>
        </member>
        <member name="P:C1.Win.DesignStrings.ResourceManager">
            <summary>
            The <see cref="P:C1.Win.DesignStrings.ResourceManager"/> object used for lookup resources.
            </summary>
            <remarks>Set this property to the valid value if 
            you define resources in a Custom Control assembly.</remarks>
        </member>
        <member name="P:C1.Win.DesignStrings.UICulture">
            <summary>
            Returns default <see cref="T:System.Globalization.CultureInfo"/> object used as fallback culture.
            </summary>
        </member>
        <member name="T:C1.Win.Strings">
            <summary>
            Static class containing UI strings used in run-time.
            </summary>
        </member>
        <member name="T:C1.Win.LongOperationEventArgs">
            <summary>
            Describes arguments for the event fired periodically by a potentially
            long operation. Allows to provide feedback to the user and may also
            allow to cancel the operation.
            </summary>
        </member>
        <member name="M:C1.Win.LongOperationEventArgs.#ctor">
            <summary>
            Creates a new instance of LongOperationEventArgs with default
            properties (Complete=0, CanCancel=false).
            </summary>
        </member>
        <member name="M:C1.Win.LongOperationEventArgs.#ctor(System.Double)">
            <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified complete value and CanCancel=false.
            </summary>
            <param name="complete">How much is complete (from 0 to 1).</param>
        </member>
        <member name="M:C1.Win.LongOperationEventArgs.#ctor(System.Double,System.Boolean)">
            <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified complete and CanCancel values.
            </summary>
            <param name="complete">How much is complete (from 0 to 1).</param>
            <param name="canCancel">Whether the operation can be cancelled.</param>
        </member>
        <member name="M:C1.Win.LongOperationEventArgs.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified CanCancel value and Complete=0.
            </summary>
            <param name="canCancel">Whether the operation can be cancelled.</param>
        </member>
        <member name="P:C1.Win.LongOperationEventArgs.Complete">
            <summary>
            Gets the approximate completed ratio, from 0 (0% complete) to 1 (100% complete).
            </summary>
        </member>
        <member name="P:C1.Win.LongOperationEventArgs.CanCancel">
            <summary>
            Gets the value indicating whether the event handler can cancel the current long operation
            by setting the <see cref="P:C1.Win.LongOperationEventArgs.Cancel"/> property to <b>true</b>.
            </summary>
        </member>
        <member name="P:C1.Win.LongOperationEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the current long operation
            should be cancelled. (This property is ignored if <see cref="P:C1.Win.LongOperationEventArgs.CanCancel"/> is <b>false</b>.)
            </summary>
        </member>
        <member name="T:C1.Win.LongOperationEventHandler">
            <summary>
            Represents a method that can handle a long operation event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:C1.Win.LongOperationEventArgs"/> that contains event data.</param>
        </member>
        <member name="T:C1.Win.C1ScrollBar.C1HScrollBar">
            <summary>
            A control that mimics the horizontal scrollbar with additional theming support.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1HScrollBar.#ctor">
            <summary>
            Initializes a new instance of a C1HScrollBar.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1HScrollBar.DefaultSize">
            <summary>
            Gets the default Size of the scrollbar.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.C1VScrollBar">
            <summary>
            A control that mimics the vertical scrollbar with additional theming support.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1VScrollBar.#ctor">
            <summary>
            Initializes a new instance of a C1VScrollBar.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1VScrollBar.DefaultSize">
            <summary>
            Gets the default Size of the scrollbar.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.C1ScrollBar">
            <summary>
            A control that mimics the standard scrollbar with additional theming support.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of a C1ScrollBar.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1ScrollBar.Style">
            <summary>
            Gets the style object with constants, brushes, colors, and glyphs.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1ScrollBar.VerticalScroll">
            <summary>
            Gets a boolean value indicating whether this is a vertical scrollbar.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1ScrollBar.UseSystemStyle">
            <summary>
            Gets or sets a boolean value indicating whether the scrollbar should be drawn using the system style.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1ScrollBar.SmoothTransitions">
            <summary>
            Gets or sets a value indicating whether moving from one state to another should be animated.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1ScrollBar.Value">
            <summary>
            Gets or sets a numeric value that represents the current position of the scroll box.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1ScrollBar.Minimum">
            <summary>
            Gets or sets the lower limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1ScrollBar.Maximum">
            <summary>
            Gets or sets the upper limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1ScrollBar.SmallChange">
            <summary>
            Gets or sets the value to be added to or subtracted from the Value property when the scroll box is moved a small distance.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.C1ScrollBar.LargeChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the Value property when the scroll box is moved a large distance.
            </summary>
        </member>
        <member name="E:C1.Win.C1ScrollBar.C1ScrollBar.Scroll">
            <summary>
            Occurs when the scroll box has been moved by a mouse.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1ScrollBar.C1ScrollBar.Scroll"/> event.
            </summary>
        </member>
        <member name="E:C1.Win.C1ScrollBar.C1ScrollBar.ValueChanged">
            <summary>
            Occurs when the Value property is changed, either by a Scroll event or programmatically.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1ScrollBar.C1ScrollBar.ValueChanged"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.ResetThickness">
            <summary>
            Resets the width or height of a C1ScrollBar to its default value.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the scrollbar.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the VisibleChanged event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnSizeChanged(System.EventArgs)">
            <summary>
            Handles the size of scrollbar is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the EnabledChanged event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            Raises the RightToLeftChanged event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Returns the bounds to use when the scrollbar is scaled by a specified amount.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseDown event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseUp event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the MouseEnter event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the MouseLeave event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseMove event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.ThemeChanged(System.Object)">
            <summary>
            Use internal only for theming support.
            </summary>
            <param name="newTheme">The new theme to be applied.</param>
        </member>
        <member name="M:C1.Win.C1ScrollBar.C1ScrollBar.UpdateStyle(C1.Win.Themes.Shared.C1ThemeProxy,C1.Win.C1ScrollBar.Style.ScrollBarStyle)">
            <summary>
            Applies a C1Theme to the scrollBar.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.Style.ScrollBarStyle">
            <summary>
            A customizable set of appearance settings.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.ScrollBarStyle.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Win.C1ScrollBar.Style.ScrollBarStyle"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.ScrollBarStyle.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.Style.ScrollBarStyle.ConstSet">
            <summary>
            Gets the set of named integer constants.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.Style.ScrollBarStyle.BrushSet">
            <summary>
            Gets the set of named brushes.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.Style.ScrollBarStyle.ColorSet">
            <summary>
            Gets the set of named colors.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.Style.ScrollBarStyle.GlyphSet">
            <summary>
            Gets the set of named glyphs.
            </summary>
        </member>
        <member name="E:C1.Win.C1ScrollBar.Style.ScrollBarStyle.StyleChanged">
            <summary>
            Occurs when a <see cref="T:C1.Win.C1ScrollBar.Style.ScrollBarStyle"/> is changed. 
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.ScrollBarStyle.BeginUpdate">
            <summary>
            Maintains performance while <see cref="T:C1.Win.C1ScrollBar.Style.ScrollBarStyle"/> is being changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.ScrollBarStyle.EndUpdate">
            <summary>
            Resumes processing after it has been suspended by a call to <see cref="M:C1.Win.C1ScrollBar.Style.ScrollBarStyle.BeginUpdate"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.ScrollBarStyle.Refresh">
            <summary>
            Loads a predefined theme into the <see cref="T:C1.Win.C1ScrollBar.Style.ScrollBarStyle"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.Style.StyleConstSet">
            <summary>
            Represents the set of integer constants that can be referenced from style elements.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.Style.StyleConstSet.Item(C1.Win.C1ScrollBar.Style.StyleConst)">
            <summary>
            Gets or sets an integer value associated with the specified <see cref="T:C1.Win.C1ScrollBar.Style.StyleConst"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.Style.StyleBrushSet">
            <summary>
            Represents the set of known brushes that can be referenced from style elements.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.StyleBrushSet.GetColor(C1.Win.C1ScrollBar.Style.StyleBrush)">
            <summary>
            Gets a Color for the case of a solid brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.StyleBrushSet.SetColor(C1.Win.C1ScrollBar.Style.StyleBrush,System.Drawing.Color)">
            <summary>
            Sets a Color associated with the specified <see cref="T:C1.Win.C1ScrollBar.Style.StyleBrush"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.StyleBrushSet.SetBrush(C1.Win.C1ScrollBar.Style.StyleBrush,System.Drawing.Brush)">
            <summary>
            Sets a Brush associated with the specified <see cref="T:C1.Win.C1ScrollBar.Style.StyleBrush"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.StyleBrushSet.GetBrush(C1.Win.C1ScrollBar.Style.StyleBrush,System.Drawing.Rectangle)">
            <summary>
            Gets a Brush associated with the specified <see cref="T:C1.Win.C1ScrollBar.Style.StyleBrush"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.Style.StyleColorSet">
            <summary>
            Represents the set of known colors that can be referenced from style elements.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.Style.StyleColorSet.Item(C1.Win.C1ScrollBar.Style.StyleColor)">
            <summary>
            Gets or sets a Color associated with the specified <see cref="T:C1.Win.C1ScrollBar.Style.StyleColor"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.StyleColorSet.GetPen(C1.Win.C1ScrollBar.Style.StyleColor)">
            <summary>
            Returns a Pen associated with the specified <see cref="T:C1.Win.C1ScrollBar.Style.StyleColor"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.StyleColorSet.GetBrush(C1.Win.C1ScrollBar.Style.StyleColor)">
            <summary>
            Returns a Brush associated with the specified <see cref="T:C1.Win.C1ScrollBar.Style.StyleColor"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.Style.StyleGlyphSet">
            <summary>
            Represents the set of known glyphs that can be referenced from style elements.
            </summary>
        </member>
        <member name="P:C1.Win.C1ScrollBar.Style.StyleGlyphSet.Item(C1.Win.C1ScrollBar.Style.StyleGlyph)">
            <summary>
            Gets an image associated with the specified <see cref="T:C1.Win.C1ScrollBar.Style.StyleGlyph"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.StyleGlyphSet.Update(C1.Win.C1ScrollBar.Style.StyleGlyph,System.Drawing.Image,System.Boolean)">
            <summary>
            Updates the image associated with the specified <see cref="T:C1.Win.C1ScrollBar.Style.StyleGlyph"/>
            and determines whether the new image can be disposed from this
            <see cref="T:C1.Win.C1ScrollBar.Style.StyleGlyphSet"/>, i.e. the glyph set owns the image.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.StyleGlyphSet.GetColored(C1.Win.C1ScrollBar.Style.StyleGlyph,System.Drawing.Color)">
            <summary>
            Returns a glyph image that is drawn using the specified foreground color.
            </summary>
        </member>
        <member name="M:C1.Win.C1ScrollBar.Style.StyleGlyphSet.GetSize(C1.Win.C1ScrollBar.Style.StyleGlyph)">
            <summary>
            Returns the size of the specified glyph image.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.Style.StyleConst">
            <summary>
            Named style constants of System.Int32 type.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.Style.StyleBrush">
            <summary>
            Named style brushes.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.Style.StyleColor">
            <summary>
            Named style colors.
            </summary>
        </member>
        <member name="T:C1.Win.C1ScrollBar.Style.StyleGlyph">
            <summary>
            Named style glyphs.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.InertiaProcessor">
            <summary>
            Implements the extrapolation of a manipulation's position and orientation.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.Manipulator">
            <summary>
            Represents a 2D manipulator at an instant in time.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulator.ID">
            <summary>
            The unique ID for this manipulator.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulator.X">
            <summary>
            The x-coordinate of the manipulator.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulator.Y">
            <summary>
            The y-coordinate of the manipulator.
            </summary>
        </member>
        <member name="M:C1.Win.Touch.Manipulator.#ctor(System.Int32,System.Single,System.Single)">
            <summary>
            Creates a new Manipulator object with the specified properties.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.ManipulationProcessor">
            <summary>
            Implements a multiple-input, single-output compositor for two-dimensional (2-D) transformations.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.ITouchDestination">
            <summary>
            Implemented by an area of the Control that needs to receive touch notifications.
            </summary>
        </member>
        <member name="M:C1.Win.Touch.ITouchDestination.StartManipulation(C1.Win.Touch.TouchManipulation)">
            <summary>
            Executes before a new manipulation starts.
            </summary>
            <remarks>
            You can update mp.Configuration from this method.
            </remarks>
        </member>
        <member name="M:C1.Win.Touch.ITouchDestination.ProcessManipulation(C1.Win.Touch.TouchManipulation)">
            <summary>
            Executes when the next manipulation occurs, including the inertia.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.Manipulations">
            <summary>
            Represents the possible affine two-dimensional (2-D) manipulations.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulations.None">
            <summary>
            No manipulations.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulations.TranslateX">
            <summary>
            A translation in the x-axis.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulations.TranslateY">
            <summary>
            A translation in the y-axis.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulations.Translate">
            <summary>
            A translation in the x and/or y axes.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulations.Scale">
            <summary>
            A scale in both directions.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulations.Rotate">
            <summary>
            A rotation.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.Manipulations.All">
            <summary>
            All available manipulations.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.TouchManipulation">
            <summary>
            Represents a result of the touch manipulation.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.Configuration">
            <summary>
            Gets the parameters of the touch interaction.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.Transform">
            <summary>
            Gets the cumulative result of the manipulation.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.OriginX">
            <summary>
            Gets the new x-coordinate of the composite position of the manipulation, in DIPs.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.OriginY">
            <summary>
            Gets the new y-coordinate of the composite position of the manipulation, in DIPs.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.Start">
            <summary>
            Indicates the start of an interaction.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.Inertia">
            <summary>
            Indicates if the interaction has triggered inertia.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.End">
            <summary>
            Indicates the end of an interaction (including inertia).
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.HasOverpan">
            <summary>
            Indicates if the panning feedback offset is specified.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.OverpanOffsetX">
            <summary>
            Gets or sets a value that indicates how far past the horizontal end of the
            pannable region the pan has gone. This property should be updated by the
            user if TouchProcessor.AllowPanningFeedback is set to true.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchManipulation.OverpanOffsetY">
            <summary>
            Gets or sets a value that indicates how far past the vertical end of the
            pannable region the pan has gone. This property should be updated by the
            user if TouchProcessor.AllowPanningFeedback is set to true.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.TouchConfiguration">
            <summary>
            Specifies parameters for the manipulation and inertia processors.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.SupportedManipulations">
            <summary>
            Gets or sets the current set of supported manipulations.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.UseRails">
            <summary>
            Indicates that motions off the primary axis of motion are ignored.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.RailsDisplacement">
            <summary>
            Gets or sets the displacement before applying rails.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.PivotX">
            <summary>
            Gets or sets the X position of the pivot, in DIPs.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.PivotY">
            <summary>
            Gets or sets the Y position of the pivot, in DIPs.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.TranslationDeceleration">
            <summary>
            Gets or sets the translation deceleration of an inertia processor, in DIPs per millisecond squared.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.AngularDeceleration">
            <summary>
            Gets or sets the angular deceleration of an inertia processor, in radians per millisecond squared.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.MinimumScaleRotateRadius">
            <summary>
            Gets or sets the minimum radius, in DIPs, necessary for a manipulator to participate in scaling and rotation.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.AllowPanningFeedback">
            <summary>
            Gets or sets whether the control shows a visual cue when a user
            reaches the end of a pannable area.
            </summary>
            <remarks>
            To enable panning feedback you should update the OverpanOffsetX
            and OverpanOffsetY properties of the TouchOutput object in the
            ITouchDestination.ProceedInteraction() method.
            </remarks>
        </member>
        <member name="P:C1.Win.Touch.TouchConfiguration.PanningAnimateBack">
            <summary>
            Indicates whether the control positioning reset should incorporate
            a smooth animation after showing panning feedback. Set this
            property to false if the original position of the control needs
            to be restored immediately. 
            </summary>
        </member>
        <member name="T:C1.Win.Touch.ManipulationTransform">
            <summary>
            Represents the cumulative result of the manipulation.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.ManipulationTransform.TranslationX">
            <summary>
            Gets the translation along the x-axis, in DIPs.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.ManipulationTransform.TranslationY">
            <summary>
            Gets the translation along the y-axis, in DIPs.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.ManipulationTransform.Scale">
            <summary>
            Gets the scale factor.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.ManipulationTransform.Expansion">
            <summary>
            Gets the amount of expansion, in DIPs.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.ManipulationTransform.Rotation">
            <summary>
            Gets the amount of rotation, in radians.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.HitTestDelegate">
            <summary>
            Represents a delegate that hit-tests touch destinations.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.TouchEventArgs">
            <summary>
            Provides data for touch events.
            </summary>
        </member>
        <member name="M:C1.Win.Touch.TouchEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a TouchEventArgs.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchEventArgs.X">
            <summary>
            Gets the contact's X coordinate, in pixels.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchEventArgs.Y">
            <summary>
            Gets the contact's Y coordinate, in pixels.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.QueryStatusEventArgs">
            <summary>
            Provides data for the QueryStatus event.
            </summary>
        </member>
        <member name="M:C1.Win.Touch.QueryStatusEventArgs.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of a QueryStatusEventArgs.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.QueryStatusEventArgs.FromPen">
            <summary>
            Gets a value indicating if the event came from the stylus pen.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.QueryStatusEventArgs.AllowPressAndHold">
            <summary>
            Gets or sets whether the press and hold (right-click) gesture is supported.
            </summary>
        </member>
        <member name="T:C1.Win.Touch.TouchProcessor">
            <summary>
            Accepts input from a touch device.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.TouchProcessor.IsSupported">
            <summary>
            Indicates if the Windows Touch Technology is available on this platform.
            </summary>
        </member>
        <member name="F:C1.Win.Touch.TouchProcessor.IsWindows8">
            <summary>
            Indicates if the application is running on Windows 8 or upper OS.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchProcessor.IsCursorSuppressed">
            <summary>
            Indicates that the system is not drawing the cursor because the user
            is providing input through touch or pen instead of the mouse.
            </summary>
            <remarks>
            This property always returns false on Windows 7.
            </remarks>
        </member>
        <member name="M:C1.Win.Touch.TouchProcessor.IsCursorVisible">
            <summary>
            Indicates whether cursor is hidden because the end-user uses touch or pen instead of mouse.
            </summary>
            <returns>True is cursor is visible; False otherwise.</returns>
        </member>
        <member name="M:C1.Win.Touch.TouchProcessor.GetTimestamp">
            <summary>
            Calculates the timestamp in 100-nanosecond units.
            </summary>
        </member>
        <member name="M:C1.Win.Touch.TouchProcessor.#ctor(System.Windows.Forms.Control,C1.Win.Touch.HitTestDelegate)">
            <summary>
            Creates an instance of TouchProcessor for the given control.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchProcessor.MaxTapDisplacement">
            <summary>
            Gets or sets the maximum possible displacement allowable for a tap, in DIPs.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchProcessor.MaxTapDuration">
            <summary>
            Gets or sets the maximum allowable duration for a tap, in milliseconds.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchProcessor.UseTimerForInertia">
            <summary>
            Gets or sets whether the animation timer should be created for processing inertia (true by default).
            </summary>
            <remarks>
            Call the ProcessTimerTick method for processing inertia when this property is set to False.
            </remarks>
        </member>
        <member name="P:C1.Win.Touch.TouchProcessor.Enabled">
            <summary>
            Gets or sets whether the touch processor is enabled.
            </summary>
        </member>
        <member name="P:C1.Win.Touch.TouchProcessor.InertiaIsRunning">
            <summary>
            Gets a value indicating whether the inertia is currently processed.
            </summary>
        </member>
        <member name="E:C1.Win.Touch.TouchProcessor.Touch">
            <summary>
            Occurs before processing any manipulations from touch device.
            </summary>
        </member>
        <member name="E:C1.Win.Touch.TouchProcessor.QueryStatus">
            <summary>
            Occurs before the control starts processing input from
            touch device or pen at the given point.
            </summary>
        </member>
        <member name="E:C1.Win.Touch.TouchProcessor.Tap">
            <summary>
            Occurs when the user taps the control.
            </summary>
        </member>
        <member name="E:C1.Win.Touch.TouchProcessor.MissedTap">
            <summary>
            Occurs if the user taps the control but the touch duration
            exceeded MaxTapDuration or the touch point was moved.
            </summary>
        </member>
        <member name="E:C1.Win.Touch.TouchProcessor.SecondaryTap">
            <summary>
            Occurs as a result of the Press and Hold action.
            </summary>
        </member>
        <member name="E:C1.Win.Touch.TouchProcessor.DoubleTap">
            <summary>
            Occurs when the user taps the control twice.
            </summary>
        </member>
        <member name="M:C1.Win.Touch.TouchProcessor.SetDpi(System.Single,System.Single)">
            <summary>	
            Sets the dots per inch (DPI) for the touch processor.
            </summary>	
            <param name="dpiX">Specifies the horizontal DPI of the touch processor.</param>	
            <param name="dpiY">Specifies the vertical DPI of the touch processor.</param>	
        </member>
        <member name="M:C1.Win.Touch.TouchProcessor.HandleMessage(System.Windows.Forms.Message@)">
            <summary>
            Processes touch-related Windows messages.
            </summary>
            <remarks>
            It must be executed from the owner control's WndProc() method.
            </remarks>
            <param name="m">The Message to process.</param>
            <returns>
            Returns true if the message is handled and the owner control's
            WndProc() shouldn't call base.WndProc().
            </returns>
        </member>
        <member name="M:C1.Win.Touch.TouchProcessor.GuessFromTouch(System.Drawing.Point,System.Int64)">
            <summary>
            Tries to guess whether the mouse event being processed came
            from the touch device rather than from the mouse or pen.
            </summary>
            <param name="p">
            The Point in client coordinates passed as Location to
            the mouse event.
            </param>
            <param name="timestamp">
            The optional timestamp of the check.
            </param>
        </member>
        <member name="M:C1.Win.Touch.TouchProcessor.GuessFromTouch(System.Int64)">
            <summary>
            Tries to guess whether the scroll event being processed came
            from the touch device rather than from the mouse or pen.
            </summary>
        </member>
        <member name="M:C1.Win.Touch.TouchProcessor.ProcessTimerTick(System.Int64)">
            <summary>
            Processes inertia animation for the specified timestamp.
            </summary>
        </member>
        <member name="M:C1.Win.Touch.TouchProcessor.Complete(C1.Win.Touch.ITouchDestination)">
            <summary>
            Forces to complete the currently running manipulations for the given destination.
            </summary>
        </member>
        <member name="M:C1.Win.Touch.TouchProcessor.CompleteAll">
            <summary>
            Forces all currently running manipulations to complete.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1ProductInfoAttribute">
            <summary>
            Attribute used to attach licensing/product information to assemblies.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AllowedCallerAttribute">
            <summary>
            Attribute used to specify assemblies that can use this product without a license.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProviderInfo">
            <summary>
            <para>Provides static <see cref="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)"/> methods that 
            should be called from the constructors of licensed classes.</para>
            <para>Also provides a static <see cref="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)"/> method that can 
            be called to show the about box with product and licensing information.</para>
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <returns>A <see cref="T:GrapeCity.Common.ILicenseData`1"/> object that contains information about the license.</returns>
            <remarks>
            <para>Check the <b>ShouldNag</b> property of the returned <see cref="T:GrapeCity.Common.LicenseData`1"/> 
            to determine whether the licensed class should nag the user. This value is set
            to true in situations where a valid license was not found but a nag dialog
            could not be displayed. In these cases, the licensed class is supposed to nag
            in some other way (with a watermark for example).</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Boolean)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <param name="showNagDialog">Whether the nag dialog should be displayed when a valid license is not found.</param>
            <returns>A <see cref="T:GrapeCity.Common.ILicenseData`1"/> object that contains information about the license.</returns>
            <remarks>
            <para>This overload was created for use in WPF. It should be called in the control's constructor
            in order to support license persistence correctly. But it should not show the nag dialog until the
            control is fully loaded, or the VS designer may remain blank.</para>
            <para>So the solution is this:</para>
            <code>
            ILicenseData{C1Product} _licInfo;
            public LicensedControl()
            {
              // check license but don't nag yet
              _licInfo = ProviderInfo.Validate(typeof(LicensedControl), this, false);
              
              // perform licensing after control is fully loaded
              Loaded += LicensedControl_Loaded;
            }
            void LicensedControl_Loaded(object sender, RoutedEventArgs e)
            {
              // nag after loading
              if (_licInfo.ShouldNag)
              {
                ProviderInfo.ShowAboutBox(this);
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)">
            <summary>
            Shows the About Box for an instance of a C1 product.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.GetC1Type(System.Object)">
            <summary>
            Get the type whose assembly contains a 'C1ProductInfoAttribute'.
            </summary>
            <param name="instance">Instance of an object whose type is to be checked.</param>
            <returns>The type whose assembly contains a 'C1ProductInfoAttribute'</returns>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VerString">
            <summary>
            WinForms version string representation (4 dot-delimited numbers).
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VersionStr">
            <summary>
            Same as <see cref="F:C1.Util.Licensing.VersionConst.VerString"/>.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.AssemblyNames">
            <summary>
            Specifies assembly name parts, used by AssemblyCommonInfo to generate actual assembly names.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DM">
            <summary>
            Fields of DEVMODE structure.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GetDeviceCapsConsts">
            <summary>
            GetDeviceCaps() constants
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SORT">
            <summary>
            Sorting IDs.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.LANG">
            <summary>
            Primary language IDs.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SUBLANG">
             <summary>
              Sublanguage IDs.
            
              The name immediately following SUBLANG_ dictates which primary
              language ID that sublanguage ID can be combined with to form a
              valid language ID.
             </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.LOCALE">
            <summary>
            Locale Types.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.FixFpu">
            <summary>
            usage:
             using (FixFpu ff = new FixFpu())
             { do printer stuff }
            or
             do printer stuff
             FixFpu.Doit();
            </summary>
        </member>
        <member name="M:C1.Util.Win.Win32.LOWORDU(System.IntPtr)">
            <summary>
            Retrieves the low-order word from the specified value. This function handles the message parameters of window. See in MSDN which function used to process the message.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The return value is the low-order word of the specified value.</returns>
            <remarks>
            Use:
            WM_COMMAND, WM_SYSCOMMAND
            WM_SETCURSOR
            WM_ACTIVATE
            WM_MENUCHAR
            WM_HSCROLL WM_VSCROLL - SB_THUMBPOSITION or SB_THUMBTRACK
            </remarks>
        </member>
        <member name="M:C1.Util.Win.Win32.HIWORDU(System.IntPtr)">
            <summary>
            Retrieves the high-order word from the specified value. This function handles the message parameters of window. See in MSDN which function used to process the message.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The return value is the high-order word of the specified value.</returns>
            <remarks>
            WM_HSCROLL WM_VSCROLL -  current position of the scroll box
            </remarks>
        </member>
        <member name="M:C1.Util.Win.Win32.GET_X_LPARAM(System.IntPtr)">
            <summary>
            Retrieves the signed x-coordinate from the given value. 
            This function handles the message parameters of window and is a replacement for LOWORD because LOWORD must return the unsigned value. 
            See in MSDN which function used to process the message.
            </summary>
            <param name="lParam">The value to be converted.</param>
            <returns>The return value is the low-order int of the specified value.</returns>
            <remarks>
            Use:
            WM_CONTEXTMENU,
            WM_MOUSEDOWN, WM_MOUSEUP, WM_MOUSEWHEEL, WM_MOUSEMOVE
            </remarks>
        </member>
        <member name="M:C1.Util.Win.Win32.GET_Y_LPARAM(System.IntPtr)">
            <summary>
            Retrieves the signed y-coordinate from the given value. 
            This function handles the message parameters of window and is a replacement for HIWORD because HIWORD must return the unsigned value. 
            See in MSDN which function used to process the message.
            </summary>
            <param name="lParam">The value to be converted.</param>
            <returns>The return value is the high-order int of the specified value.</returns>
            <remarks>
            Use:
            WM_CONTEXTMENU,
            WM_MOUSEDOWN, WM_MOUSEUP, WM_MOUSEWHEEL, WM_MOUSEMOVE
            </remarks>
        </member>
        <member name="M:C1.Util.Win.Win32.GET_WHEEL_DELTA_WPARAM(System.IntPtr)">
            <summary>
            Retrieves the wheel-delta value from the specified WPARAM value.
            </summary>
            <param name="wParam">The value to be converted.</param>
            <returns>
            The return value is the high-order word representing the wheel-delta value. 
            It indicates the distance that the wheel is rotated, expressed in multiples or divisions of WHEEL_DELTA, which is 120. A positive value indicates that the wheel was rotated forward, away from the user; 
            a negative value indicates that the wheel was rotated backward, toward the user.
            </returns>
            <remarks>
            Use:
            WM_MOUSEWHEEL - zDelta 
            </remarks>
        </member>
        <member name="M:C1.Util.Win.Win32.GET_KEYSTATE_WPARAM(System.IntPtr)">
            <summary>
            Retrieves the state of certain virtual keys from the specified WPARAM value.
            </summary>
            <param name="wParam">The value to be converted.</param>
            <returns>
            The return value is the low-order word representing the virtual key state.
            </returns>
            <remarks>
            Use:
            WM_MOUSEWHEEL - fwKeys  
            </remarks>
        </member>
        <member name="F:C1.Util.Win.Win32.C1PdfAcrofieldType.None">
            <summary>A field type invalid or not found.</summary>
        </member>
        <member name="T:C1.Util.Win.Win32.MONITORINFOEX">
            <summary>
            The MONITORINFOEX structure contains information about a display monitor.
            The GetMonitorInfo function stores information into a MONITORINFOEX structure or a MONITORINFO structure.
            The MONITORINFOEX structure is a superset of the MONITORINFO structure. The MONITORINFOEX structure adds a string member to contain a name
            for the display monitor.
            </summary>
        </member>
        <member name="F:C1.Util.Win.Win32.MONITORINFOEX.cbSize">
            <summary>
            The size, in bytes, of the structure. Set this member to sizeof(MONITORINFOEX) (72) before calling the GetMonitorInfo function.
            Doing so lets the function determine the type of structure you are passing to it.
            </summary>
        </member>
        <member name="F:C1.Util.Win.Win32.MONITORINFOEX.rcMonitor">
            <summary>
            A RECT structure that specifies the display monitor rectangle, expressed in virtual-screen coordinates.
            Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative values.
            </summary>
        </member>
        <member name="F:C1.Util.Win.Win32.MONITORINFOEX.rcWork">
            <summary>
            A RECT structure that specifies the work area rectangle of the display monitor that can be used by applications,
            expressed in virtual-screen coordinates. Windows uses this rectangle to maximize an application on the monitor.
            The rest of the area in rcMonitor contains system windows such as the task bar and side bars.
            Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative values.
            </summary>
        </member>
        <member name="F:C1.Util.Win.Win32.MONITORINFOEX.Flags">
             <summary>
             The attributes of the display monitor.
            
             This member can be the following value:
               1 : MONITORINFOF_PRIMARY
             </summary>
        </member>
        <member name="F:C1.Util.Win.Win32.MONITORINFOEX.szDevice">
            <summary>
            A string that specifies the device name of the monitor being used. Most applications have no use for a display monitor name,
            and so can save some bytes by using a MONITORINFO structure.
            </summary>
        </member>
        <member name="F:C1.Util.Win.Win32.ClassStyles.ByteAlignClient">
            <summary>Aligns the window's client area on a byte boundary (in the x direction). This style affects the width of the window and its horizontal placement on the display.</summary>
        </member>
        <member name="F:C1.Util.Win.Win32.ClassStyles.ByteAlignWindow">
            <summary>Aligns the window on a byte boundary (in the x direction). This style affects the width of the window and its horizontal placement on the display.</summary>
        </member>
        <member name="F:C1.Util.Win.Win32.ClassStyles.ClassDC">
            <summary>
            Allocates one device context to be shared by all windows in the class.
            Because window classes are process specific, it is possible for multiple threads of an application to create a window of the same class.
            It is also possible for the threads to attempt to use the device context simultaneously. When this happens, the system allows only one thread to successfully finish its drawing operation.
            </summary>
        </member>
        <member name="F:C1.Util.Win.Win32.ClassStyles.DoubleClicks">
            <summary>Sends a double-click message to the window procedure when the user double-clicks the mouse while the cursor is within a window belonging to the class.</summary>
        </member>
        <member name="F:C1.Util.Win.Win32.ClassStyles.DropShadow">
            <summary>
            Enables the drop shadow effect on a window. The effect is turned on and off through SPI_SETDROPSHADOW.
            Typically, this is enabled for small, short-lived windows such as menus to emphasize their Z order relationship to other windows.
            </summary>
        </member>
        <member name="F:C1.Util.Win.Win32.ClassStyles.GlobalClass">
            <summary>Indicates that the window class is an application global class. For more information, see the "Application Global Classes" section of About Window Classes.</summary>
        </member>
        <member name="F:C1.Util.Win.Win32.ClassStyles.HorizontalRedraw">
            <summary>Redraws the entire window if a movement or size adjustment changes the width of the client area.</summary>
        </member>
        <member name="F:C1.Util.Win.Win32.ClassStyles.NoClose">
            <summary>Disables Close on the window menu.</summary>
        </member>
        <member name="F:C1.Util.Win.Win32.ClassStyles.OwnDC">
            <summary>Allocates a unique device context for each window in the class.</summary>
        </member>
        <member name="F:C1.Util.Win.Win32.ClassStyles.ParentDC">
            <summary>
            Sets the clipping rectangle of the child window to that of the parent window so that the child can draw on the parent.
            A window with the CS_PARENTDC style bit receives a regular device context from the system's cache of device contexts.
            It does not give the child the parent's device context or device context settings. Specifying CS_PARENTDC enhances an application's performance.
            </summary>
        </member>
        <member name="F:C1.Util.Win.Win32.ClassStyles.SaveBits">
            <summary>
            Saves, as a bitmap, the portion of the screen image obscured by a window of this class.
            When the window is removed, the system uses the saved bitmap to restore the screen image, including other windows that were obscured.
            Therefore, the system does not send WM_PAINT messages to windows that were obscured if the memory used by the bitmap has not been discarded and if other screen actions have not invalidated the stored image.
            This style is useful for small windows (for example, menus or dialog boxes) that are displayed briefly and then removed before other screen activity takes place.
            This style increases the time required to display the window, because the system must first allocate memory to store the bitmap.
            </summary>
        </member>
        <member name="F:C1.Util.Win.Win32.ClassStyles.VerticalRedraw">
            <summary>Redraws the entire window if a movement or size adjustment changes the height of the client area.</summary>
        </member>
        <member name="T:C1.Util.Win.Win32.TPM">
            <summary>
            Flags for TrackPopupMenu
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ICON">
            <summary>
            WM_SETICON / WM_GETICON Type Codes
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SC">
            <summary>
            System Menu Command Values
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DTT">
            <summary>
            Bits used in dwFlags of DTTOPTS
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SWP">
            <summary>
            SetWindowPos flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.CDS">
            <summary>
            Flags for ChangeDisplaySettings() function.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DIB">
            <summary>
            Color table identifiers for CreateDIBSection().
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DISP">
            <summary>
            Return values of the ChangeDisplaySettings() function.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.CB">
            <summary>
            CB_XXX - ComboBox Commands
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.WM">
            <summary>
            Windows messages.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.IMN">
            <summary>
            wParam of report message WM_IME_NOTIFY.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.UIS">
            <summary>
            The WM_UPDATEUISTATE message parameters. 
            </summary>
        </member>
        <member name="F:C1.Util.Win.Win32.UIS.UIS_SET">
            <summary>
            The low-order word specifies the action to be performed.
            </summary>
        </member>
        <member name="F:C1.Util.Win.Win32.UIS.UIS_CLEAR">
            <summary>
            The low-order word specifies the action to be performed.
            </summary>
        </member>
        <member name="F:C1.Util.Win.Win32.UIS.UIS_INITIALIZE">
            <summary>
            The low-order word specifies the action to be performed.
            </summary>
        </member>
        <member name="F:C1.Util.Win.Win32.UIS.UISF_HIDEFOCUS">
            <summary>
            The high-order word specifies which UI state elements are affected or the style of the control.
            </summary>
        </member>
        <member name="F:C1.Util.Win.Win32.UIS.UISF_HIDEACCEL">
            <summary>
            The high-order word specifies which UI state elements are affected or the style of the control.
            </summary>
        </member>
        <member name="F:C1.Util.Win.Win32.UIS.UISF_ACTIVE">
            <summary>
            The high-order word specifies which UI state elements are affected or the style of the control.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.WP">
            <summary>
            Window theme parts
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.EM">
            <summary>
            EditControl window messages.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SB">
            <summary>
            WM_HSCROLL and WM_VSCROLL notifications codes.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SBP">
            <summary>
            SCROLLBARPARTS.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.BST">
            <summary>
            BM_GETSTATE flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.BM">
            <summary>
            BM_XXX flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ODT">
            <summary>
            DRAWITEMSTRUCT control types.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ODA">
            <summary>
            DRAWITEMSTRUCT drawing actions.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ODS">
            <summary>
            DRAWITEMSTRUCT visual states.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.C1">
            <summary>
            ComponentOne constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.RasterOperationCodes">
            <summary>
            Specifies a raster-operation code, used by BitBlt function and other.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SW">
            <summary>
            ShowWindow() function codes.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.PRF">
            <summary>
            WM_PRINT drawing options.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SF">
            <summary>
            Rich edit data format types.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SFF">
            <summary>
            Rich edit data format replacement options.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SCF">
            <summary>
            EM_SETCHARFORMAT / EM_GETCHARFORMAT flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.PFM">
            <summary>
            EM_SETPARAFORMAT / EM_GETPARAFORMAT flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.CFM">
            <summary>
            CHARFORMAT mask values.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.CFE">
            <summary>
            CHARFORMAT effects.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.TO">
            <summary>
            EM_SETTYPOGRAPHYOPTIONS flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.TA">
            <summary>
            Text Alignment Options.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DCX">
            <summary>
            GetDCEx() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GW">
            <summary>
            GetWindow() Constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GA">
            <summary>
            GetAncestor() constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ETO">
            <summary>
            ExtTextOut() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SetBkModeConsts">
            <summary>
            SetBkMode modes.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.OBJ">
            <summary>
            GetObjectType() returning values.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.TMPF">
            <summary>
            TEXTMETRIC tmPitchAndFamily flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.NTM">
            <summary>
            Values for NETTEXMETRIC.ntmFlags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.OLE">
            <summary>
            OLE constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.WS">
            <summary>
            CreateWindow() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.WS_EX">
            <summary>
            Extended Window Styles
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ES">
            <summary>
            CreateWindow() flags for edit controls.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DFC">
            <summary>
            DrawFrameControl(), type of frame control to draw.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DFCS">
            <summary>
            DrawFrameControl(), state of control.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.PS">
            <summary>
            CreatePen() flags
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GCL">
            <summary>
            Class field offsets for GetClassLong().
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GWL">
            <summary>
            SetWindowLong() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GR">
            <summary>
            GetGuiResources() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.RGN">
            <summary>
            ExtSelectClipRgn() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ScrollWindowFlags">
            <summary>
            ScrollWindowEx flags
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.MAPVK">
            <summary>
            MapVirtualKey map types
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.MA">
            <summary>
            WM_MOUSEACTIVATE Return Codes
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SM">
            <summary>
            GetSystemMetrics() codes
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.STATE">
            <summary>
            Constants for TITLEBARINFOEX
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.RasterOp">
            <summary>
            Constants for SetROP2
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.BI">
            <summary>
            Constants for the biCompression field of BITMAPINFOHEADER.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ABS">
            <summary>
            ARROWBTNSTATES.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SCRBS">
            <summary>
            SCROLLBARSTYLESTATES.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ASSOCF">
            <summary>
            Defines ASSOCF values for AssocQueryString method's first parameter (flags).
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ASSOCSTR">
            <summary>
            Defines ASSOCSTR values for AssocQueryString method's second parameter (str).
            </summary>
        </member>
        <member name="M:C1.Util.Win.Win32.AssocQueryString(System.Int32,System.Int32,System.String,System.String,System.Text.StringBuilder,System.UInt32@)">
            <summary>
            Gets file-association string from the registry.
            </summary>
            <param name="flags">Use <see cref="T:C1.Util.Win.Win32.ASSOCF"/> constants.</param>
            <param name="str">Use <see cref="T:C1.Util.Win.Win32.ASSOCSTR"/> constants.</param>
            <param name="pszAssoc"></param>
            <param name="pszExtra"></param>
            <param name="pszOut"></param>
            <param name="pcchOut"></param>
            <returns>An <see cref="T:C1.Util.Win.Win32.OLE"/> success/error code.</returns>
            <remarks>
            To get associated exe's length/exe:
            <code>
            uint assocLen = 0;
            AssocQueryString(ASSOCF.ASSOCF_INIT_DEFAULTTOSTAR,ASSOCSTR.ASSOCSTR_EXECUTABLE,Path.GetExtension(OutputFileName),"open",null,ref assocLen);
            </code>
            For existing files, another option is FindExecutable.
            </remarks>
        </member>
        <member name="P:C1.Util.Win.Win32.Gdip.AtomName">
            <summary>
            Name of Atom create by GDI+ for current thread.
            </summary>
        </member>
        <member name="P:C1.Util.Win.Win32.Gdip.IsShutdown">
            <summary>
            Gets true if GDI+ currently shutdown.
            </summary>
        </member>
        <member name="M:C1.Util.Win.Win32.GetLocaleInfo(System.UInt32,System.UInt32)">
            <summary>
            This function avoids BUG with API GetLocaleInfo function under Win9X
            </summary>
            <param name="Locale"></param>
            <param name="LCType"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Framework.ListBoxElement">
            <summary>
            Implements base ListBox with "Select/unselect All" option
            </summary>
        </member>
        <member name="M:C1.Framework.ListBoxElement.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Framework.ListBoxElement"/>
            </summary>
        </member>
        <member name="P:C1.Framework.ListBoxElement.ScrollableCheckList">
            <summary>
            Gets list holder panel.
            </summary>
        </member>
        <member name="P:C1.Framework.ListBoxElement.UpdateCheckList">
            <summary>
            Gets or sets a value determines whether checklist is blocked to be updated or not.
            </summary>
        </member>
        <member name="P:C1.Framework.ListBoxElement.CheckAll">
            <summary>
            Gets "CheckAll" element.
            </summary>
        </member>
        <member name="M:C1.Framework.ListBoxElement.ClearItems">
            <summary>
            Clears checklist.
            </summary>
        </member>
        <member name="P:C1.Framework.ListBoxElement.Items">
            <summary>
            Gets checklist child items as a <see cref="T:C1.Framework.ElementList"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.ListBoxElement.NullEmptyString">
            <summary>
            Gets or sets a value used for displaying null ore empty strings.
            </summary>
        </member>
        <member name="P:C1.Framework.ListBoxElement.NullString">
            <summary>
            Gets or sets a value used for displaying null strings.
            </summary>
        </member>
        <member name="P:C1.Framework.ListBoxElement.EmptyString">
            <summary>
            Gets or sets a value used for displaying empty strings.
            </summary>
        </member>
        <member name="M:C1.Framework.ListBoxElement.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.ListBoxElement.SelectedIndex">
            <summary>
            Gets or sets currently selected index. 
            </summary>
        </member>
        <member name="M:C1.Framework.ListBoxElement.AddItem(System.String,System.Boolean)">
            <summary>
            Adds new checkbox item with determined displayed  text and checkstate.
            </summary>
        </member>
        <member name="M:C1.Framework.ListBoxElement.UpdateSelectAllCheckState">
            <summary>
            Updates "Select All" checkbox checkstate according with list items checkstates.
            </summary>
        </member>
        <member name="M:C1.Framework.ListBoxElement.AreAllItemsChecked(System.Boolean)">
            <summary>
            Geths a value indicates whether all items has equal checkstate determined 
            </summary>
            <param name="isChecked">Set for search checked items and false </param>
        </member>
        <member name="M:C1.Framework.ListBoxElement.IsItemChecked(System.String)">
            <summary>
            Gets a value that indicates whether the item is checked or not.
            </summary>
        </member>
        <member name="M:C1.Framework.ListBoxElement.GetItemChecked(System.Int32)">
            <summary>
            Gets a value that indicates whether the item with certain index is checked or not.
            </summary>
        </member>
        <member name="M:C1.Framework.ListBoxElement.SetItemChecked(System.Int32,System.Boolean)">
            <summary>
            Sets <see cref="T:System.Windows.Forms.CheckState"/> for an item with the certain index.
            </summary>
        </member>
        <member name="M:C1.Framework.ListBoxElement.GetItemCheckState(System.Int32)">
            <summary>
            Sets checkstate for an item with the certain index.
            </summary>
        </member>
        <member name="M:C1.Framework.ListBoxElement.SetItemCheckState(System.Int32,System.Windows.Forms.CheckState)">
            <summary>
            Sets checkstate for an item with the certain index.
            </summary>
        </member>
        <member name="M:C1.Framework.ListBoxElement.GetObjectCheckState(System.Object)">
            <summary>
            Gets item's checkstate.
            </summary>
        </member>
        <member name="M:C1.Framework.ListBoxElement.SetObjectCheckState(System.Object,System.Windows.Forms.CheckState)">
            <summary>
            Sets item's checkstate.
            </summary>
        </member>
        <member name="T:C1.Framework.ListBoxElement.C1ItemCheckEventArgs">
            <summary>
            Provides additional data for <see cref="M:C1.Framework.ListBoxElement.OnItemChecked(C1.Framework.ListBoxElement.C1ItemCheckEventArgs)"/> event.
            </summary>
        </member>
        <member name="F:C1.Framework.ListBoxElement.C1ItemCheckEventArgs.OldValue">
            <summary>
            Old <see cref="T:System.Windows.Forms.CheckState"/> of the updated item.
            </summary>
        </member>
        <member name="F:C1.Framework.ListBoxElement.C1ItemCheckEventArgs.NewValue">
            <summary>
            New <see cref="T:System.Windows.Forms.CheckState"/> of the updated item.
            </summary>
        </member>
        <member name="F:C1.Framework.ListBoxElement.C1ItemCheckEventArgs.Index">
            <summary>
            Index of the updated item. 
            </summary>
            <remarks>If -1, <see cref="P:C1.Framework.ListBoxElement.CheckAll"/> state was changed.</remarks>
        </member>
        <member name="M:C1.Framework.ListBoxElement.C1ItemCheckEventArgs.#ctor(System.Int32,System.Windows.Forms.CheckState,System.Windows.Forms.CheckState)">
            <summary>
            Creates a new instance of <see cref="T:C1.Framework.ListBoxElement.C1ItemCheckEventArgs"/>
            </summary>
            <param name="index">Index of the updated item. </param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:C1.Framework.ListBoxElement.OnItemChecked(C1.Framework.ListBoxElement.C1ItemCheckEventArgs)">
            <summary>
            Raizes an event when item's check state changed.
            </summary>
            <param name="e"><see cref="T:C1.Framework.ListBoxElement.C1ItemCheckEventArgs"/> that contains details about updated item.</param>
        </member>
        <member name="E:C1.Framework.ListBoxElement.ItemChecked">
            <summary>
            Event raized when item's check state changed.
            </summary>
        </member>
        <member name="T:C1.Framework.ListBoxElement.ListScrollBarPanel">
            <summary>
            Scroll panel with autosize content width.
            </summary>
        </member>
        <member name="T:C1.Framework.FormSizingMode">
            <summary>
            Specifies the border sizing mode of the <see cref="T:C1.Framework.DropDownFormBase"/>.
            </summary>
        </member>
        <member name="F:C1.Framework.FormSizingMode.None">
            <summary>
            No sizing.
            </summary>
        </member>
        <member name="F:C1.Framework.FormSizingMode.Height">
            <summary>
            A resizable border, vertical only. Sizer is at the bottom of the form.
            </summary>
        </member>
        <member name="F:C1.Framework.FormSizingMode.Both">
            <summary>
            A resizable border. Sizer is at the right-bottom of the form.
            </summary>
        </member>
        <member name="T:C1.Framework.MnemonicButtonElement">
            <summary>
            <see cref="T:C1.Framework.ButtonElement"/> that interprets an ampersand character (&amp;) in the Text property to be an access key prefix character.
            </summary>
        </member>
        <member name="M:C1.Framework.MnemonicButtonElement.#ctor(C1.Framework.Style,System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.MnemonicButtonElement"/> with specified style and content.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.MnemonicButtonElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new <see cref="T:C1.Framework.MnemonicButtonElement"/> with specified style.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.MnemonicButtonElement.#ctor(System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.MnemonicButtonElement"/> with specified content.
            </summary>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.MnemonicButtonElement.#ctor">
            <summary>
            Initializes a new <see cref="T:C1.Framework.MnemonicButtonElement"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.MnemonicButtonElement.GetTextElement(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.MnemonicButtonElement.GetImageElement(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.MnemonicButtonElement.GetIconElement">
            <summary>
            Element that displays C1Icon.
            </summary>
        </member>
        <member name="M:C1.Framework.MnemonicButtonElement.OnGotFocus(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.MnemonicButtonElement.OnLostFocus(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.MnemonicButtonElement.HandleMnemonic">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.MnemonicButtonElement.HotkeyPrefix">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Text.HotkeyPrefix"/> value for inner elements.
            </summary>
        </member>
        <member name="T:C1.Framework.MnemonicRadioButtonElement">
            <summary>
            <see cref="T:C1.Framework.RadioButtonElement"/> that interprets an ampersand character (&amp;) in the Text property to be an access key prefix character.
            </summary>
        </member>
        <member name="E:C1.Framework.MnemonicRadioButtonElement.CheckedChanged">
            <summary>
            Event raised when checked state changed.
            </summary>
        </member>
        <member name="M:C1.Framework.MnemonicRadioButtonElement.#ctor(C1.Framework.Style,System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.MnemonicRadioButtonElement"/> with specified style and content.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.MnemonicRadioButtonElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new <see cref="T:C1.Framework.MnemonicRadioButtonElement"/> with specified style.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.MnemonicRadioButtonElement.#ctor(System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.MnemonicRadioButtonElement"/> with specified content.
            </summary>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.MnemonicRadioButtonElement.#ctor">
            <summary>
            Initializes a new <see cref="T:C1.Framework.MnemonicRadioButtonElement"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.MnemonicRadioButtonElement.OnClick">
            <summary>
            Fires the <see cref="E:C1.Framework.ButtonElement.Click"/> event.
            </summary>
        </member>
        <member name="M:C1.Framework.MnemonicRadioButtonElement.OnCheckedChanged">
            <summary>
            Called when check box state is changed.
            </summary>
        </member>
        <member name="P:C1.Framework.MnemonicRadioButtonElement.AutoChecked">
            <summary>
            Gets or sets a value indicated whether it should become unchecked
            only when one of it's sibling elements become checked. 
            </summary>
        </member>
        <member name="M:C1.Framework.MnemonicRadioButtonElement.GetTextElement(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.MnemonicRadioButtonElement.HandleMnemonic">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.MnemonicRadioButtonElement.HotkeyPrefix">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Text.HotkeyPrefix"/> value for inner elements.
            </summary>
        </member>
        <member name="T:C1.Framework.RadioButtonWithIconElement">
            <summary>
            Represents a <see cref="T:C1.Framework.MnemonicRadioButtonElement"/> with icon.
            </summary>
        </member>
        <member name="M:C1.Framework.RadioButtonWithIconElement.#ctor">
            <summary>
            Creates an instance of <see cref="T:C1.Framework.RadioButtonWithIconElement"/>
            </summary>
        </member>
        <member name="P:C1.Framework.RadioButtonWithIconElement.CheckIcon">
            <summary>
            Gets the <see cref="T:C1.Framework.C1Icon"/> for the checked state of the radioButton.
            </summary>
        </member>
        <member name="P:C1.Framework.RadioButtonWithIconElement.UncheckedIcon">
            <summary>
            Gets the <see cref="T:C1.Framework.C1Icon"/> for the unchecked state of the radioButton.
            </summary>
        </member>
        <member name="M:C1.Framework.RadioButtonWithIconElement.OnCheckedChanged">
            <summary>
            Called when check box state is changed.
            </summary>
        </member>
        <member name="M:C1.Framework.RadioButtonWithIconElement.GetTextElement(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.RadioButtonWithIconElement.FinalizeUI">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.RadioButtonWithIconElement.UpdateIcon">
            <summary>
            Updates icon element
            </summary>
        </member>
        <member name="T:C1.Framework.SplitButtonElement">
            <summary>
            Represents a simple splitbutton element
            </summary>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.#ctor">
            <summary>
            Creates an instance of <see cref="T:C1.Framework.SplitButtonElement"/>
            </summary>
        </member>
        <member name="E:C1.Framework.SplitButtonElement.SelectedItemChanged">
            <summary>
            Event raised when selected item changed.
            </summary>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.OnSelectedItemChanged">
            <summary>
            Raises the <see cref="E:C1.Framework.SplitButtonElement.SelectedItemChanged"/> event.
            </summary>
        </member>
        <member name="E:C1.Framework.SplitButtonElement.SelectedIndexChanged">
            <summary>
            Event raised when selected index changed.
            </summary>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.OnSelectedIndexChanged">
            <summary>
            Raises the <see cref="E:C1.Framework.SplitButtonElement.SelectedIndexChanged"/> event.
            </summary>
        </member>
        <member name="P:C1.Framework.SplitButtonElement.IsDroppedDown">
            <summary>
            Gets or sets a value determines whether the dropdown is open.
            </summary>
        </member>
        <member name="P:C1.Framework.SplitButtonElement.Icon">
            <summary>
            <see cref="T:C1.Framework.IconElement"/> that holds an <see cref="T:C1.Framework.C1Icon"/> displayed on the button.
            </summary>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.SetIcon(C1.Framework.C1Icon)">
            <summary>
            Sets icon to be displayed on the button.
            </summary>
            <param name="icon"><see cref="T:C1.Framework.C1Icon"/> to set. </param>
        </member>
        <member name="P:C1.Framework.SplitButtonElement.DropDown">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.SplitButtonElement.DropDown"/> form relates to this <see cref="T:C1.Framework.SplitButtonElement"/>.
            <remark>When set a new value, it shouldn't be null and it's <see cref="P:C1.Framework.DropDownFormBase.DropDownOwner"/> should be current <see cref="T:C1.Framework.SplitButtonElement"/>.</remark>
            </summary>
        </member>
        <member name="P:C1.Framework.SplitButtonElement.SelectedIndex">
            <summary>
            Gets or sets the index of the selected element.
            </summary>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.AddItems(System.Collections.Generic.IEnumerable{C1.Framework.SplitButtonElement.SplitButtonElementDropDownListItem})">
            <summary>
            Fills dropdown with items.
            </summary>
            <param name="items">Set of <see cref="T:C1.Framework.SplitButtonElement.SplitButtonElementDropDownListItem"/> elements to fill dropdown.</param>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.AddItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Fills dropdown with items.
            </summary>
            <param name="items">Set of strings to create dropdown items and fill dropdown.</param>
        </member>
        <member name="P:C1.Framework.SplitButtonElement.Items">
            <summary>
            The set of dropdown items.
            </summary>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.OnMouseEnter(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.OnRightToLeftChanged">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.SplitButtonElement.SplitButtonElementDropDownListItem">
            <summary>
             Represents dropdown element.
            </summary>
        </member>
        <member name="P:C1.Framework.SplitButtonElement.SplitButtonElementDropDownListItem.Value">
            <summary>
            Gets or sets item's value.
            </summary>
        </member>
        <member name="P:C1.Framework.SplitButtonElement.SplitButtonElementDropDownListItem.DisplayText">
            <summary>
            Gets or sets item's display text.
            </summary>
        </member>
        <member name="T:C1.Framework.SplitButtonElement.DropDownList">
            <summary>
            Implements dropdown form for <see cref="T:C1.Framework.SplitButtonElement"/>
            </summary>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.DropDownList.#ctor(C1.Framework.SplitButtonElement)">
            <summary>
            Creates a new instance of <see cref="T:C1.Framework.SplitButtonElement.DropDownList"/>
            </summary>
            <param name="owner">The <see cref="T:C1.Framework.SplitButtonElement"/> this DropDownlist belongs to.</param>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.DropDownList.AddItems(System.Collections.Generic.IEnumerable{C1.Framework.SplitButtonElement.SplitButtonElementDropDownListItem})">
            <summary>
            Fills dropdown with items.
            </summary>
            <param name="items">Set of <see cref="T:C1.Framework.SplitButtonElement.SplitButtonElementDropDownListItem"/> elements to fill dropdown.</param>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.DropDownList.AddItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Fills dropdown with items.
            </summary>
            <param name="items">Set of strings to create dropdown items and fill dropdown.</param>
        </member>
        <member name="P:C1.Framework.SplitButtonElement.DropDownList.Items">
            <summary>
            Gets <see cref="T:C1.Framework.SplitButtonElement.DropDownList"/> child items.
            </summary>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.DropDownList.ClearItems">
            <summary>
            Clears the <see cref="P:C1.Framework.SplitButtonElement.DropDownList.Items"/> list.
            </summary>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.DropDownList.SetSelectedItem(System.String)">
            <summary>
            Sets item with defined value as <see cref="P:C1.Framework.SplitButtonElement.DropDownList.SelectedItem"/>.
            </summary>
            <param name="value">Value </param>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.DropDownList.ItemsContains(System.String)">
            <summary>
            Determinew whether there is a child item with given value or not.
            </summary>
            <param name="value">String value to search.</param>
            <returns>true if there is a child <see cref="T:C1.Framework.SplitButtonElement.DropDownList.DropDownListItemElement"/> with defined value, otherwise, false.</returns>
        </member>
        <member name="P:C1.Framework.SplitButtonElement.DropDownList.SelectedItem">
            <summary>
            Gets or sets currently selected item.
            </summary>
        </member>
        <member name="P:C1.Framework.SplitButtonElement.DropDownList.SelectedIndex">
            <summary>
            Gets an index of the selected item or sets the <see cref="P:C1.Framework.SplitButtonElement.DropDownList.SelectedItem"/> by the given index. 
            </summary>
        </member>
        <member name="P:C1.Framework.SplitButtonElement.DropDownList.IsDroppedDown">
            <summary>
            Gets or sets a value indicates whether dropdown was opened but wasn't closed by click on some item.
            </summary>
        </member>
        <member name="E:C1.Framework.SplitButtonElement.DropDownList.SelectedItemChanged">
            <summary>
            Event raised when selected item changed.
            </summary>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.DropDownList.OnSelectedItemChanged">
            <summary>
            Raises the <see cref="E:C1.Framework.SplitButtonElement.DropDownList.SelectedItemChanged"/> event.
            </summary>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.DropDownList.UpdateLayout">
            <summary>
            Updates dropdown size to fit all items.
            </summary>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.DropDownList.GetOwnerBounds">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.DropDownList.OnRightToLeftChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.DropDownList.ApplyStyle(C1.Win.Themes.BaseStyle,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.DropDownList.GetContentSize">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.DropDownList.OnOwnerDropDownOpened">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.SplitButtonElement.DropDownList.DropDownListItemElement">
            <summary>
            Represents <see cref="T:C1.Framework.SplitButtonElement.DropDownList"/> item for <see cref="T:C1.Framework.SplitButtonElement"/>
            </summary>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.DropDownList.DropDownListItemElement.#ctor(C1.Framework.SplitButtonElement.DropDownList)">
            <summary>
            Creates a new instance of <see cref="T:C1.Framework.SplitButtonElement.DropDownList.DropDownListItemElement"/>
            </summary>
            <param name="owner"><see cref="T:C1.Framework.SplitButtonElement.DropDownList"/> that this item belongs to.</param>
        </member>
        <member name="P:C1.Framework.SplitButtonElement.DropDownList.DropDownListItemElement.Item">
            <summary>
            Gets or sets <see cref="T:C1.Framework.SplitButtonElement.SplitButtonElementDropDownListItem"/> associated with current <see cref="T:C1.Framework.SplitButtonElement.DropDownList.DropDownListItemElement"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.SplitButtonElement.DropDownList.DropDownListItemElement.ToString">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.DrawUtil">
            <summary>
            Provides helper methods for working with graphics objects.
            </summary>
        </member>
        <member name="M:C1.Framework.DrawUtil.CreatePath(C1.Framework.Corners,System.Boolean,System.Drawing.Rectangle)">
            <summary>
            Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for a rectangle with rounded edges.
            </summary>
            <param name="corners">the values for corners.</param>
            <param name="rightToLeft">the right-to-left flag.</param>
            <param name="bounds">the original rectangle.</param>        
        </member>
        <member name="M:C1.Framework.DrawUtil.CreateBorderPath(C1.Framework.Corners,System.Boolean,System.Drawing.Rectangle,C1.Framework.Thickness)">
            <summary>
            Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> that covers only the borders (hollow, used to renders the borders).
            </summary>
            <param name="corners">the values for corners.</param>
            <param name="rightToLeft">the right-to-left flag.</param>
            <param name="bounds">the original rectangle.</param>
            <param name="border">the border thickness.</param>
        </member>
        <member name="M:C1.Framework.DrawUtil.CreateRoundedRect(System.Drawing.Rectangle,C1.Framework.Corners)">
            <summary>
            Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for a rectangle with rounded edges.
            </summary>
            <param name="bounds">the original rectangle.</param>    
            <param name="corners">the values for corners.</param>
        </member>
        <member name="M:C1.Framework.DrawUtil.DrawHighlightSelector(System.Drawing.Rectangle,System.Drawing.Graphics,System.Drawing.Brush,System.Boolean,System.Boolean)">
            <summary>
            Draws the highlight selector for the specified borders.
            </summary>
            <param name="bounds">the cell bounds.</param>
            <param name="g">the graphics context.</param>
            <param name="selectorBrush">the selector brush.</param>
            <param name="rightToLeft">the right ot left flag.</param>
            <param name="isHotPressed">the flag indicating the hot and pressed state of the selector.</param>
        </member>
        <member name="M:C1.Framework.DrawUtil.DrawParentBackground(System.Windows.Forms.Control,System.Drawing.Graphics)">
            <summary>
            Draws the background of the control using the container background color.
            </summary>
            <param name="control">the control needs to draw a background.</param>
            <param name="graphics">the graphics context.</param>
        </member>
        <member name="T:C1.Framework.Extension.TextBoxEx">
            <summary>
            Provides extension methods for the <see cref="T:System.Windows.Forms.TextBox"/> control.
            </summary>
        </member>
        <member name="M:C1.Framework.Extension.TextBoxEx.DrawText(System.Windows.Forms.TextBox,System.Drawing.Graphics,System.String,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws a text in the <see cref="T:System.Windows.Forms.TextBox"/> client area.
            </summary>
            <param name="textBox">The <see cref="T:System.Windows.Forms.TextBox"/> in which the text is drawn.</param>
            <param name="graphics">The <see cref='T:System.Drawing.Graphics'/> object used to paint.</param>
            <param name="text">The text to be drawn.</param>
            <param name="foreColor">The foreground color of the text.</param>
            <param name="backColor">The background color of the text.</param>
            <remarks>
            This method is used to draw placeholder text or the text of a disabled text box.
            </remarks>
        </member>
        <member name="T:C1.Framework.Accessibility.C1ControlAccessibleObject">
            <summary>
            Provides information about a C1 control that can be used by an accessibility application.
            </summary>
        </member>
        <member name="M:C1.Framework.Accessibility.C1ControlAccessibleObject.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.Accessibility.C1ControlAccessibleObject"/> class.
            </summary>
            <param name="ownerControl">the owner accessible control.</param>
        </member>
        <member name="P:C1.Framework.Accessibility.C1ControlAccessibleObject.Bounds">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Accessibility.C1ControlAccessibleObject.Role">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Accessibility.C1ControlAccessibleObject.DefaultName">
            <summary>
            Gets a default name of this <see cref="T:C1.Framework.Accessibility.C1ControlAccessibleObject"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.Accessibility.C1ControlAccessibleObject.Name">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Accessibility.C1ControlAccessibleObject.Value">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Accessibility.C1ControlAccessibleObject.State">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Accessibility.C1ControlAccessibleObject.ElementsHolder">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.Accessibility.C1ControlAccessibleObject.GetChild(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.Accessibility.C1ControlAccessibleObject.HitTest(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.Accessibility.C1ControlAccessibleObject.GetChildCount">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.Accessibility.DropDownAccessibleObject">
            <summary>
            Provides information about a C1 control that hosted on drop down form and can be used by an accessibility application.
            </summary>
        </member>
        <member name="M:C1.Framework.Accessibility.DropDownAccessibleObject.#ctor(C1.Framework.XView)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Accessibility.DropDownAccessibleObject.DefaultName">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Accessibility.DropDownAccessibleObject.Role">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Accessibility.DropDownAccessibleObject.State">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Accessibility.DropDownAccessibleObject.ElementsHolder">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.Accessibility.ElementAccessibleObject">
            <summary>
            Provides information about a <see cref="T:C1.Framework.Element"/> that can be used by an accessibility application.
            </summary>
        </member>
        <member name="M:C1.Framework.Accessibility.ElementAccessibleObject.#ctor(C1.Framework.Accessibility.IAccessibleElement)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.Accessibility.C1ControlAccessibleObject"/> class.
            </summary>
            <param name="element">the owner accessile element.</param>
        </member>
        <member name="P:C1.Framework.Accessibility.ElementAccessibleObject.Name">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Accessibility.ElementAccessibleObject.Value">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Accessibility.ElementAccessibleObject.Role">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Accessibility.ElementAccessibleObject.State">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Accessibility.ElementAccessibleObject.Bounds">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Accessibility.ElementAccessibleObject.Parent">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Accessibility.ElementAccessibleObject.DefaultAction">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.Accessibility.ElementAccessibleObject.GetChild(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.Accessibility.ElementAccessibleObject.HitTest(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.Accessibility.ElementAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.Accessibility.ElementAccessibleObject.Select(System.Windows.Forms.AccessibleSelection)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.Accessibility.ElementAccessibleObject.GetChildCount">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.Accessibility.ElementAccessibleObject.DoDefaultAction">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.Accessibility.IAccessibleElement">
            <summary>
            Represents the methods and properties of <see cref="P:C1.Framework.Accessibility.IAccessibleElement.Element"/> that can be used by an accessibility application.
            </summary>
        </member>
        <member name="P:C1.Framework.Accessibility.IAccessibleElement.Element">
            <summary>
            Gets the <see cref="P:C1.Framework.Accessibility.IAccessibleElement.Element"/> associetid with this <see cref="T:C1.Framework.Accessibility.IAccessibleElement"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.Accessibility.IAccessibleElement.AccessibleObject">
            <summary>
            Gets the accessible object associetid with this <see cref="T:C1.Framework.Accessibility.IAccessibleElement"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.Accessibility.IAccessibleElement.Role">
            <summary>
            Gets the role of this accessible object.
            </summary>
        </member>
        <member name="P:C1.Framework.Accessibility.IAccessibleElement.Name">
            <summary>
            Gets or sets the accessible object name.
            </summary>
        </member>
        <member name="P:C1.Framework.Accessibility.IAccessibleElement.Value">
            <summary>
            Gets or sets the value of an accessible object.
            </summary>
        </member>
        <member name="P:C1.Framework.Accessibility.IAccessibleElement.State">
            <summary>
            Gets the state of this accessible object.
            </summary>
        </member>
        <member name="P:C1.Framework.Accessibility.IAccessibleElement.Children">
            <summary>
            Gets the accessible children collection.
            </summary>
        </member>
        <member name="P:C1.Framework.Accessibility.IAccessibleElement.DefaultAction">
            <summary>
            Gets a string that describes the default action of the object.
            </summary>
        </member>
        <member name="M:C1.Framework.Accessibility.IAccessibleElement.DoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="M:C1.Framework.Accessibility.IAccessibleElement.Focus">
            <summary>
            Sets input focus to the accessible object.
            </summary>
        </member>
        <member name="T:C1.Framework.Accessibility.IAccessibleElementsHolder">
            <summary>
            Represents the object that provides <see cref="T:C1.Framework.Accessibility.IAccessibleElement"/> objects for the C1ControlAccessibleObject class.
            </summary>
        </member>
        <member name="M:C1.Framework.Accessibility.IAccessibleElementsHolder.GetAccessibleElements">
            <summary>
            Gets the accessible elements collection.
            </summary>
        </member>
        <member name="T:C1.Framework.BitmapIconRenderer">
            <summary>
            Provides functionality for rendering a <see cref="T:C1.Framework.C1BitmapIcon"/> to an <see cref="T:System.Drawing.Image"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.BitmapIconRenderer.#ctor(C1.Framework.C1BitmapIcon,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.BitmapIconRenderer"/> class.
            </summary>
            <param name="icon">The icon to render.</param>
            <param name="deviceDpi">The device dpi where the image will be used.</param>
        </member>
        <member name="P:C1.Framework.BitmapIconRenderer.Size">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.BitmapIconRenderer.Source">
            <summary>
            Gets or sets the image source.
            </summary>
        </member>
        <member name="P:C1.Framework.BitmapIconRenderer.ImageList">
            <summary>
            Gets or sets the object that contains the images to display.
            </summary>
        </member>
        <member name="P:C1.Framework.BitmapIconRenderer.ImageKey">
            <summary>
            Gets or sets the key of the small image in the SmallImageList.
            </summary>
        </member>
        <member name="P:C1.Framework.BitmapIconRenderer.ImageIndex">
            <summary>
            Gets or sets the index of the small image in the SmallImageList.
            </summary>
        </member>
        <member name="P:C1.Framework.BitmapIconRenderer.ShowAsMonochrome">
            <summary>
            Gets or sets a value that indicates whether the bitmap is shown in a single color.
            </summary>
        </member>
        <member name="P:C1.Framework.BitmapIconRenderer.Stretch">
            <summary>
            Gets or sets a <see cref="P:C1.Framework.BitmapIconRenderer.Stretch"/> enumeration value that describes how the shape fills its allocated space.
            </summary>
        </member>
        <member name="M:C1.Framework.BitmapIconRenderer.GetImage">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.C1Icon">
            <summary>
            Represents a visual icon that can be tinted and resized.
            </summary>
        </member>
        <member name="F:C1.Framework.C1Icon.DEFAULT_WIDTH">
            <summary>
            The default width of an icon.
            </summary>
        </member>
        <member name="F:C1.Framework.C1Icon.DEFAULT_HEIGHT">
            <summary>
            The default height of an icon.
            </summary>
        </member>
        <member name="M:C1.Framework.C1Icon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1Icon"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.C1Icon.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1Icon"/> class.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
        </member>
        <member name="M:C1.Framework.C1Icon.#ctor(System.String,System.Drawing.Size,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1Icon"/> class with specified key, size and color.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
            <param name="size">The icon size.</param>
            <param name="color">Indicates the icon color.</param>
        </member>
        <member name="M:C1.Framework.C1Icon.#ctor(System.String,System.Drawing.Size,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1Icon"/> class with specified key, size and color.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
            <param name="size">The icon size.</param>
            <param name="color">Indicates the icon color.</param>
            <param name="backColor">The icon's background color.</param>
        </member>
        <member name="P:C1.Framework.C1Icon.Color">
            <summary>
            Gets or sets the color used to paint the icon. The default value is Transparent.
            </summary>
            <remarks>If this property is not set, the actual color will be inherited from the parent container foreground color.</remarks>
        </member>
        <member name="P:C1.Framework.C1Icon.IsEmptyColor">
            <summary>
            Returns the <see cref="T:System.Boolean"/> value specifying whether icon color is set.
            </summary>
        </member>
        <member name="P:C1.Framework.C1Icon.BackColor">
            <summary>
            Gets or sets the color used to paint the icon's background. The default value is Transparent.
            </summary>
            <remarks>This property doesn't apply to C1BitmapIcon.</remarks>
        </member>
        <member name="P:C1.Framework.C1Icon.IsEmptyBackColor">
            <summary>
            Returns the <see cref="T:System.Boolean"/> value specifying whether icon background color is set.
            </summary>
        </member>
        <member name="P:C1.Framework.C1Icon.Padding">
            <summary>
            Gets or sets the padding of the icon.
            </summary>
        </member>
        <member name="P:C1.Framework.C1Icon.Size">
            <summary>
            Gets or sets the size of icon to show.
            </summary>
            <remarks>If this property is not set, then icon will be resized according to the parent container size.</remarks>
        </member>
        <member name="P:C1.Framework.C1Icon.Key">
            <summary>
            Gets or sets the key used to retrieve the image.
            </summary>
        </member>
        <member name="P:C1.Framework.C1Icon.IsFreeScale">
            <summary>
            Gets a value indicating whether this C1Icon can free scale or not.
            </summary>
        </member>
        <member name="M:C1.Framework.C1Icon.OnPropertyChanged(System.String)">
            <summary>
            Fires the <see cref="E:C1.Framework.C1Icon.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="E:C1.Framework.C1Icon.PropertyChanged">
            <summary>
            Fires when property value was changed.
            </summary>
        </member>
        <member name="M:C1.Framework.C1Icon.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes this <see cref="T:C1.Framework.C1Icon"/> into an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that will receive the icon definition.</param>
        </member>
        <member name="M:C1.Framework.C1Icon.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads this <see cref="T:C1.Framework.C1Icon"/> from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the icon definition.</param>
        </member>
        <member name="M:C1.Framework.C1Icon.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:C1.Framework.C1FontIcon">
            <summary>
            Represents an icon created from a font.
            </summary>
        </member>
        <member name="M:C1.Framework.C1FontIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1FontIcon"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.C1FontIcon.#ctor(System.String,System.Drawing.Size,System.Drawing.Color,System.String,System.Drawing.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1FontIcon"/> class with specified key, size and color.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
            <param name="size">The icon size.</param>
            <param name="color">Indicates the icon color.</param>
            <param name="text">The text to show.</param>
            <param name="font">The icon font.</param>
        </member>
        <member name="M:C1.Framework.C1FontIcon.#ctor(System.String,System.Drawing.Size,System.Drawing.Color,System.String,System.Drawing.Font,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1FontIcon"/> class with specified key, size and color.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
            <param name="size">The icon size.</param>
            <param name="color">Indicates the icon color.</param>
            <param name="text">The text to show.</param>
            <param name="font">The icon font.</param>
            <param name="backColor">The icon's background color.</param>
        </member>
        <member name="P:C1.Framework.C1FontIcon.Text">
            <summary>
            Gets the text that represents the icon in the specified <see cref="T:System.Drawing.FontFamily"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.C1FontIcon.Font">
            <value>
            Gets or sets icon font.
            </value>
            <remarks>If this property is not set, actual font will be inherited from the parent container.</remarks>
        </member>
        <member name="M:C1.Framework.C1FontIcon.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes this <see cref="T:C1.Framework.C1Icon"/> into an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that will receive the icon definition.</param>
        </member>
        <member name="M:C1.Framework.C1FontIcon.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads this <see cref="T:C1.Framework.C1Icon"/> from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the icon definition.</param>
        </member>
        <member name="M:C1.Framework.C1FontIcon.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:C1.Framework.C1FontIcon.Equals(System.Object)">
            <summary>
            Indicates whether the specified object is a <see cref="T:C1.Framework.C1FontIcon"/> and has the same
            property values as this icon object.
            </summary>
            <param name="obj">The object to test</param>
            <returns>true if the obj parameter is a <see cref="T:C1.Framework.C1FontIcon"/> and has the same
            property values as this icon object. otherwise, false</returns>
        </member>
        <member name="T:C1.Framework.Stretch">
            <summary>
            Describes how content is resized to fill its allocated space.
            </summary>
        </member>
        <member name="F:C1.Framework.Stretch.None">
            <summary>
            The content preserves its original size.
            </summary>
        </member>
        <member name="F:C1.Framework.Stretch.Fill">
            <summary>
            The content is resized to fill the destination dimensions. The aspect ratio is not preserved.
            </summary>
        </member>
        <member name="F:C1.Framework.Stretch.Uniform">
            <summary>
            The content is resized to fit in the destination dimensions while it preserves its native aspect ratio.
            </summary>
        </member>
        <member name="T:C1.Framework.ShowAsMonochrome">
            <summary>
            Describes how bitmap content is recolored.
            </summary>
        </member>
        <member name="F:C1.Framework.ShowAsMonochrome.Never">
            <summary>
            The bitmap should use original colors.
            </summary>
        </member>
        <member name="F:C1.Framework.ShowAsMonochrome.Always">
            <summary>
            The bitmap should be always shown as monochrome.
            </summary>
        </member>
        <member name="F:C1.Framework.ShowAsMonochrome.Auto">
            <summary>
            The bitmap coloring should be defined by the parent element.
            </summary>
        </member>
        <member name="T:C1.Framework.C1BitmapIcon">
            <summary>
            Represents an icon created from an image.
            </summary>
            <remarks>
            The file that you use should be a solid image on a transparent background.
            The bitmap image is expected to be a true bitmap that has transparent pixels and non-transparent pixels.
            The recommended format is PNG. Other file-format image sources will load but result in a solid block of the foreground color.
            <b>Caution:</b> Resizing bitmaps at runtime might hurt application performance and result in blurry images. Consider using fixed-size images where possible.
            </remarks>
        </member>
        <member name="M:C1.Framework.C1BitmapIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1BitmapIcon"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.C1BitmapIcon.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1BitmapIcon"/> class.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
        </member>
        <member name="M:C1.Framework.C1BitmapIcon.#ctor(System.String,System.Drawing.Size,System.Drawing.Color,System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1BitmapIcon"/> class with specified key, size and color.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
            <param name="size">The icon size.</param>
            <param name="color">Indicates the icon color.</param>
            <param name="image">The image to show.</param>
        </member>
        <member name="M:C1.Framework.C1BitmapIcon.#ctor(System.String,System.Drawing.Size,System.Drawing.Color,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1BitmapIcon"/> class with specified key, size and color.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
            <param name="size">The icon size.</param>
            <param name="color">Indicates the icon color.</param>
            <param name="imageList">The image list which should be used to retrieve the image.</param>
            <param name="imageIndex">The index of image in the image list.</param>
        </member>
        <member name="P:C1.Framework.C1BitmapIcon.Source">
            <summary>
            Gets or sets the image source.
            </summary>
        </member>
        <member name="P:C1.Framework.C1BitmapIcon.ImageList">
            <summary>
            Gets or sets the object that contains the images to display.
            </summary>
        </member>
        <member name="P:C1.Framework.C1BitmapIcon.ImageKey">
            <summary>
            Gets or sets the key of the small image in the SmallImageList.
            </summary>
        </member>
        <member name="P:C1.Framework.C1BitmapIcon.ImageIndex">
            <summary>
            Gets or sets the index of the small image in the SmallImageList.
            </summary>
        </member>
        <member name="P:C1.Framework.C1BitmapIcon.ShowAsMonochrome">
            <summary>
            Gets or sets a value that indicates whether the bitmap is shown in a single color.
            </summary>
        </member>
        <member name="P:C1.Framework.C1BitmapIcon.Stretch">
            <summary>
            Gets or sets a <see cref="P:C1.Framework.C1BitmapIcon.Stretch"/> enumeration value that describes how the shape fills its allocated space.
            </summary>
        </member>
        <member name="M:C1.Framework.C1BitmapIcon.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes this <see cref="T:C1.Framework.C1Icon"/> into an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that will receive the icon definition.</param>
        </member>
        <member name="M:C1.Framework.C1BitmapIcon.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads this <see cref="T:C1.Framework.C1Icon"/> from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the icon definition.</param>
        </member>
        <member name="M:C1.Framework.C1BitmapIcon.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:C1.Framework.C1BitmapIcon.Equals(System.Object)">
            <summary>
            Indicates whether the specified object is a <see cref="T:C1.Framework.C1BitmapIcon"/> and has the same
            property values as this icon object.
            </summary>
            <param name="obj">The object to test</param>
            <returns>true if the obj parameter is a <see cref="T:C1.Framework.C1BitmapIcon"/> and has the same
            property values as this icon object. otherwise, false</returns>
        </member>
        <member name="T:C1.Framework.C1VectorIcon">
            <summary>
            Represents an icon created from a vectorial definition.
            </summary>
        </member>
        <member name="M:C1.Framework.C1VectorIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1VectorIcon"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.C1VectorIcon.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1VectorIcon"/> class.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
        </member>
        <member name="M:C1.Framework.C1VectorIcon.#ctor(System.String,System.Drawing.Size,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1VectorIcon"/> class with specified key, size and color.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
            <param name="size">The icon size.</param>
            <param name="color">Indicates the icon color.</param>
        </member>
        <member name="M:C1.Framework.C1VectorIcon.#ctor(System.String,System.Drawing.Size,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1VectorIcon"/> class with specified key, size and color.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
            <param name="size">The icon size.</param>
            <param name="color">Indicates the icon color.</param>
            <param name="backColor">The icon background color.</param>
        </member>
        <member name="P:C1.Framework.C1VectorIcon.ViewBox">
            <summary>
            Gets or sets the rectangle which determines panning and zooming of content inside the parent container.
            </summary>
            <remarks>If this property is not set, then icon stretches according to the <see cref="T:System.Drawing.Size"/> property value.</remarks>
        </member>
        <member name="P:C1.Framework.C1VectorIcon.IsFreeScale">
            <summary>
            Gets a value indicating whether this C1Icon can free scale or not.
            </summary>
        </member>
        <member name="P:C1.Framework.C1VectorIcon.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
            <remarks>The actual stroke thickness is calculated according to icon scale.</remarks>
        </member>
        <member name="P:C1.Framework.C1VectorIcon.Stroke">
            <summary>
            Gets or sets the color used to paint the icon stroke. The default value is Transparent.
            </summary>
        </member>
        <member name="P:C1.Framework.C1VectorIcon.AllowSmoothing">
            <summary>
            Determines whether smoothing (antialiasing) is applied to lines and curves and the edges of filled areas.
            </summary>
        </member>
        <member name="T:C1.Framework.C1PolygonIcon">
            <summary>
            Represents an icon created from a vectorial definition.
            </summary>
        </member>
        <member name="M:C1.Framework.C1PolygonIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1PolygonIcon" /> class.
            </summary>
        </member>
        <member name="M:C1.Framework.C1PolygonIcon.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1PolygonIcon"/> class.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
        </member>
        <member name="P:C1.Framework.C1PolygonIcon.Points">
            <summary>
            Gets or sets the points that describe the shape.
            </summary>
        </member>
        <member name="P:C1.Framework.C1PolygonIcon.IsClosed">
            <summary>
            Gets or sets whether the last point will connect with the first one.
            </summary>
        </member>
        <member name="M:C1.Framework.C1PolygonIcon.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes this <see cref="T:C1.Framework.C1Icon"/> into an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that will receive the icon definition.</param>
        </member>
        <member name="M:C1.Framework.C1PolygonIcon.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads this <see cref="T:C1.Framework.C1Icon"/> from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the icon definition.</param>
        </member>
        <member name="M:C1.Framework.C1PolygonIcon.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:C1.Framework.C1PolygonIcon.Equals(System.Object)">
            <summary>
            Indicates whether the specified object is a <see cref="T:C1.Framework.C1PolygonIcon"/> and has the same
            property values as this icon object.
            </summary>
            <param name="obj">The object to test</param>
            <returns>true if the obj parameter is a <see cref="T:C1.Framework.C1PolygonIcon"/> and has the same
            property values as this icon object. otherwise, false</returns>
        </member>
        <member name="T:C1.Framework.C1PathIcon">
            <summary>
            Represents an icon created from a path string.
            </summary>
        </member>
        <member name="M:C1.Framework.C1PathIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1PathIcon" /> class.
            </summary>
        </member>
        <member name="M:C1.Framework.C1PathIcon.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1PathIcon"/> class.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
        </member>
        <member name="M:C1.Framework.C1PathIcon.#ctor(System.String,System.Drawing.Size,System.Drawing.Color,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1PathIcon"/> class with specified key, size and color.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
            <param name="size">The icon size.</param>
            <param name="color">Indicates the icon color.</param>
            <param name="data">The svg string describing shape to display.</param>
        </member>
        <member name="M:C1.Framework.C1PathIcon.#ctor(System.String,System.Drawing.Size,System.Drawing.Color,System.String,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1PathIcon"/> class with specified key, size and color.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
            <param name="size">The icon size.</param>
            <param name="color">Indicates the icon color.</param>
            <param name="data">The svg string describing shape to display.</param>
            <param name="backColor">The icon's background color.</param>
        </member>
        <member name="P:C1.Framework.C1PathIcon.Data">
            <summary>
            Gets or sets the svg string describing the shape.
            </summary>
        </member>
        <member name="M:C1.Framework.C1PathIcon.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes this <see cref="T:C1.Framework.C1Icon"/> into an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that will receive the icon definition.</param>
        </member>
        <member name="M:C1.Framework.C1PathIcon.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads this <see cref="T:C1.Framework.C1Icon"/> from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the icon definition.</param>
        </member>
        <member name="M:C1.Framework.C1PathIcon.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:C1.Framework.C1PathIcon.Equals(System.Object)">
            <summary>
            Indicates whether the specified object is a <see cref="T:C1.Framework.C1PathIcon"/> and has the same
            property values as this icon object.
            </summary>
            <param name="obj">The object to test</param>
            <returns>true if the obj parameter is a <see cref="T:C1.Framework.C1PathIcon"/> and has the same
            property values as this icon object. otherwise, false</returns>
        </member>
        <member name="T:C1.Framework.C1CompositeIcon">
            <summary>
            Represents an icon created from multiple icons.
            </summary>
        </member>
        <member name="M:C1.Framework.C1CompositeIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1CompositeIcon" /> class.
            </summary>
        </member>
        <member name="M:C1.Framework.C1CompositeIcon.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1CompositeIcon"/> class.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
        </member>
        <member name="P:C1.Framework.C1CompositeIcon.Icons">
            <summary>
            Gets the list of icons that will be rendered.
            </summary>
        </member>
        <member name="M:C1.Framework.C1CompositeIcon.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads this <see cref="T:C1.Framework.C1Icon"/> from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the icon definition.</param>
        </member>
        <member name="M:C1.Framework.C1CompositeIcon.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes this <see cref="T:C1.Framework.C1Icon"/> into an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that will receive the icon definition.</param>
        </member>
        <member name="M:C1.Framework.C1CompositeIcon.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:C1.Framework.C1CompositeIcon.Equals(System.Object)">
            <summary>
            Indicates whether the specified object is a <see cref="T:C1.Framework.C1CompositeIcon"/> and has the same
            property values as this icon object.
            </summary>
            <param name="obj">The object to test</param>
            <returns>true if the obj parameter is a <see cref="T:C1.Framework.C1CompositeIcon"/> and has the same
            property values as this icon object. otherwise, false</returns>
        </member>
        <member name="T:C1.Framework.IconSet">
            <summary>
            Represents the set of icons of different sizes to use in a single UI element.
            </summary>
        </member>
        <member name="M:C1.Framework.IconSet.GetNextAvailableIcon(System.Drawing.Size)">
            <summary>
            Gets the next available icon of the requested size. If the icon of requested size is available in the icon set, it will be returned. 
            Otherwise, the icon of the next bigger size will be returned (or the biggest one icon of requested size is too big).
            </summary>
            <param name="size">The requested size</param>
            <returns>The icon of the next available size.</returns>
        </member>
        <member name="E:C1.Framework.IconSet.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="M:C1.Framework.IconSet.WriteXml(System.Xml.XmlWriter,System.String)">
            <summary>
            Writes this <see cref="T:C1.Framework.IconSet"/> into an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that will receive the icon set definition.</param>
            <param name="postfix">The string to use as a postfix part of the iconSet name.</param>
        </member>
        <member name="M:C1.Framework.IconSet.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads this <see cref="T:C1.Framework.IconSet"/> from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the icon set definition.</param>
        </member>
        <member name="M:C1.Framework.IconSet.Clone">
            <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
            <returns>A new object that is a deep copy of this instance.</returns>
        </member>
        <member name="M:C1.Framework.IconSet.Equals(System.Object)">
            <summary>
            Indicates whether the specified object is a <see cref="T:C1.Framework.IconSet"/> and contains the same
            set of icons as this icon set.
            </summary>
            <param name="obj">The object to test</param>
            <returns>true if the obj parameter is a <see cref="T:C1.Framework.IconSet"/> and ontains the same
            set of icons as this icon set; otherwise, false</returns>
        </member>
        <member name="T:C1.Framework.C1IconTemplate">
            <summary>
            This factory class returns the most common predefined icons.
            </summary>
        </member>
        <member name="M:C1.Framework.C1IconTemplate.#ctor(System.Func{C1.Framework.C1Icon})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1IconTemplate" /> class.
            </summary>
            <param name="createIcon">The function that creates the icon. New instances must be created every time.</param>
        </member>
        <member name="M:C1.Framework.C1IconTemplate.CreateIcon">
            <summary>
            Creates a new icon.
            </summary>
        </member>
        <member name="M:C1.Framework.C1IconTemplate.CreateIcon(System.Drawing.Size)">
            <summary>
            Creates a new icon with specified size.
            </summary>
            <param name="size">The icon size.</param>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Edit">
            <summary>
            Gets an icon representing an arrow pointing up.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Hamburger">
            <summary>
            Gets an icon representing a global navigation button.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Asterisk">
            <summary>
            Gets an icon representing an arrow pointing up.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ArrowUp">
            <summary>
            Gets an icon representing an arrow pointing up.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ArrowDown">
            <summary>
            Gets an icon representing an arrow pointing up.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ChevronUp">
            <summary>
            Gets an icon representing a chevron pointing up.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ChevronDown">
            <summary>
            Gets an icon representing a chevron pointing down.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ChevronLeft">
            <summary>
            Gets an icon representing a chevron pointing to the left.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ChevronRight">
            <summary>
            Gets an icon representing a chevron pointing to the right.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.TriangleNorth">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing up.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.TriangleSouth">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing down.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.TriangleEast">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing east.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.TriangleWest">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing west.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.TriangleSouthEast">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing south east.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.TriangleNorthEast">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing north east.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Star5">
            <summary>
            Gets an icon representing a 5-pointed star.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.PlusRounded">
            <summary>
            Gets an icon representing a rounded plus sign.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Checked">
            <summary>
            Gets the path for the Checked icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Unchecked">
            <summary>
            Gets the path for the Unchecked icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Grayed">
            <summary>
            Gets the path for the Grayed icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Collapsed">
            <summary>
            Gets the path for the Collapsed icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Expanded">
            <summary>
            Gets the path for the Expanded icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.DBCursor">
            <summary>
            Gets the path for the DBCursor icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.DBAdd">
            <summary>
            Gets the path for the DBAdd icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ErrorInfoCircle">
            <summary>
            Gets the path for the ErrorInfoCircle icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ErrorInfoMark">
            <summary>
            Gets the path for the ErrorInfoMark icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.FilterEditor">
            <summary>
            Gets the path for the FilterEditor icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.FilteredColumnStrips">
            <summary>
            Gets the path for the FilteredColumnStrips icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.FilteredColumnMark">
            <summary>
            Gets the path for the FilteredColumnMark icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.FilteredColumnRectangle">
            <summary>
            Gets the path for the FilteredColumnRectangle icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ExpressionEditor">
            <summary>
            Gets the path for the ExpressionEditor icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.DetailExpanded">
            <summary>
            Gets the path for the DetailExpanded icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.DetailCollapsed">
            <summary>
            Gets the path for the DetailCollapsed icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Pin">
            <summary>
            Gets the path for the Pin icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Unpin">
            <summary>
            Gets the path for the Unpin icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Ascending">
            <summary>
            Gets the path for the Ascending icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Descending">
            <summary>
            Gets the path for the Descending icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ColumnPickerToolIcon">
            <summary>
            Gets the path for the Column picker tool icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ColumnPickerSearchIcon">
            <summary>
            Gets the path for the Column picker search icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ColumnPickerClearIcon">
            <summary>
            Gets the path for the Column picker clear icon. Uses from FlexGrid control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.TrashBinIcon">
            <summary>
            Gets an icon representing a trash bin. Uses from FlexGrid filter editor.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.AddConditionIcon">
            <summary>
            Gets an icon representing a '+' sign. Uses from FlexGrid condition filter editor.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.AddConditionIconMnemonic">
            <summary>
            Gets an icon representing a '+' sign with underline to show that mnemonic key is available.  Uses from FlexGrid condition filter editor.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Office365Unchecked">
            <summary>
            Gets the path for the Unchecked icon. Uses from FlexGrid control with Office365 theme.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Office365Check">
            <summary>
            Gets the path for the Check sign. Uses from FlexGrid control with Office365 theme.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Office365Plus">
            <summary>
            Gets the path for the Plus sign. Uses from FlexGrid control with Office365 theme.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Office365Minus">
            <summary>
            Gets the path for the Minus sign. Uses from FlexGrid control with Office365 theme.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Office365Grayed">
            <summary>
            Gets the path for the Grayed icon. Uses from FlexGrid control with Office365 theme.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ThumbCenterDefault">
            <summary>
            Gets the path for the thumb center icon with default state. It is used in Input controls.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ThumbCenterHot">
            <summary>
            Gets the path for the thumb center icon with hot state. It is used in Input controls.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ThumbCenterPressed">
            <summary>
            Gets the path for the thumb center icon with pressed state.It is used in Input controls.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ThumbBorder">
            <summary>
            Gets the path for the thumb border icon. It is used in Input controls.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ThumbBack">
            <summary>
            Gets the path for the thumb back icon. It is used in Input controls.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.CheckMark">
            <summary>
            Gets the path for the CheckMark icon. It is used in Input controls.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.CheckBoxRect">
            <summary>
            Gets the path for the CheckBoxRect icon. It is used in Input controls.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.CheckBoxBack">
            <summary>
            Gets the path for the CheckBoxBack icon. It is used in Input controls.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.CheckBoxIndeterminate">
            <summary>
            Gets the path for the CheckBoxIndeterminate icon. It is used in Input controls.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.RadioCheck">
            <summary>
            Gets the path for the RadioChecked icon. It is used in Input controls.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.RadioBack">
            <summary>
            Gets the path for the RadioBack icon. It is used in Input controls.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.RadioBorder">
            <summary>
            Gets the path for the RadioUnchecked icon. It is used in Input controls.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.More">
            <summary>
            Gets the path for the More icon. It is used in Input controls.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Plus">
            <summary>
            Gets the path for the Plus icon. It is used in Input controls.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Minus">
            <summary>
            Gets the path for the Minus icon. It is used in Input controls.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ArrowUp2">
            <summary>
            Gets the path for the ArrowUp2 icon. It is used in Input controls.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ArrowDown2">
            <summary>
            Gets the path for the ArrowDown2 icon. It is used in Input controls.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ArrowRight">
            <summary>
            Gets the path for the ArrowRight icon. It is used in Input controls.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.TrueTypeFont">
            <summary>
            Gets the path for the True Type font icon. Uses from C1Fontpicker .net5.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.OpenTypeFont">
            <summary>
            Gets the path for the OpenType font icon. Uses from C1Fontpicker .net5.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Delete">
            <summary>
            Gets the path for the Delete icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Up">
            <summary>
            Gets the path for the Up icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Down">
            <summary>
            Gets the path for the Down icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Bold">
            <summary>
            Gets the path for the Bold icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Italic">
            <summary>
            Gets the path for the Italic icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Underline">
            <summary>
            Gets the path for the Underline icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Strikeout">
            <summary>
            Gets the path for the Strikeout icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ForeColor">
            <summary>
            Gets the path for the ForeColor icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.BackColor">
            <summary>
            Gets the path for the BackColor icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.BorderColor">
            <summary>
            Gets the path for the BorderColor icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Grid">
            <summary>
            Gets the path for the Grid icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.DownArrow">
            <summary>
            Gets the path for the DownArrow icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.UpArrow">
            <summary>
            Gets the path for the UpArrow icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Transparent">
            <summary>
            Gets the path for the Transparent icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Edit1">
            <summary>
            Gets the path for the Edit1 icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Plus1">
            <summary>
            Gets the path for the Plus1 icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Align">
            <summary>
            Gets the path for the Align icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.AlignLeft">
            <summary>
            Gets the path for the AlignLeft icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.AlignRight">
            <summary>
            Gets the path for the AlignRight icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.AlignTop">
            <summary>
            Gets the path for the AlignTop icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.AlignBottom">
            <summary>
            Gets the path for the AlignBottom icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.AlignTopLeft">
            <summary>
            Gets the path for the AlignTopLeft icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.AlignTopRight">
            <summary>
            Gets the path for the AlignTopRight icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.AlignBottomLeft">
            <summary>
            Gets the path for the AlignBottomLeft icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.AlignBottomRight">
            <summary>
            Gets the path for the AlignBottomRight icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Histogram">
            <summary>
            Gets the path for the Histogram icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Gradient">
            <summary>
            Gets the path for the Gradient icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Expression">
            <summary>
            Gets the path for the CheckMark icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.CheckBox">
            <summary>
            Gets the path for the CheckMark icon. Uses from RulesManager control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.ArrowLeft">
            <summary>
            Gets the path for the ArrowLeft icon. Uses from DbNavigator control. 
            </summary>
            <remarks>ViewBox 16x16</remarks>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.FirstRecord">
            <summary>
            Gets the path for the FirstRecord icon. Uses from DbNavigator control. 
            </summary>
            <remarks>ViewBox 16x16</remarks>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.LastRecord">
            <summary>
            Gets the path for the LastRecord icon. Uses from DbNavigator control. 
            </summary>
            <remarks>ViewBox 16x16</remarks>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Cancel">
            <summary>
            Gets the path for the Cancel icon. Uses from DbNavigator control. 
            </summary>
            <remarks>ViewBox 24x24</remarks>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.Refresh">
            <summary>
            Gets the path for the Refresh icon. Uses from DbNavigator control. 
            </summary>
            <remarks>ViewBox 24x24</remarks>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.MenuDown">
            <summary>
            Gets the path for the MoreItems icon. Uses from DbNavigator controls.
            </summary>
            <remarks>ViewBox 24x24</remarks>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.MenuRight">
            <summary>
            Gets the path for the MoreItems icon in vertical orientation. Uses from DbNavigator controls.
            </summary>
            <remarks>ViewBox 24x24</remarks>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.CloseButton">
            <summary>
            Gets the path for the CloseButton icon. Uses from Ribbon control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.RestoreButton">
            <summary>
            Gets the path for the RestoreButton icon. Uses from Ribbon control.
            </summary>        
        </member>
        <member name="P:C1.Framework.C1IconTemplate.MinimizeButton">
            <summary>
            Gets the path for the MinimizeButton icon. Uses from Ribbon control.
            </summary>        
        </member>
        <member name="P:C1.Framework.C1IconTemplate.MaximizeButton">
            <summary>
            Gets the path for the MaximizeButton icon. Uses from Ribbon control.
            </summary>
        </member>
        <member name="P:C1.Framework.C1IconTemplate.HelpButton">
            <summary>
            Gets the path for the HelpButton icon. Uses from Ribbon control.
            </summary>
        </member>
        <member name="T:C1.Framework.CompositeIconRenderer">
            <summary>
            Provides functionality for rendering a <see cref="T:C1.Framework.C1CompositeIcon"/> to an <see cref="T:System.Drawing.Image"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.CompositeIconRenderer.#ctor(C1.Framework.C1CompositeIcon,System.Int32)">
            <summary>
            Creates an instance of the inheritor of <see cref="T:C1.Framework.CompositeIconRenderer"/> class in accordance with the <see cref="T:C1.Framework.C1Icon"/> type.
            </summary>
            <param name="icon">The icon to render.</param>
            <param name="deviceDpi">The device dpi where the image will be used.</param>        
        </member>
        <member name="M:C1.Framework.CompositeIconRenderer.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.CompositeIconRenderer.Size">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.CompositeIconRenderer.IconRenderers">
            <summary>
            Gets the list of <see cref="T:C1.Framework.IconRenderer"/> that will be rendered.
            </summary>
        </member>
        <member name="M:C1.Framework.CompositeIconRenderer.GetImage">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.FontIconRenderer">
            <summary>
            Provides functionality for rendering a <see cref="T:C1.Framework.C1FontIcon"/> to an <see cref="T:System.Drawing.Image"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.FontIconRenderer.#ctor(C1.Framework.C1FontIcon,System.Int32)">
            <summary>
            Creates an instance of the inheritor of <see cref="T:C1.Framework.FontIconRenderer"/> class in accordance with the <see cref="T:C1.Framework.C1Icon"/> type.
            </summary>
            <param name="icon">The icon to render.</param>
            <param name="deviceDpi">The device dpi where the image will be used.</param>        
        </member>
        <member name="P:C1.Framework.FontIconRenderer.Size">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.FontIconRenderer.Text">
            <summary>
            Gets the text that represents the icon in the specified <see cref="T:System.Drawing.FontFamily"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.FontIconRenderer.Font">
            <value>
            Gets or sets icon font.
            </value>
        </member>
        <member name="P:C1.Framework.FontIconRenderer.TextFormatFlags">
            <summary>
            Gets or sets flags used to render text.
            </summary>
        </member>
        <member name="M:C1.Framework.FontIconRenderer.GetImage">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.IconElement">
            <summary>
            Represents a visual icon that can be tinted and resized.
            </summary>
        </member>
        <member name="M:C1.Framework.IconElement.CreateElement(C1.Framework.C1Icon)">
            <summary>
            Creates the <see cref="T:C1.Framework.IconElement"/> to show the <see cref="T:C1.Framework.C1Icon"/>.
            </summary>
            <param name="icon">The icon to show.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.IconElement.CreateElement(C1.Framework.C1Icon,C1.Framework.Style)">
            <summary>
            Creates the <see cref="T:C1.Framework.IconElement"/> to show the <see cref="T:C1.Framework.C1Icon"/>.
            </summary>
            <param name="icon">The icon to show.</param>
            <param name="style">The style of this IconElement.</param>
            <returns></returns>
        </member>
        <member name="F:C1.Framework.IconElement.DEFAULT_WIDTH">
            <summary>
            The default width of an icon.
            </summary>
        </member>
        <member name="F:C1.Framework.IconElement.DEFAULT_HEIGHT">
            <summary>
            The default height of an icon.
            </summary>
        </member>
        <member name="M:C1.Framework.IconElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.IconElement"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.IconElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.IconElement"/> class.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
        </member>
        <member name="M:C1.Framework.IconElement.#ctor(C1.Framework.C1Icon)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.IconElement"/> class.
            </summary>
            <param name="icon">The icon to show.</param>
        </member>
        <member name="M:C1.Framework.IconElement.#ctor(C1.Framework.C1Icon,C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.IconElement"/> class.
            </summary>
            <param name="icon">The icon to show.</param>
            <param name="style">The style of this IconElement.</param>
        </member>
        <member name="M:C1.Framework.IconElement.OnIconChanged(C1.Framework.C1Icon,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Updates element properties on icon property changes.
            </summary>
            <remarks>Implement it in derived classes for proper element initialization and update.</remarks>
            <param name="icon">The changed icon.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> object.</param>
        </member>
        <member name="M:C1.Framework.IconElement.InitializeUI">
            <summary>
            Initializes the UI.
            </summary>
            <remarks>Override it to provide custom initialization. 
            Always call base class implementation to reset dirty flag.</remarks>
        </member>
        <member name="M:C1.Framework.IconElement.FinalizeUI">
            <summary>
            Finalizes the user interface. This method is called when element is removed from UI.
            </summary>
            <remarks>Override this method if you need to release resources.</remarks>
        </member>
        <member name="M:C1.Framework.IconElement.SetIconDirty(System.Boolean)">
            <summary>
            Notifies C1Icon element that UI should be re-initialized for the next drawing operation.
            </summary>
            <remarks>Call this method from property setters to make sure that new property value is nohored at drawing.</remarks>
        </member>
        <member name="P:C1.Framework.IconElement.Color">
            <summary>
            Gets or sets the color used to paint the icon.
            </summary>
        </member>
        <member name="P:C1.Framework.IconElement.BackColor">
            <summary>
            Gets or sets the color used to paint the icon's background.
            </summary>
        </member>
        <member name="P:C1.Framework.IconElement.Padding">
            <summary>
            Gets or sets the padding of the icon.
            </summary>
        </member>
        <member name="P:C1.Framework.IconElement.Key">
            <summary>
            Gets or sets the key used to retrieve the image.
            </summary>
        </member>
        <member name="P:C1.Framework.IconElement.ShouldRasterize">
            <summary>
            Determines whether icon needs bitmap cache for drawing.
            </summary>
        </member>
        <member name="P:C1.Framework.IconElement.ShouldResize">
            <summary>
            Determines whether icon image should be resized according to the C1Icon element size.
            </summary>
        </member>
        <member name="P:C1.Framework.IconElement.RenderBox">
            <summary>
            Returns rectangle (in the icon coordinates) to render icon.
            </summary>
            <remarks>Returned rectangle honors <see cref="P:C1.Framework.IconElement.Padding"/> property value.</remarks>
        </member>
        <member name="M:C1.Framework.IconElement.RescaleConstantsForDpi(System.Int32,System.Int32)">
            <summary>
            Provides constants for rescaling the control when a DPI change occurs.
            </summary>
            <param name="deviceDpiOld">The DPI value prior to the change.</param>
            <param name="deviceDpiNew">The DPI value after the change.</param>
        </member>
        <member name="M:C1.Framework.IconElement.RenderContent(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the element contents into the specified <see cref="T:System.Drawing.Graphics"/> object at the specified location.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the <see cref="T:C1.Framework.Element"/> will be rendered.</param>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> where the <see cref="T:C1.Framework.Element"/> contents will be rendered.</param>
        </member>
        <member name="M:C1.Framework.IconElement.Layout(System.Drawing.Graphics)">
            <summary>
            Layout this element based on its style and contents.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object used to measure the <see cref="T:C1.Framework.Element"/>.</param>
        </member>
        <member name="M:C1.Framework.IconElement.ToString">
            <summary>
            Gets a string representation of this <see cref="T:C1.Framework.C1BitmapIcon"/>.
            </summary>
            <returns>A string representation of this <see cref="T:C1.Framework.C1BitmapIcon"/>.</returns>
        </member>
        <member name="M:C1.Framework.IconElement.GetImage(System.Drawing.Image@,System.Int32,System.Int32)">
            <summary>
            Gets the image represented by this <see cref="T:C1.Framework.C1Icon"/>.
            </summary>
            <param name="image"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns>True if returned bitmap should be disposed when no longer needed; False otherwise.</returns>
        </member>
        <member name="T:C1.Framework.FontIconElement">
            <summary>
            Represents an icon created from a font.
            </summary>
        </member>
        <member name="M:C1.Framework.FontIconElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.FontIconElement"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.FontIconElement.#ctor(C1.Framework.C1FontIcon)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.FontIconElement"/> class.
            </summary>
            <param name="icon">The icon to show.</param>
        </member>
        <member name="M:C1.Framework.FontIconElement.#ctor(C1.Framework.C1FontIcon,C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.FontIconElement"/> class.
            </summary>
            <param name="icon">The icon to show.</param>
            <param name="style">The style of this IconElement.</param>
        </member>
        <member name="P:C1.Framework.FontIconElement.Text">
            <summary>
            Gets the text that represents the icon in the specified <see cref="T:System.Drawing.FontFamily"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.FontIconElement.Font">
            <value>
            Gets or sets icon font.
            </value>
            <remarks>If this property is not set, actual font will be inherited from the parent container.</remarks>
        </member>
        <member name="P:C1.Framework.FontIconElement.ShouldRasterize">
            <summary>
            Determines whether icon needs bitmap cache for drawing. Returns False.
            </summary>
        </member>
        <member name="P:C1.Framework.FontIconElement.ShouldResize">
            <summary>
            Determines whether icon image should be resized according to the C1Icon element size. Returns False.
            </summary>
        </member>
        <member name="M:C1.Framework.FontIconElement.OnIconChanged(C1.Framework.C1Icon,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Updates element properties on icon property changes.
            </summary>
            <remarks>Implement it in derived classes for proper element initialization and update.</remarks>
            <param name="icon">The changed icon.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> object.</param>
        </member>
        <member name="M:C1.Framework.FontIconElement.ToString">
            <summary>
            Gets a string representation of this <see cref="T:C1.Framework.C1FontIcon"/>.
            </summary>
            <returns>A string representation of this <see cref="T:C1.Framework.C1FontIcon"/>.</returns>
        </member>
        <member name="M:C1.Framework.FontIconElement.RenderIcon(C1.Framework.Style,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders content into the given rectangle.
            </summary>
            <param name="s"></param>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="T:C1.Framework.BitmapIconElement">
            <summary>
            Represents an icon created from an image.
            </summary>
            <remarks>
            The file that you use should be a solid image on a transparent background.
            The bitmap image is expected to be a true bitmap that has transparent pixels and non-transparent pixels.
            The recommended format is PNG. Other file-format image sources will load but result in a solid block of the foreground color.
            <b>Caution:</b> Resizing bitmaps at runtime might hurt application performance and result in blurry images. Consider using fixed-size images where possible.
            </remarks>
        </member>
        <member name="M:C1.Framework.BitmapIconElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.BitmapIconElement"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.BitmapIconElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.BitmapIconElement"/> class.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
        </member>
        <member name="M:C1.Framework.BitmapIconElement.#ctor(C1.Framework.C1BitmapIcon)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.BitmapIconElement"/> class.
            </summary>
            <param name="icon">The icon to show.</param>
        </member>
        <member name="M:C1.Framework.BitmapIconElement.#ctor(C1.Framework.C1BitmapIcon,C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.BitmapIconElement"/> class.
            </summary>
            <param name="icon">The icon to show.</param>
            <param name="style">The style of this IconElement.</param>
        </member>
        <member name="M:C1.Framework.BitmapIconElement.OnIconChanged(C1.Framework.C1Icon,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Updates element pproperties on icon property changes.
            </summary>
            <remarks>Implement it in derived classes for proper elemen intitialization and update.</remarks>
            <param name="icon">The changed icon.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> object.</param>
        </member>
        <member name="M:C1.Framework.BitmapIconElement.InitializeUI">
            <summary>
            Initializes the UI.
            </summary>
        </member>
        <member name="P:C1.Framework.BitmapIconElement.Source">
            <summary>
            Gets or sets the image source.
            </summary>
        </member>
        <member name="P:C1.Framework.BitmapIconElement.ShowAsMonochrome">
            <summary>
            Gets or sets a value that indicates whether the bitmap is shown in a single color.
            </summary>
        </member>
        <member name="P:C1.Framework.BitmapIconElement.Stretch">
            <summary>
            Gets or sets a <see cref="P:C1.Framework.BitmapIconElement.Stretch"/> enumeration value that describes how the shape fills its allocated space.
            </summary>
        </member>
        <member name="P:C1.Framework.BitmapIconElement.ShouldResize">
            <summary>
            Determines whether icon image should be resized according to the C1Icon element size.
            </summary>
        </member>
        <member name="T:C1.Framework.VectorIconElement">
            <summary>
            Represents an icon created from a vectorial definition.
            </summary>
        </member>
        <member name="F:C1.Framework.VectorIconElement._path">
            <summary>
            Gets the geometry of the vector.
            </summary>
        </member>
        <member name="M:C1.Framework.VectorIconElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.VectorIconElement"/> class.
            </summary>
        </member>
        <member name="M:C1.Framework.VectorIconElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.VectorIconElement"/> class.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
        </member>
        <member name="M:C1.Framework.VectorIconElement.#ctor(C1.Framework.C1VectorIcon)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.C1VectorIcon"/> class.
            </summary>
            <param name="icon">The icon to show.</param>
        </member>
        <member name="M:C1.Framework.VectorIconElement.#ctor(C1.Framework.C1VectorIcon,C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.VectorIconElement"/> class.
            </summary>
            <param name="icon">The icon to show.</param>
            <param name="style">The style of this IconElement.</param>
        </member>
        <member name="M:C1.Framework.VectorIconElement.InitializeUI">
            <summary>
            Initializes the UI.
            </summary>
        </member>
        <member name="M:C1.Framework.VectorIconElement.FinalizeUI">
            <summary>
            Finalizes the user interface. This method is called when element is removed from UI.
            </summary>
            <remarks>Override this method if you need to release resources.</remarks>
        </member>
        <member name="P:C1.Framework.VectorIconElement.ViewBox">
            <summary>
            Gets or sets the rectangle (in the icon coordinates) which will determine image placement.
            </summary>
            <remarks>Don't set this property if you want to autosize icon according to the <see cref="T:C1.Framework.C1Icon"/> element bounds.</remarks>
        </member>
        <member name="P:C1.Framework.VectorIconElement.StrokeThickness">
            <summary>
            The stroke thickness.
            </summary>
            <remarks>The actual stroke thickness is calculated according to icon scale.</remarks>
        </member>
        <member name="P:C1.Framework.VectorIconElement.Stroke">
            <summary>
            The stroke color.
            </summary>
        </member>
        <member name="P:C1.Framework.VectorIconElement.AllowSmoothing">
            <summary>
            Determines whether smoothing (antialiasing) is applied to lines and curves and the edges of filled areas.
            </summary>
        </member>
        <member name="P:C1.Framework.VectorIconElement.ActualViewBox">
            <summary>
            Returns the rectangle which determines panning and zooming of content inside the parent container.
            </summary>
            <remarks>Returns the <see cref="P:C1.Framework.VectorIconElement.ViewBox"/> property value. 
            If the <see cref="P:C1.Framework.VectorIconElement.ViewBox"/> property is not set, returns graphic path bounds.</remarks>
        </member>
        <member name="M:C1.Framework.VectorIconElement.OnIconChanged(C1.Framework.C1Icon,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Updates element properties when icon property changes.
            </summary>
            <remarks>Implement it in derived classes for proper element initialization and update.</remarks>
            <param name="icon">The changed icon.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> object.</param>
        </member>
        <member name="T:C1.Framework.PolygonIconElement">
            <summary>
            Represents an icon created from a vectorial definition.
            </summary>
        </member>
        <member name="M:C1.Framework.PolygonIconElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.PolygonIconElement" /> class.
            </summary>
        </member>
        <member name="M:C1.Framework.PolygonIconElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.PolygonIconElement"/> class.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
        </member>
        <member name="M:C1.Framework.PolygonIconElement.#ctor(C1.Framework.C1PolygonIcon)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.PolygonIconElement"/> class.
            </summary>
            <param name="icon">The icon to show.</param>
        </member>
        <member name="M:C1.Framework.PolygonIconElement.#ctor(C1.Framework.C1PolygonIcon,C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.PolygonIconElement"/> class.
            </summary>
            <param name="icon">The icon to show.</param>
            <param name="style">The style of this IconElement.</param>
        </member>
        <member name="P:C1.Framework.PolygonIconElement.Points">
            <summary>
            Gets the points that describe the shape.
            </summary>
        </member>
        <member name="P:C1.Framework.PolygonIconElement.IsClosed">
            <summary>
            Gets whether the last point will connect with the first one.
            </summary>
        </member>
        <member name="M:C1.Framework.PolygonIconElement.OnIconChanged(C1.Framework.C1Icon,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Updates element properties on icon property changes.
            </summary>
            <remarks>Implement it in derived classes for proper element initialization and update.</remarks>
            <param name="icon">The changed icon.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> object.</param>
        </member>
        <member name="T:C1.Framework.PathIconElement">
            <summary>
            Represent an icon created from a path string.
            </summary>
        </member>
        <member name="M:C1.Framework.PathIconElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.PathIconElement" /> class.
            </summary>
        </member>
        <member name="M:C1.Framework.PathIconElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.PathIconElement"/> class.
            </summary>
            <param name="key">String used as a key to retrieve the image.</param>
        </member>
        <member name="M:C1.Framework.PathIconElement.#ctor(C1.Framework.C1PathIcon)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.PathIconElement"/> class.
            </summary>
            <param name="icon">The icon to show.</param>
        </member>
        <member name="M:C1.Framework.PathIconElement.#ctor(C1.Framework.C1PathIcon,C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.PathIconElement"/> class.
            </summary>
            <param name="icon">The icon to show.</param>
            <param name="style">The style of this IconElement.</param>
        </member>
        <member name="P:C1.Framework.PathIconElement.Data">
            <summary>
            Gets or sets the svg string describing the shape.
            </summary>
        </member>
        <member name="M:C1.Framework.PathIconElement.OnIconChanged(C1.Framework.C1Icon,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Updates element properties on icon property changes.
            </summary>
            <remarks>Implement it in derived classes for proper element initialization and update.</remarks>
            <param name="icon">The changed icon.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> object.</param>
        </member>
        <member name="T:C1.Framework.CompositeIconElement">
            <summary>
            Present an icon created from multiple icons.
            </summary>
        </member>
        <member name="M:C1.Framework.CompositeIconElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.CompositeIconElement" /> class.
            </summary>
        </member>
        <member name="M:C1.Framework.CompositeIconElement.#ctor(C1.Framework.C1CompositeIcon)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.CompositeIconElement" /> class.
            </summary>
            <param name="icon">The icon to show.</param>
        </member>
        <member name="M:C1.Framework.CompositeIconElement.#ctor(C1.Framework.C1CompositeIcon,C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.CompositeIconElement"/> class.
            </summary>
            <param name="icon">The icon to show.</param>
            <param name="style">The style of this IconElement.</param>
        </member>
        <member name="M:C1.Framework.CompositeIconElement.InitializeUI">
            <summary>
            Initializes the UI.
            </summary>
        </member>
        <member name="M:C1.Framework.CompositeIconElement.OnIconChanged(C1.Framework.C1Icon,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Updates element properties on icon property changes.
            </summary>
            <remarks>Implement it in derived classes for proper element initialization and update.</remarks>
            <param name="icon">The changed icon.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> object.</param>
        </member>
        <member name="P:C1.Framework.CompositeIconElement.Children">
            <summary>
            Gets or sets the list of child elements contained in this <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.CompositeIconElement.Layout(System.Drawing.Graphics)">
            <summary>
            Layout this element based on its style and contents.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object used to measure the <see cref="T:C1.Framework.Element"/>.</param>
        </member>
        <member name="T:C1.Framework.IconRenderer">
            <summary>
            Provides basic functionality for rendering a <see cref="T:C1.Framework.C1Icon"/> to an <see cref="T:System.Drawing.Image"/>.
            </summary>
        </member>
        <member name="F:C1.Framework.IconRenderer.DefaultDpi">
            <summary>
            Gets a default value of dpi.
            </summary>
        </member>
        <member name="M:C1.Framework.IconRenderer.CreateRenderer(C1.Framework.C1Icon,System.Int32)">
            <summary>
            Creates an instance of the inheritor of <see cref="T:C1.Framework.IconRenderer"/> class in accordance with the <see cref="T:C1.Framework.C1Icon"/> type.
            </summary>
            <param name="icon">The icon to render.</param>
            <param name="deviceDpi">The device dpi where the image will be used.</param>        
        </member>
        <member name="M:C1.Framework.IconRenderer.#ctor(C1.Framework.C1Icon,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.IconRenderer"/> class.
            </summary>
            <param name="icon">The icon to render.</param>
            <param name="deviceDpi">The device dpi where the image will be used.</param>
        </member>
        <member name="M:C1.Framework.IconRenderer.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.Framework.IconRenderer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; 
            false to release only unmanaged resources.</param>
        </member>
        <member name="P:C1.Framework.IconRenderer.Icon">
            <summary>
            Gets the icon to render.
            </summary>
        </member>
        <member name="P:C1.Framework.IconRenderer.RightToLeft">
            <summary>
            Gets or sets whether the <see cref="T:C1.Framework.C1Icon"/> should be drawn using right-to-left layout.
            </summary>
        </member>
        <member name="P:C1.Framework.IconRenderer.Color">
            <summary>
            Gets or sets the color used to paint the icon.
            </summary>
        </member>
        <member name="P:C1.Framework.IconRenderer.BackColor">
            <summary>
            Gets or sets the color used to paint the icon's background.
            </summary>
            <remarks>This property doesn't apply to BitmapIconRenderer.</remarks>
        </member>
        <member name="P:C1.Framework.IconRenderer.Padding">
            <summary>
            Gets or sets the padding of the icon.
            </summary>
        </member>
        <member name="P:C1.Framework.IconRenderer.Size">
            <summary>
            Gets or sets the size of icon to show.
            </summary>
        </member>
        <member name="P:C1.Framework.IconRenderer.DeviceDpi">
            <summary>
            Gets or sets the device dpi where the image will be used.
            </summary>
        </member>
        <member name="P:C1.Framework.IconRenderer.ScaledSize">
            <summary>
            Gets the size of icon after scaling by <see cref="P:C1.Framework.IconRenderer.DeviceDpi"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.IconRenderer.CachedImage">
            <summary>
            Gets or sets the cached icon image.
            </summary>
        </member>
        <member name="M:C1.Framework.IconRenderer.ResetCache">
            <summary>
            Resets cached image.
            </summary>
        </member>
        <member name="M:C1.Framework.IconRenderer.GetImage">
            <summary>
            Gets the image that the icon was rendered into.
            </summary>        
        </member>
        <member name="T:C1.Framework.PathIconRenderer">
            <summary>
            Provides functionality for rendering a <see cref="T:C1.Framework.C1PathIcon"/> to an <see cref="T:System.Drawing.Image"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.PathIconRenderer.#ctor(C1.Framework.C1PathIcon,System.Int32)">
            <summary>
            Creates an instance of the inheritor of <see cref="T:C1.Framework.PathIconRenderer"/> class in accordance with the <see cref="T:C1.Framework.C1Icon"/> type.
            </summary>
            <param name="icon">The icon to render.</param>
            <param name="deviceDpi">The device dpi where the image will be used.</param>        
        </member>
        <member name="P:C1.Framework.PathIconRenderer.Data">
            <summary>
            Gets or sets the svg string describing the shape.
            </summary>
        </member>
        <member name="M:C1.Framework.PathIconRenderer.CreatePath">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.PolygonIconRenderer">
            <summary>
            Provides functionality for rendering a <see cref="T:C1.Framework.C1PolygonIcon"/> to an <see cref="T:System.Drawing.Image"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.PolygonIconRenderer.#ctor(C1.Framework.C1PolygonIcon,System.Int32)">
            <summary>
            Creates an instance of the inheritor of <see cref="T:C1.Framework.PolygonIconRenderer"/> class in accordance with the <see cref="T:C1.Framework.C1Icon"/> type.
            </summary>
            <param name="icon">The icon to render.</param>
            <param name="deviceDpi">The device dpi where the image will be used.</param>        
        </member>
        <member name="P:C1.Framework.PolygonIconRenderer.Points">
            <summary>
            Gets or sets the points that describe the shape.
            </summary>
        </member>
        <member name="P:C1.Framework.PolygonIconRenderer.IsClosed">
            <summary>
            Gets or sets whether the last point will connect with the first one.
            </summary>
        </member>
        <member name="P:C1.Framework.PolygonIconRenderer.IsFilled">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.PolygonIconRenderer.CreatePath">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.VectorIconRenderer">
            <summary>
            Provides basic functionality for rendering a <see cref="T:C1.Framework.C1VectorIcon"/> to an <see cref="T:System.Drawing.Image"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.VectorIconRenderer.#ctor(C1.Framework.C1VectorIcon,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.VectorIconRenderer"/> class.
            </summary>
            <param name="icon">The icon to render.</param>
            <param name="deviceDpi">The device dpi where the image will be used.</param>
        </member>
        <member name="M:C1.Framework.VectorIconRenderer.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.VectorIconRenderer.VectorIcon">
            <summary>
            Gets the icon to render.
            </summary>
        </member>
        <member name="P:C1.Framework.VectorIconRenderer.Size">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.VectorIconRenderer.ViewBox">
            <summary>
            Gets or sets the rectangle which determines panning and zooming of content inside the parent container.
            </summary>
        </member>
        <member name="P:C1.Framework.VectorIconRenderer.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
        </member>
        <member name="P:C1.Framework.VectorIconRenderer.Stroke">
            <summary>
            Gets or sets the color used to paint the icon stroke.
            </summary>
        </member>
        <member name="P:C1.Framework.VectorIconRenderer.AllowSmoothing">
            <summary>
            Determines whether smoothing (antialiasing) is applied to lines and curves and the edges of filled areas.
            </summary>
        </member>
        <member name="P:C1.Framework.VectorIconRenderer.IsFilled">
            <summary>
            Gets a value indicating whether to use a fill for the shape.
            </summary>
        </member>
        <member name="P:C1.Framework.VectorIconRenderer.HasStroke">
            <summary>
            Gets a value indicating whether the shape has a stroke.
            </summary>
        </member>
        <member name="M:C1.Framework.VectorIconRenderer.CreatePath">
            <summary>
            Creates a path for rendering an icon.
            </summary>
        </member>
        <member name="M:C1.Framework.VectorIconRenderer.GetImage">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.ButtonElement">
            <summary>
            Simple button with text and image.
            </summary>
        </member>
        <member name="P:C1.Framework.ButtonElement.UiaCall">
            <summary>
            Gets UIA calling mode.
            </summary>
        </member>
        <member name="E:C1.Framework.ButtonElement.Click">
            <summary>
            Occurs when the <see cref="T:C1.Framework.ButtonElement"/> element is clicked.
            </summary>
        </member>
        <member name="M:C1.Framework.ButtonElement.OnClick">
            <summary>
            Fires the <see cref="E:C1.Framework.ButtonElement.Click"/> event.
            </summary>
        </member>
        <member name="M:C1.Framework.ButtonElement.#ctor(C1.Framework.Style,System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.ButtonElement"/> with specified style and content.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.ButtonElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new <see cref="T:C1.Framework.ButtonElement"/> with specified style.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.ButtonElement.#ctor(System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.ButtonElement"/> with specified content.
            </summary>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.ButtonElement.#ctor">
            <summary>
            Initializes a new <see cref="T:C1.Framework.ButtonElement"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.ButtonElement.Text">
            <summary>
            Gets or sets the <see cref="T:System.String"/> value to display.
            </summary>
        </member>
        <member name="P:C1.Framework.ButtonElement.Image">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.ButtonElement.Image"/> to display.
            </summary>
        </member>
        <member name="M:C1.Framework.ButtonElement.GetTextElement">
            <summary>
            Returns reference to the <see cref="T:C1.Framework.TextElement"/> used to display text.
            </summary>
            <returns>The reference to the <see cref="T:C1.Framework.TextElement"/> if it exists; Null otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ButtonElement.GetTextElement(System.Boolean)">
            <summary>
            Returns reference to the <see cref="T:C1.Framework.TextElement"/> used to display text.
            </summary>
            <param name="force">If True and the <see cref="T:C1.Framework.TextElement"/> doesn't exist, this method will create it.</param>
            <returns>The reference to the <see cref="T:C1.Framework.TextElement"/> if it exists; Null otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ButtonElement.GetImageElement">
            <summary>
            Returns reference to the <see cref="T:C1.Framework.ImageElement"/> used to display image.
            </summary>
            <returns>The reference to the <see cref="T:C1.Framework.ImageElement"/> if it exists; Null otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ButtonElement.GetImageElement(System.Boolean)">
            <summary>
            Returns reference to the <see cref="T:C1.Framework.ImageElement"/> used to display image.
            </summary>
            <param name="force">If True and the <see cref="T:C1.Framework.ImageElement"/> doesn't exist, this method will create it.</param>
            <returns>The reference to the <see cref="T:C1.Framework.ImageElement"/> if it exists; Null otherwise.</returns>
        </member>
        <member name="P:C1.Framework.ButtonElement.ToolTipText">
            <summary>
            Gets or sets the <see cref="T:System.String"/> value to show as element tooltip.
            </summary>
        </member>
        <member name="M:C1.Framework.ButtonElement.PerformClick">
            <summary>
            Fires the <see cref="E:C1.Framework.ButtonElement.Click"/> event.
            </summary>
        </member>
        <member name="M:C1.Framework.ButtonElement.GetPushImage(System.Drawing.Size,System.String,System.Drawing.Font,System.Boolean,System.Windows.Forms.VisualStyles.PushButtonState)">
            <summary>
            Returns radiobox image.
            </summary>
            <param name="sz"></param>
            <param name="text"></param>
            <param name="font"></param>
            <param name="focused"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.ButtonElement.GetPushImage(System.Drawing.Image,System.Boolean,System.Windows.Forms.VisualStyles.PushButtonState)">
            <summary>
            Returns radiobox image.
            </summary>
            <param name="img"></param>
            <param name="focused"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.ButtonElement.GetDropDownButton(System.Drawing.Size,System.Windows.Forms.VisualStyles.ComboBoxState)">
            <summary>
            Returns drop-down button image.
            </summary>
            <param name="sz"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.ButtonElement.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called by the host control when the user presses a key and this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.ButtonElement.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called by the host control when the user releases a key and this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.ButtonElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user releases a mouse button over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:C1.Framework.ButtonElement.AcceleratorKey">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.ButtonElement.C1#Win#Accessibility#Items#BaseInterfaces#IUiaInvokeProvider#Invoke">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.RepeatButtonElement">
            <summary>
            Repeat button (fires repeatedly, like scrollbar buttons).
            </summary>
        </member>
        <member name="M:C1.Framework.RepeatButtonElement.#ctor(C1.Framework.Style,System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.RepeatButtonElement"/> with specified style and content.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.RepeatButtonElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new <see cref="T:C1.Framework.RepeatButtonElement"/> with specified style.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.RepeatButtonElement.#ctor(System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.RepeatButtonElement"/> with specified content.
            </summary>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.RepeatButtonElement.#ctor">
            <summary>
            Initializes a new <see cref="T:C1.Framework.RepeatButtonElement"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.RepeatButtonElement.Interval">
            <summary>
            Gets or sets the interval between clicks when the button is kept pressed, in milliseconds.
            </summary>
        </member>
        <member name="P:C1.Framework.RepeatButtonElement.Delay">
            <summary>
            Gets or sets the interval before the button starts firing click events when the button is kept pressed,
            in milliseconds.
            </summary>
        </member>
        <member name="P:C1.Framework.RepeatButtonElement.HoverDelay">
            <summary>
            Gets or sets the interval before the button starts firing click events when the mouse hovers over
            the button, in milliseconds.
            </summary>
        </member>
        <member name="M:C1.Framework.RepeatButtonElement.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user presses a mouse button over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.RepeatButtonElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user releases a mouse button over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.RepeatButtonElement.OnMouseLostCapture(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user releases the left mouse button over a disabled <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.RepeatButtonElement.OnMouseEnter(System.EventArgs)">
            <summary>
            Called by the host control when the mouse enters this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.RepeatButtonElement.OnMouseLeave(System.EventArgs)">
            <summary>
            Called by the host control when the mouse leaves this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:C1.Framework.CheckButtonElement">
            <summary>
            Check (toggle) button.
            </summary>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.#ctor(C1.Framework.Style,System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.CheckButtonElement"/> with specified style and content.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new <see cref="T:C1.Framework.CheckButtonElement"/> with specified style.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.#ctor(System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.CheckButtonElement"/> with specified content.
            </summary>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.#ctor">
            <summary>
            Initializes a new <see cref="T:C1.Framework.CheckButtonElement"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.CheckButtonElement.CheckboxImageElement">
            <summary>
            Returns reference to the <see cref="T:C1.Framework.Element"/> used to display chich box mark.
            </summary>
        </member>
        <member name="P:C1.Framework.CheckButtonElement.CheckBoxIndex">
            <summary>
            Gets or sets the index of the CheckBox element within the button.
            </summary>
            <remarks>
            <para>If there is no CheckBox element, this property returns -1. Setting the property to -1 removes the CheckBox element.</para>
            <para>Setting this property value greater than the number of children does not throw an exception. In this case, the
            maximum valid value (Children.Count) is used instead (e.g. CheckBoxIndex = 1000).</para>
            </remarks>
        </member>
        <member name="P:C1.Framework.CheckButtonElement.Checked">
            <summary>
            Gets or sets whether the button is checked.
            </summary>
        </member>
        <member name="P:C1.Framework.CheckButtonElement.CheckState">
            <summary>
            Gets or sets the button's CheckState (can be checked, unchecked, or indeterminate). 
            </summary>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.GetCheckboxImage(System.Windows.Forms.VisualStyles.CheckBoxState)">
            <summary>
            Gets a check box image as a function of the specified checkbox state.
            </summary>
            <param name="state">A value from the <see cref="T:System.Windows.Forms.VisualStyles.CheckBoxState"/> enumeration.</param>
            <returns>A checkbox image to be displayed in the element.</returns>
            <remarks>
            Override this method to provide your own images for checkboxes in various states.
            </remarks>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.GetCheckboxImage">
            <summary>
            Gets a check box image as a function of the current checkbox state.
            </summary>
            <returns>A checkbox image to be displayed in the element.</returns>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.OnMouseLeaveHover(System.EventArgs)">
            <summary>
            Called by the host control when the mouse leaves this <see cref="T:C1.Framework.Element"/>, 
            even if another element has captured the mouse.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user releases a mouse button over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.OnLostFocus(System.EventArgs)">
            <summary>
            Called by the host control when this <see cref="T:C1.Framework.Element"/> loses the focus.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called by the host control when the user releases a key and this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.OnClick">
            <summary>
            Fires the <see cref="E:C1.Framework.ButtonElement.Click"/> event.
            </summary>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.OnCheckedChanged">
            <summary>
            Called when check box state is changed.
            </summary>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.OnStateChanged(C1.Framework.Element.ElementFlags)">
            <summary>
            Called by the host control when the state of this <see cref="T:C1.Framework.Element"/> changes.
            </summary>
            <param name="oldFlags"><see cref="T:C1.Framework.Element.ElementFlags"/> that contains the state before the change.</param>
            <remarks>
            The state of an element is represented by a combination of <see cref="T:C1.Framework.Element.ElementFlags"/> values.
            Each individual flag is represented by a specific property, including <see cref="F:C1.Framework.Element.ElementFlags.Visible"/>, <see cref="F:C1.Framework.Element.ElementFlags.Enabled"/>,
            etc.
            </remarks>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user presses a mouse button over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.GetCheckedImage(System.Boolean)">
            <summary>
            Returns the check box image.
            </summary>
            <param name="isChecked"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.CheckButtonElement.GetImage(System.Windows.Forms.VisualStyles.CheckBoxState)">
            <summary>
            Returns the check box image.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Framework.RadioButtonElement">
            <summary>
            Radio button with text and image.
            </summary>
        </member>
        <member name="M:C1.Framework.RadioButtonElement.#ctor(C1.Framework.Style,System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.RadioButtonElement"/> with specified style and content.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.RadioButtonElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new <see cref="T:C1.Framework.RadioButtonElement"/> with specified style.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.RadioButtonElement.#ctor(System.Object[])">
            <summary>
            Initializes a new <see cref="T:C1.Framework.RadioButtonElement"/> with specified content.
            </summary>
            <param name="content">An <see cref="T:System.Array"/> of objects to display as content.</param>
        </member>
        <member name="M:C1.Framework.RadioButtonElement.#ctor">
            <summary>
            Initializes a new <see cref="T:C1.Framework.RadioButtonElement"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.RadioButtonElement.OnCheckedChanged">
            <summary>
            Called when check box state is changed.
            </summary>
        </member>
        <member name="M:C1.Framework.RadioButtonElement.GetRadioImage(System.Boolean)">
            <summary>
            Returns the radio box image.
            </summary>
            <param name="isChecked"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.RadioButtonElement.GetImage(System.Windows.Forms.VisualStyles.RadioButtonState)">
            <summary>
            Returns the radio box image.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Framework.ControlHostElement">
            <summary>
            <see cref="T:C1.Framework.Element"/> that hosts a WinForms <see cref="P:C1.Framework.ControlHostElement.Control"/>.
            </summary>
            <remarks>
            <para>In principle, this class allows hosting <i>any</i> WinForms control. In practice,
            not all controls work well in this scenario. For example, some controls cannot be freely
            resized, so the element should account for that.</para>
            <para>** Important Note: to allow hosting generic controls, this class stores a reference
            to itself in the contained control's <b>Tag</b> property. That means hosted controls cannot 
            use their <b>Tag</b> property for anything else.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.ControlHostElement.#ctor(C1.Framework.Style,System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ControlHostElement"/> with the specified style and control to host.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="hostedControl">The <see cref="P:C1.Framework.ControlHostElement.Control"/> that this element is hosting.</param>
        </member>
        <member name="M:C1.Framework.ControlHostElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ControlHostElement"/> with the specified style.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.ControlHostElement.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ControlHostElement"/> with the specified control to host.
            </summary>
            <param name="hostedControl">The <see cref="P:C1.Framework.ControlHostElement.Control"/> that this element is hosting.</param>
        </member>
        <member name="M:C1.Framework.ControlHostElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ControlHostElement"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.ControlHostElement.HostedControl">
            <summary>
            Gets the <see cref="P:C1.Framework.ControlHostElement.Control"/> that is hosted in this element.
            </summary>
        </member>
        <member name="P:C1.Framework.ControlHostElement.Control">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.ControlHostElement.Control"/> that this element is hosting.
            </summary>
        </member>
        <member name="M:C1.Framework.ControlHostElement.ApplyStyle">
            <summary>
            Copies style attributes from the element to the hosted control.
            </summary>
        </member>
        <member name="P:C1.Framework.ControlHostElement.HostPanel">
            <summary>
            If overriden in nested classes and returns not null,
            InputPanel will use the HostPanel to make <see cref="P:C1.Framework.ControlHostElement.Control"/> scrollable withing the element.
            </summary>
        </member>
        <member name="M:C1.Framework.ControlHostElement.UpdateControlBounds">
            <summary>
            Updates the hosted control bounds to match the element's bounds.
            </summary>
        </member>
        <member name="M:C1.Framework.ControlHostElement.OnTextChanged(System.EventArgs)">
            <summary>
            Override to get text change notifications.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.ControlHostElement.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the element into a given rectangle. 
            </summary>
            <param name="g">Graphics object where the element will be rendered.</param>
            <param name="r">Rectangle where the element will be rendered.</param>
        </member>
        <member name="M:C1.Framework.ControlHostElement.OnGotFocus(System.EventArgs)">
            <summary>
            Called by the host control when this <see cref="T:C1.Framework.Element"/> receives the focus.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.ControlHostElement.OnLostFocus(System.EventArgs)">
            <summary>
            Called by the host control when this <see cref="T:C1.Framework.Element"/> loses the focus.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.ControlHostElement.OnMouseLeave(System.EventArgs)">
            <summary>
            Called by the host control when the mouse leaves this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:C1.Framework.ProgressBarElement">
            <summary>
            Element equivalent to a WinForms <see cref="T:System.Windows.Forms.ProgressBar"/> control.
            </summary>
            <remarks>
            <para>This element has two styles: the regular (<see cref="P:C1.Framework.Element.Style"/>) is used
            to paint the element background; the <see cref="P:C1.Framework.ProgressBarElement.ProgressStyle"/> is used to paint the
            progress indicator.</para>
            <para>If either style is set to null (the default value), then the background and/or
            progress indicators are rendered using system's current visual theme.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.ProgressBarElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ProgressBarElement"/> with a given <see cref="T:C1.Framework.Style"/>.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> used to paint the element's background.</param>
        </member>
        <member name="M:C1.Framework.ProgressBarElement.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ProgressBarElement"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.ProgressBarElement.Minimum">
            <summary>
            Gets or sets the minimum value of the progress bar range.
            </summary>
        </member>
        <member name="P:C1.Framework.ProgressBarElement.Maximum">
            <summary>
            Gets or sets the maximum value of the progress bar range.
            </summary>
        </member>
        <member name="P:C1.Framework.ProgressBarElement.Value">
            <summary>
            Gets or sets the current value of the progress bar range.
            </summary>
        </member>
        <member name="P:C1.Framework.ProgressBarElement.ProgressStyle">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Style"/> used to paint the progress bar.
            </summary>
            <remarks>
            If this property is set to null, then the progress is painted using the
            system's current visual theme.
            </remarks>
        </member>
        <member name="T:C1.Framework.ScrollablePanel">
            <summary>
            Panel that knows how to scroll child elements bigger than itself.
            </summary>
            <remarks>
            <para>The child elements are clipped to the bounds of the <b>ScrollablePanel</b>; 
            scrolling is done by setting the <see cref="P:C1.Framework.ScrollablePanel.ScrollPosition"/> property, 
            which works like the <b>ScrollPosition</b> in the <see cref="T:C1.Framework.XView"/> control.</para>
            <para>This class only implements the scrollable (client) area of a scrollable
            control. It doesn't have scrollbars or buttons. For that, use the 
            <see cref="T:C1.Framework.ScrollBarPanel"/> or <see cref="T:C1.Framework.ScrollableStackPanel"/> classes
            (or implement your own scrollable panel).</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.ScrollablePanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ScrollablePanel"/> element with the pecified style options.
            </summary>
            <param name="s">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.ScrollablePanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ScrollablePanel"/> element.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollablePanel.ScrollPosition">
            <summary>
            Negative pixel offset (like the <see cref="T:C1.Framework.XView"/> control).
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollablePanel.ContentElement">
            <summary>
            <see cref="T:C1.Framework.Element"/> that contains the content to be scrolled.
            </summary>
        </member>
        <member name="M:C1.Framework.ScrollablePanel.ScrollIntoView(C1.Framework.Element)">
            <summary>
            Scrolls a given <see cref="T:C1.Framework.Element"/> into view.
            </summary>
            <param name="e"><see cref="T:C1.Framework.Element"/> to scroll into view.</param>
        </member>
        <member name="M:C1.Framework.ScrollablePanel.ScrollIntoView(System.Drawing.Rectangle)">
            <summary>
            Scrolls a given <see cref="T:System.Drawing.Rectangle"/> into view.
            </summary>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> to scroll into view.</param>
        </member>
        <member name="P:C1.Framework.ScrollablePanel.SmoothScrolling">
            <summary>
            Gets or sets whether the scrolling should be performed in steps.
            </summary>
            <remarks>
            <para>Setting this property to true causes the panel to scroll its contents
            in steps when the <see cref="P:C1.Framework.ScrollablePanel.ScrollPosition"/> property changes.
            The result is a smooth scrolling effect, as opposed to the instant change applied 
            when <b>SmoothScrolling</b> is set to false.</para>
            </remarks>
        </member>
        <member name="E:C1.Framework.ScrollablePanel.ScrollPositionChanged">
            <summary>
            Event that occurs when the <see cref="P:C1.Framework.ScrollablePanel.ScrollPosition"/> property changes.
            </summary>
        </member>
        <member name="M:C1.Framework.ScrollablePanel.OnScrollPositionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Framework.ScrollablePanel.ScrollPositionChanged"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:C1.Framework.ScrollBarPanel">
            <summary>
            Panel that plays the role of a <see cref="T:System.Windows.Forms.ScrollableControl"/>).
            </summary>
            <remarks>
            <para>This element contains a <see cref="P:C1.Framework.ScrollBarPanel.ScrollablePanel"/> that contains the 
            content to display and two <see cref="T:C1.Framework.ScrollBarElement"/> objects that are displayed
            as needed and control the scroll position on the main panel.</para>
            <para>If the panel contains an <see cref="T:C1.Framework.Element"/> that is <see cref="P:C1.Framework.Element.HitTestable"/>,
            then it will honor the mouse wheel in addition to the scrollbars.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.ScrollBarPanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ScrollBarPanel"/>.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> initially assigned to the new <b>ScrollBarPanel</b>.</param>
        </member>
        <member name="M:C1.Framework.ScrollBarPanel.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ScrollBarPanel"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarPanel.ScrollBars">
            <summary>
            Gets or sets which scrollbars should be visible.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarPanel.ForceScrollBars">
            <summary>
            Gets or sets whether the scrollbars defined by the <see cref="P:C1.Framework.ScrollBarPanel.ScrollBars"/>
            property should remain visible even if they are not needed.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarPanel.ButtonSize">
            <summary>
            Gets or sets the size of the scrollbar buttons.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarPanel.ScrollablePanel">
            <summary>
            Returns reference to the child <see cref="P:C1.Framework.ScrollBarPanel.ScrollablePanel"/> element.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarPanel.ContentElement">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Element"/> which displays the scrollable content.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarPanel.ScrollBarVertical">
            <summary>
            Returns reference to the vertical <see cref="T:C1.Framework.ScrollBarElement"/> element.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarPanel.ScrollBarHorizontal">
            <summary>
            Returns reference to the horizontal <see cref="T:C1.Framework.ScrollBarElement"/> element.
            </summary>
        </member>
        <member name="E:C1.Framework.ScrollBarPanel.ScrollPositionChanged">
            <summary>
            Occurs when <see cref="P:C1.Framework.ScrollBarPanel.ScrollablePanel"/>'s scroll position property changed.
            </summary>
        </member>
        <member name="M:C1.Framework.ScrollBarPanel.OnScrollPositionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Framework.ScrollBarPanel.ScrollPositionChanged"/> event.
            </summary>
        </member>
        <member name="T:C1.Framework.ScrollableStackPanel">
            <summary>
            Panel that contains two scroll buttons (<see cref="P:C1.Framework.ScrollableStackPanel.ButtonPrevious"/>, 
            <see cref="P:C1.Framework.ScrollableStackPanel.ButtonNext"/>) and a <see cref="P:C1.Framework.ScrollableStackPanel.ScrollablePanel"/> with 
            content that can be scrolled by clicking the buttons.
            </summary>
            <remarks>
            To use this class, assign the <see cref="T:C1.Framework.Element"/> that contains the 
            scrollable content should be assigned to the <see cref="P:C1.Framework.ScrollableStackPanel.ContentElement"/> 
            property.
            </remarks>
        </member>
        <member name="M:C1.Framework.ScrollableStackPanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ScrollableStackPanel"/>.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> initially assigned to the new <see cref="T:C1.Framework.ScrollableStackPanel"/>.</param>
        </member>
        <member name="M:C1.Framework.ScrollableStackPanel.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ScrollableStackPanel"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ScrollPosition">
            <summary>
            Gets or sets the scroll position (negative pixel offset, like the <see cref="T:C1.Framework.XView"/> control).
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ScrollStep">
            <summary>
            Gets or sets the scroll step, in pixels.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ScrollDelay">
            <summary>
            Gets or sets the time before buttons start firing while pressed, in milliseconds
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ScrollDelayHover">
            <summary>
            Gets or sets the time before buttons start firing when the mouse hovers over them
            (even without pressing them)
            </summary>
            <remarks>
            Set to zero or any negative value to disable the hover scroll feature.
            </remarks>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ScrollInterval">
            <summary>
            Gets or sets the time between scroll steps while buttons are pressed, in milliseconds.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ForceScrollButtons">
            <summary>
            Gets or sets whether the scroll buttons should be visible even when they are not needed.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ButtonPrevious">
            <summary>
            Returns reference to the <see cref="T:C1.Framework.RepeatButtonElement"/> element working for navigation to previous elements.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ButtonNext">
            <summary>
            Returns reference to the <see cref="T:C1.Framework.RepeatButtonElement"/> element working for navigation to next elements.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ScrollablePanel">
            <summary>
            Returns reference to the child <see cref="P:C1.Framework.ScrollableStackPanel.ScrollablePanel"/> element.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ContentElement">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Element"/> which displays the scrollable content.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableStackPanel.ButtonSize">
            <summary>
            Gets or sets the <see cref="T:System.Int32"/> value determining height and width in pixels of navigation buttons.
            
            </summary>
        </member>
        <member name="T:C1.Framework.ScrollBarElement">
            <summary>
            Element that looks and behaves like a WinForms <see cref="T:System.Windows.Forms.ScrollBar"/>.
            </summary>
            <remarks>
            <para>If no <see cref="T:C1.Framework.Style"/> is assigned to this element, it will render itself
            using Windows Visual Styles.</para>
            
            <para>Use the <see cref="P:C1.Framework.StackPanel.Orientation"/> property to control whether
            the <b>ScrollBarElement</b> should be rendered as a vertical or horizontal 
            scrollbar.</para>
            </remarks>
        </member>
        <member name="T:C1.Framework.ScrollBarElement.ScrollCommand">
            <summary>
            Specifies the command being executed by the ScrollBarElement.
            </summary>
        </member>
        <member name="M:C1.Framework.ScrollBarElement.#ctor(C1.Framework.Style,System.Boolean)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ScrollBarElement"/>.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> assigned to the new <b>ScrollBarElement</b>.</param>
            <param name="horizontal">Whether the scrollbar is horizontal or vertical.</param>
        </member>
        <member name="M:C1.Framework.ScrollBarElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a vertical <see cref="T:C1.Framework.ScrollBarElement"/>.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> assigned to the new <b>ScrollBarElement</b>.</param>
        </member>
        <member name="M:C1.Framework.ScrollBarElement.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ScrollBarElement"/> without a <see cref="T:C1.Framework.Style"/>.
            </summary>
            <param name="horizontal">Whether the scrollbar is horizontal or vertical.</param>
        </member>
        <member name="M:C1.Framework.ScrollBarElement.#ctor">
            <summary>
            Initializes a new instance of a vertical <see cref="T:C1.Framework.ScrollBarElement"/> without a <see cref="T:C1.Framework.Style"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.Minimum">
            <summary>
            Gets or sets the lower limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.Maximum">
            <summary>
            Gets or sets the upper limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.Value">
            <summary>
            Gets or sets a numeric value that represents the current position of the 
            scroll box on the <see cref="T:C1.Framework.ScrollBarElement"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.SmallChange">
            <summary>
            Gets or sets the value to be added to or subtracted from the <see cref="P:C1.Framework.ScrollBarElement.Value"/>
            property when the scroll box is moved a small distance (one 'line').
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.LargeChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the <see cref="P:C1.Framework.ScrollBarElement.Value"/> 
            property when the scroll box is moved a large distance (one 'page').
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.ProportionalThumb">
            <summary>
            Gets or sets whether the thumb size should reflect the ratio of the scroll bar 
            size to its range.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.ZoomFactor">
            <summary>
            Gets or sets the scale factor (used with Gc/C1Zoom).
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.LineUpButton">
            <summary>
            Gets the element that represents the 'line up' button.
            </summary>
            <remarks>
            You can use this value to style the <see cref="T:C1.Framework.ScrollBarElement"/>.
            </remarks>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.PageUpButton">
            <summary>
            Gets the element that represents the 'page up' button.
            </summary>
            <remarks>
            You can use this value to style the <see cref="T:C1.Framework.ScrollBarElement"/>.
            </remarks>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.Thumb">
            <summary>
            Gets the element that represents the scroll box ('thumb' element).
            </summary>
            <remarks>
            You can use this value to style the <see cref="T:C1.Framework.ScrollBarElement"/>.
            </remarks>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.PageDownButton">
            <summary>
            Gets the element that represents the 'page down' button.
            </summary>
            <remarks>
            You can use this value to style the <see cref="T:C1.Framework.ScrollBarElement"/>.
            </remarks>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.LineDownButton">
            <summary>
            Gets the element that represents the 'line down' button.
            </summary>
            <remarks>
            You can use this value to style the <see cref="T:C1.Framework.ScrollBarElement"/>.
            </remarks>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.ButtonSize">
            <summary>
            Gets or sets the size of the thumb and line up/down buttons in the scroll direction.
            </summary>
            <remarks>
            <para>By default, the scroll buttons are square. This property allows you to set the 
            button height in vertical scrollbars or the button width in horizontal scrollbars.</para>
            <para>Set this property to a value less than 1 to restore the default (square) sizes.</para>
            </remarks>
        </member>
        <member name="P:C1.Framework.ScrollBarElement.SmoothScrolling">
            <summary>
            Gets or sets whether the scrolling should be performed in steps.
            </summary>
            <remarks>
            <para>Setting this property to true causes the control to scroll in steps.
            The result is a smooth scrolling effect, as opposed to the instant change 
            applied when <b>SmoothScrolling</b> is set to false.</para>
            </remarks>
        </member>
        <member name="E:C1.Framework.ScrollBarElement.ValueChanged">
            <summary>
            Fires when the <see cref="P:C1.Framework.ScrollBarElement.Value"/> property has been changed.
            </summary>
        </member>
        <member name="T:C1.Framework.ScrollBarElement.ScrollBarLineButton">
            <summary>
            Buttons at either end of the scrollbar (line up/down)
            </summary>
        </member>
        <member name="T:C1.Framework.ScrollBarElement.ScrollBarPageButton">
            <summary>
            Area between the buttons and the thumb (page up/down)
            </summary>
        </member>
        <member name="T:C1.Framework.ScrollBarElement.ScrollBarThumb">
            <summary>
            Thumb (track)
            </summary>
        </member>
        <member name="T:C1.Framework.TabElement">
            <summary>
            Tab pages are represented by TabPageElement elements in the tab.TabArea.Children collection.
            </summary>
        </member>
        <member name="M:C1.Framework.TabElement.#ctor(C1.Framework.Style)">
            <summary>
            Creates a new instance of <see cref="T:C1.Framework.TabElement"/> with a given <see cref="T:C1.Framework.Style"/>.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> used to paint the element.</param>
        </member>
        <member name="M:C1.Framework.TabElement.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Framework.TabElement"/> 
            </summary>
        </member>
        <member name="P:C1.Framework.TabElement.TabArea">
            <summary>
            Gets the RowPanel that contains the tabs.
            </summary>
        </member>
        <member name="P:C1.Framework.TabElement.SelectedTab">
            <summary>
            Gets or sets the selectedTab TabPageElement.
            </summary>
        </member>
        <member name="M:C1.Framework.TabElement.AddTab(C1.Framework.TabPageElement)">
            <summary>
            Add new <see cref="T:C1.Framework.TabPageElement"/> into <see cref="T:C1.Framework.TabElement"/>
            </summary>
            <param name="pageElement"> <see cref="T:C1.Framework.TabPageElement"/> to add.</param>
        </member>
        <member name="E:C1.Framework.TabElement.SelectedTabChanged">
            <summary>
            Event raised when selected tab is changed.
            </summary>
        </member>
        <member name="P:C1.Framework.TabElement.TabPages">
            <summary>
            Gets the collection of <see cref="T:C1.Framework.TabPageElement"/> elements that represent the tab pages.
            </summary>
        </member>
        <member name="M:C1.Framework.TabElement.Clear">
            <summary>
            Removes all tabs and content from the TabElement.
            </summary>
        </member>
        <member name="M:C1.Framework.TabElement.GetParentTab(C1.Framework.Element)">
            <summary>
            Gets the TabPageElement that contains a given child element.
            </summary>
            <param name="childElement">Child element in the Tab.</param>
            <returns>The TabPageElement that contains the given child element, or
            null if the element does not belong to any tab pages.</returns>
        </member>
        <member name="P:C1.Framework.TabElement.HotkeyPrefix">
            <summary>
            Gets or sets <see cref="T:System.Drawing.Text.HotkeyPrefix"/> value used for show or hide mnemonics for tab headers.
            </summary>
        </member>
        <member name="M:C1.Framework.TabElement.OnSelectedTabChanged">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.TabElement.OnGotFocus(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.TabElement.Layout(System.Drawing.Graphics)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.TabPageElement">
            <summary>
            Represents the Tab header and refers to the content associated with this Tab.
            </summary>
        </member>
        <member name="M:C1.Framework.TabPageElement.#ctor(C1.Framework.Style,System.String)">
            <summary>
            Creates a new instance of <see cref="T:C1.Framework.TabPageElement"/> with a given <see cref="T:C1.Framework.Style"/> and text.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> used to paint the element.</param>
            <param name="text">Text shown in the tab page header.</param>
        </member>
        <member name="M:C1.Framework.TabPageElement.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:C1.Framework.TabPageElement"/> with a given text.
            </summary>
            <param name="text">Text shown in the tab page header.</param>
        </member>
        <member name="M:C1.Framework.TabPageElement.#ctor">
            <summary>
            Creates a new instance of <see cref="T:C1.Framework.TabPageElement"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.TabPageElement.Content">
            <summary>
            Gets or sets the content <see cref="T:C1.Framework.Element"/> associated with this tab.
            </summary>
        </member>
        <member name="M:C1.Framework.TabPageElement.OnCheckedChanged">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.TabPageElement.Clone">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.TextBoxElement">
            <summary>
            <see cref="T:C1.Framework.Element"/> that hosts a <see cref="P:C1.Framework.TextBoxElement.TextBox"/> control.
            </summary>
        </member>
        <member name="M:C1.Framework.TextBoxElement.#ctor(C1.Framework.Style,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.TextBoxElement"/> class with specified text and style settings.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="text">The text to display.</param>
        </member>
        <member name="M:C1.Framework.TextBoxElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.TextBoxElement"/> class with specified text.
            </summary>
            <param name="text">The text to display.</param>
        </member>
        <member name="M:C1.Framework.TextBoxElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.TextBoxElement"/> class with specified  style settings.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.TextBoxElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.TextBoxElement"/> class.
            </summary>
        </member>
        <member name="P:C1.Framework.TextBoxElement.Text">
            <summary>
            Gets or sets the current text.
            </summary>
        </member>
        <member name="P:C1.Framework.TextBoxElement.TextBox">
            <summary>
            Returns the reference to the hosted <see cref="P:C1.Framework.TextBoxElement.TextBox"/> control.
            </summary>
        </member>
        <member name="M:C1.Framework.TextBoxElement.UpdateAlignment">
            <summary>
            Updates the alignment of the text box control to reflect the current <see cref="T:C1.Framework.Style"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.TextBoxElement.LineCount">
            <summary>
            Gets the number of lines in the text box control.
            </summary>
        </member>
        <member name="M:C1.Framework.TextBoxElement.GetVisibleTextRect">
            <summary>
            Gets visible text bounds.
            </summary>
            <returns>Visible text bounds.</returns>
        </member>
        <member name="P:C1.Framework.TextBoxElement.TextBoxWithTabHandling.CueBanner">
            <summary>
            Gets or sets the textual cue, or tip, that is displayed by TextBox to prompt the user for information.
            </summary>
        </member>
        <member name="T:C1.Framework.TreePanel">
            <summary>
            Inherits from BasePanel and provides a tree panel with rows and columns.    
            </summary>
        </member>
        <member name="M:C1.Framework.TreePanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.TreePanel"/> element.
            </summary>
        </member>
        <member name="P:C1.Framework.TreePanel.ShowCheckBoxes">
            <summary>
            Gets or sets visible of the checkbox for a tree row.
            </summary>
        </member>
        <member name="P:C1.Framework.TreePanel.Rows">
            <summary>
            Gets the collection of <see cref="T:C1.Framework.TreeRow"/> elements.
            </summary>
        </member>
        <member name="P:C1.Framework.TreePanel.Columns">
            <summary>
            Gets the collection of <see cref="T:C1.Framework.GridColumn"/> elements.
            </summary>
        </member>
        <member name="P:C1.Framework.TreePanel.LevelOffset">
            <summary>
            Gets or sets the offset value for a tree row.
            </summary>
            <remarks>
            Used in the <see cref="P:C1.Framework.TreeRow.Level"/> * <see cref="P:C1.Framework.TreePanel.LevelOffset"/> formula.
            </remarks>
        </member>
        <member name="P:C1.Framework.TreePanel.TreeLine">
            <summary>
            Gets the settings for the tree lines. 
            </summary>
        </member>
        <member name="M:C1.Framework.TreePanel.Layout(System.Drawing.Graphics)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.TreePanel.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.TreePanel.FinalizeUI">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.TreeLine">
            <summary>
            Defines a list of settings for tree lines.
            </summary>
        </member>
        <member name="P:C1.Framework.TreeLine.Width">
            <summary>
            Gets or sets the width of lines.
            </summary>
        </member>
        <member name="P:C1.Framework.TreeLine.Style">
            <summary>
             Gets or sets the style of dashed lines.
            </summary>
        </member>
        <member name="P:C1.Framework.TreeLine.Color">
            <summary>
            Gets or sets the color of lines.
            </summary>
        </member>
        <member name="P:C1.Framework.TreeLine.Visible">
            <summary>
            Gets or sets a value indicating displays lines or not.
            </summary>
        </member>
        <member name="T:C1.Framework.TreeCollection`1">
            <summary>
            Represents a base collection for <see cref="P:C1.Framework.TreePanel.Columns"/> and <see cref="P:C1.Framework.TreePanel.Rows"/>.
            </summary>    
        </member>
        <member name="M:C1.Framework.TreeCollection`1.#ctor(C1.Framework.Element)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.TreeCollection`1"/> class.
            </summary>
            <param name="parent">The parent element of this collection.</param>
        </member>
        <member name="P:C1.Framework.TreeCollection`1.Parent">
            <summary>
            Gets the parent element of this collection.
            </summary>
        </member>
        <member name="M:C1.Framework.TreeCollection`1.Add">
            <summary>
            Creates and adds an object to the end of the <see cref="T:C1.Framework.TreeCollection`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.TreeCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.TreeColumnCollection">
            <summary>
            Represents a collection of <see cref="T:C1.Framework.GridColumn"/> elements for <see cref="P:C1.Framework.TreePanel.Columns"/>.
            </summary>    
        </member>
        <member name="M:C1.Framework.TreeColumnCollection.#ctor(C1.Framework.TreePanel)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.TreeColumnCollection"/> class.
            </summary>
            <param name="treePanel">The parent tree panel of this collection.</param>
        </member>
        <member name="M:C1.Framework.TreeColumnCollection.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.TreeColumnCollection.InsertItem(System.Int32,C1.Framework.GridColumn)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.TreeColumnCollection.SetItem(System.Int32,C1.Framework.GridColumn)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.TreeColumnCollection.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.TreeRowCollection">
            <summary>
            Represents a collection of <see cref="T:C1.Framework.TreeRow"/> elements for <see cref="P:C1.Framework.TreePanel.Rows"/>.
            </summary>    
        </member>
        <member name="M:C1.Framework.TreeRowCollection.#ctor(C1.Framework.TreeRow)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.TreeRowCollection"/> class.
            </summary>
            <param name="parent">The parent tree row of this collection.</param>
        </member>
        <member name="P:C1.Framework.TreeRowCollection.ParentRow">
            <summary>
            Gets the parent tree row of this collection.
            </summary>
        </member>
        <member name="M:C1.Framework.TreeRowCollection.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.TreeRowCollection.InsertItem(System.Int32,C1.Framework.TreeRow)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.TreeRowCollection.SetItem(System.Int32,C1.Framework.TreeRow)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.TreeRowCollection.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.TreeRow">
            <summary>
            Represents a tree panel row element.
            </summary>
        </member>
        <member name="M:C1.Framework.TreeRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.TreeRow"/> class.
            </summary>
        </member>
        <member name="P:C1.Framework.TreeRow.TreePanel">
            <summary>
            Gets the parent tree panel of this <see cref="T:C1.Framework.TreeRow"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.TreeRow.ParentRow">
            <summary>
            Gets the parent row of this <see cref="T:C1.Framework.TreeRow"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.TreeRow.Level">
            <summary>
            Gets the level of this <see cref="T:C1.Framework.TreeRow"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.TreeRow.ExpandButton">
            <summary>
            Gets the button to change the expanded state for this <see cref="T:C1.Framework.TreeRow"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.TreeRow.CheckBox">
            <summary>
            Gets the checkbox for this <see cref="T:C1.Framework.TreeRow"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.TreeRow.Expanded">
            <summary>
            Gets or sets the expanded state value for this <see cref="T:C1.Framework.TreeRow"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.TreeRow.Rows">
            <summary>
            Gets the collection of child rows for this <see cref="T:C1.Framework.TreeRow"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.TreeRow.GetAllRows">
            <summary>
            Returns a collection with this row, all of its child rows, and all of the child rows of child rows.
            </summary>
        </member>
        <member name="M:C1.Framework.TreeRow.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.TreeRow.HitTest(System.Drawing.Point)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.TreeRow.GetExpandButtonElement">
            <summary>
            Returns a button instance for <see cref="P:C1.Framework.TreeRow.ExpandButton"/> property.
            </summary>
        </member>
        <member name="M:C1.Framework.TreeRow.GetCheckBoxElement">
            <summary>
            Returns a checkbox instance for <see cref="P:C1.Framework.TreeRow.CheckBox"/> property.
            </summary>
        </member>
        <member name="M:C1.Framework.TreeRow.FinalizeUI">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.ExpandButtonElement">
            <summary>
            Represents a button with icon for <see cref="T:C1.Framework.TreeRow"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.ExpandButtonElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ExpandButtonElement"/> class.
            </summary>
        </member>
        <member name="P:C1.Framework.ExpandButtonElement.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.ExpandButtonElement.OnCheckedChanged">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.ExpandButtonElement.ExpandedIcon">
            <summary>
            Gets the <see cref="T:C1.Framework.C1Icon"/> for the expanded state of the row.
            </summary>
        </member>
        <member name="P:C1.Framework.ExpandButtonElement.CollapsedIcon">
            <summary>
            Gets the <see cref="T:C1.Framework.C1Icon"/> for the collapsed state of the row.
            </summary>
        </member>
        <member name="M:C1.Framework.ExpandButtonElement.FinalizeUI">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.CheckBoxButtonElement">
            <summary>
            Represents a button with checkbox for <see cref="T:C1.Framework.TreeRow"/>.
            </summary>
        </member>
        <member name="E:C1.Framework.CheckBoxButtonElement.CheckedChanged">
            <summary>
            Event raised when checked/unchecked
            </summary>
        </member>
        <member name="M:C1.Framework.CheckBoxButtonElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.CheckBoxButtonElement"/> class.
            </summary>
        </member>
        <member name="P:C1.Framework.CheckBoxButtonElement.CheckIcon">
            <summary>
            Gets the <see cref="T:C1.Framework.C1Icon"/> for the checked state of the checkBox.
            </summary>
        </member>
        <member name="P:C1.Framework.CheckBoxButtonElement.UncheckedIcon">
            <summary>
            Gets the <see cref="T:C1.Framework.C1Icon"/> for the unchecked state of the checkBox.
            </summary>
        </member>
        <member name="P:C1.Framework.CheckBoxButtonElement.IndeterminateIcon">
            <summary>
            Gets the <see cref="T:C1.Framework.C1Icon"/> for the indeterminate state of the checkBox.
            </summary>
        </member>
        <member name="P:C1.Framework.CheckBoxButtonElement.ShowIndeterminate">
            <summary>
            Gets or sets a value determines whether to use Indeterminate icon or not.
            </summary>
        </member>
        <member name="M:C1.Framework.CheckBoxButtonElement.GetIconElement">
            <summary>
            Returns reference to the <see cref="T:C1.Framework.TextElement"/> used to display text.
            </summary>
            <returns>The reference to the <see cref="T:C1.Framework.TextElement"/> if it exists; Null otherwise.</returns>
        </member>
        <member name="M:C1.Framework.CheckBoxButtonElement.FinalizeUI">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.CheckBoxButtonElement.OnCheckedChanged">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.CheckBoxButtonElement.UpdateIcon">
            <summary>
            Updates icon element
            </summary>
        </member>
        <member name="T:C1.Framework.BasePanel">
            <summary>
            Base class for all <see cref="T:C1.Framework.Element"/> object that contain child elements.
            </summary>
            <remarks>
            <para>This class extends <see cref="T:C1.Framework.Element"/> and implements the <see cref="P:C1.Framework.BasePanel.Children"/> property.</para>
            <para>This class acts like a static canvas. It has no layout logic other than sizing itself to fit its children.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.BasePanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.BasePanel"/>.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> object used to measure and render this <see cref="T:C1.Framework.BasePanel"/>.</param>
        </member>
        <member name="M:C1.Framework.BasePanel.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.BasePanel"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.BasePanel.Children">
            <summary>
            Gets or sets the list of child elements contained in this <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.BasePanel.Layout(System.Drawing.Graphics)">
            <summary>
            Layout this element based on its style and contents.
            </summary>
            <param name="g">Graphics object used to measure the element.</param>
        </member>
        <member name="T:C1.Framework.ContentElement">
            <summary>
            <para>Abstract class for elements that display text or images.</para>
            
            <para>Derived classes should override <see cref="M:C1.Framework.ContentElement.GetValue"/> method to 
            provide the content (text, images, formatted values).</para>
            
            <para>This class does not have child elements.</para>
            </summary>
        </member>
        <member name="M:C1.Framework.ContentElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ContentElement"/>.
            </summary>
            <param name="style">Style for the new element.</param>
        </member>
        <member name="M:C1.Framework.ContentElement.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ContentElement"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.ContentElement.GetValue">
            <summary>
            Gets the value represented by this <see cref="T:C1.Framework.ContentElement"/>.
            </summary>
            <returns>Object to be rendered as this element's content.</returns>
            <remarks>
            The value is an object that the <see cref="T:C1.Framework.Style"/> class can measure and render, usually a string,
            an <see cref="T:System.Drawing.Image"/>, or an <see cref="T:System.IFormattable"/> object.
            </remarks>
        </member>
        <member name="M:C1.Framework.ContentElement.RenderContent(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the element contents into the specified <see cref="T:System.Drawing.Graphics"/> object at the specified location.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the <see cref="T:C1.Framework.Element"/> will be rendered.</param>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> where the <see cref="T:C1.Framework.Element"/> contents will be rendered.</param>
        </member>
        <member name="M:C1.Framework.ContentElement.Layout(System.Drawing.Graphics)">
            <summary>
            Layout this element based on its style and contents.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object used to measure the <see cref="T:C1.Framework.Element"/>.</param>
        </member>
        <member name="M:C1.Framework.ContentElement.ToString">
            <summary>
            Gets a string representation of this <see cref="T:C1.Framework.ContentElement"/>.
            </summary>
            <returns>A string representation of this <see cref="T:C1.Framework.ContentElement"/>.</returns>
        </member>
        <member name="T:C1.Framework.DockPanel">
            <summary>
            The <see cref="T:C1.Framework.DockPanel"/> is a layout panel, that layouts children elements to the left, right, top, bottom or center of the panel.
            </summary>
        </member>
        <member name="M:C1.Framework.DockPanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.DockPanel"/> with the specified style.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.DockPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.DockPanel"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.DockPanel.AddChild(C1.Framework.Element,System.Windows.Forms.DockStyle)">
            <summary>
            Adds child element with the specified <see cref="T:System.Windows.Forms.DockStyle"/> option.
            </summary>
            <param name="e">The <see cref="T:C1.Framework.Element"/> to add.</param>
            <param name="dock">The <see cref="T:System.Windows.Forms.DockStyle"/> option to use for the added child element.</param>
        </member>
        <member name="M:C1.Framework.DockPanel.SetDock(C1.Framework.Element,System.Windows.Forms.DockStyle)">
            <summary>
            Changes the <see cref="T:System.Windows.Forms.DockStyle"/> option for the specified child element.
            </summary>
            <param name="e">The <see cref="T:C1.Framework.Element"/> to change.</param>
            <param name="dock">The new <see cref="T:System.Windows.Forms.DockStyle"/> option to use.</param>
        </member>
        <member name="M:C1.Framework.DockPanel.GetDock(C1.Framework.Element)">
            <summary>
            Returns the <see cref="T:System.Windows.Forms.DockStyle"/> option used for the specified child element.
            </summary>
            <param name="e">The child <see cref="T:C1.Framework.Element"/> to check.</param>
            <returns>The new <see cref="T:System.Windows.Forms.DockStyle"/> option used for the specified child element.</returns>
        </member>
        <member name="M:C1.Framework.DockPanel.Clone">
            <summary>
            Returns a clone of this element.
            </summary>
            <returns>A clone of this element.</returns>
        </member>
        <member name="T:C1.Framework.IControlHostElement">
            <summary>
            Interface implemented by WinForms controls hosted in X elements.
            </summary>
            <remarks>
            This interface allows the <see cref="T:C1.Framework.XView"/> control to manage WinForms controls 
            contained in C1.Framework elements.
            </remarks>
        </member>
        <member name="P:C1.Framework.IControlHostElement.Control">
            <summary>
            Gets a reference to the <see cref="P:C1.Framework.IControlHostElement.Control"/> that this <see cref="T:C1.Framework.Element"/> is hosting.
            </summary>
        </member>
        <member name="M:C1.Framework.IControlHostElement.UpdateControlBounds">
            <summary>
            Updates the hosted control bounds to match the element's current bounds.
            </summary>
        </member>
        <member name="T:C1.Framework.IToolTipElement">
            <summary>
            Interface implemented by Elements that want to display tooltips when seen 
            in an XView.
            </summary>
        </member>
        <member name="P:C1.Framework.IToolTipElement.ToolTipText">
            <summary>
            Gets or sets the text that appears as a ToolTip for this <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="T:C1.Framework.IMnemonicElement">
            <summary>
            Interface implemented by elements that can process mnemonics.
            </summary>
        </member>
        <member name="M:C1.Framework.IMnemonicElement.HandleMnemonic">
            <summary>
            Method that gets called when the user presses the hot key that corresponds to this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <returns>True if the hot key was handled by the element, false otherwise.</returns>
        </member>
        <member name="T:C1.Framework.Element">
            <summary>
            <para>Base class for all elements, handles layout and styles. Instances of this
            class have no content and no children.</para>
            
            <para>Elements with content (and no children) derive from <see cref="T:C1.Framework.ContentElement"/>.</para>
            
            <para>Elements with children derive from <see cref="T:C1.Framework.BasePanel"/>.</para>
            
            <para>This class doesn't do much by itself except call virtual methods that can
            be overridden in derived classes. It can draw a background and borders with 
            no content, so it can be used to implement things like bars and spacers.</para>
            
            <para>It is designed to be very light-weight, since typical documents may create 
            thousands of these. Additional elements should be added to not-so-common derived 
            classes.</para>
            </summary>
        </member>
        <member name="T:C1.Framework.Element.ElementFlags">
            <summary>
            Flags that represent the state of an <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Dirty">
            <summary>
            Element should be laid out before it is rendered.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Visible">
            <summary>
            Element is visible.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.AutoWidth">
            <summary>
            The width of the element is automatically determined by its style and contents.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.AutoHeight">
            <summary>
            The height of the element is automatically determined by its style and contents.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Enabled">
            <summary>
            The element is enabled and may receive mouse and keyboard messages.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.HitTestable">
            <summary>
            The element recognizes mouse messages.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Focusable">
            <summary>
            The element recognizes keyboard messages.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.ShowFocus">
            <summary>
            The element should display a focus rectangle when it has the focus.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.TabStop">
            <summary>
            The element can receive the focus when the tab key is pressed.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Hot">
            <summary>
            The mouse is over the element.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Pressed">
            <summary>
            The mouse is over the element and the left button is pressed.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Isolated">
            <summary>
            The Hot state does not propagate automatically to the parent element.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Horizontal">
            <summary>
            Flow child elements in the horizontal direction.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.RightToLeft">
            <summary>
            Used for international applications where the language is written from right to left.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.InheritedRtl">
            <summary>
            Indicates if the value of RightToLeft property is inherited from the parent element.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.ElementFlags.Validated">
            <summary>
            Indicates if the contents was successfully validated.
            </summary>
        </member>
        <member name="T:C1.Framework.Element.LineBreak">
            <summary>
            Flags that represent the line-breaking behavior caused by an element when it is contained
            in a paragraph.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.LineBreak.None">
            <summary>
            The element does not cause line breaks.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.LineBreak.Before">
            <summary>
            Insert line breaks before the element.
            </summary>
        </member>
        <member name="F:C1.Framework.Element.LineBreak.After">
            <summary>
            Insert line breaks after the element.
            </summary>
        </member>
        <member name="F:C1.Framework.Element._parent">
            <summary>
            The parent <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="F:C1.Framework.Element._bounds">
            <summary>
            The <see cref="T:System.Drawing.Rectangle"/> that defines the position of the <see cref="T:C1.Framework.Element"/> within its parent.
            </summary>
        </member>
        <member name="F:C1.Framework.Element._style">
            <summary>
            The <see cref="P:C1.Framework.Element.Style"/> object that defines the appearance of this <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="F:C1.Framework.Element._flags">
            <summary>
            An <see cref="T:C1.Framework.Element.ElementFlags"/> value that defines the behavior of this <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.#ctor(C1.Framework.Style)">
            <summary>
            Creates a new instance of an <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="style">Style for the new element.</param>
        </member>
        <member name="M:C1.Framework.Element.#ctor">
            <summary>
            Creates a new instance of an <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Parent">
            <summary>
            Gets the element's parent, or null if this is the root element.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Root">
            <summary>
            Gets the element's top-level parent.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Style">
            <summary>
            Gets or sets the Style object used to render this Element.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.RenderStyle">
            <summary>
            Gets the element's style, or a default style if the element doesn't have one.
            This never returns null.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Visible">
            <summary>
            Gets or sets whether the element is visible.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsVisible">
            <summary>
            Gets whether this element and all its ancestors are visible.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Enabled">
            <summary>
            Gets or sets whether the element is enabled (can receive mouse and keyboard messages).
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsEnabled">
            <summary>
            Gets whether this element and all its ancestors are enabled.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.HitTestable">
            <summary>
            Gets or sets whether the element is hit-testable (receives mouse messages).
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Focusable">
            <summary>
            Gets or sets whether the element is focusable (receives keyboard messages).
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsFocusable">
            <summary>
            Gets whether this element can currently receive the focus.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.InheritedRtl">
            <summary>
            Gets or sets whether the value of RightToLeft property is inherited from the parent element.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.RightToLeft">
            <summary>
            Gets or sets whether the element should be drawn using right-to-left layout.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.ShowFocusRectangle">
            <summary>
            Gets or sets whether the element should display a focus rectangle when it has focus.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.Focus">
            <summary>
            Sets the focus to the host control and to this <see cref="T:C1.Framework.Element"/> within the host control.
            </summary>
            <returns>True if the focus was set successfully.</returns>
        </member>
        <member name="P:C1.Framework.Element.Focused">
            <summary>
            Gets a value that indicates whether this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.ContainsFocus">
            <summary>
            Gets a value that indicates whether this <see cref="T:C1.Framework.Element"/> or one of its children has the focus.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Validated">
            <summary>
            Gets or sets a value indicating if the contents was successfully validated.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsHot">
            <summary>
            Gets or sets whether the element should be displayed using the Style.Hot style.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.IsPressed">
            <summary>
            Gets or sets whether the element should be displayed using the Style.Pressed style.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Bounds">
            <summary>
            Gets or sets the element's bounds (size and location) within its parent element, in pixels.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Size">
            <summary>
            Gets or sets the size of the element.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.GetBounds(C1.Framework.Element)">
            <summary>
            Gets the element's bounds (size and location) within an arbitrary ancestor, in pixels.
            <param name="ancestor">Ancestor element (parent, grand-parent, etc).</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> that corresponds to the element's position 
            within the given <paramref name="ancestor"/>.</returns>
            </summary>
        </member>
        <member name="M:C1.Framework.Element.GetBounds(C1.Framework.Element,System.Boolean,System.Boolean)">
            <summary>
            Gets the element's bounds (size and location) within an arbitrary ancestor, in pixels.
            </summary>
            <param name="ancestor">Ancestor element (parent, grand-parent, etc).</param>
            <param name="contentArea">Whether to return the element's outer bounds or content area.</param>
            <param name="clip">Whether to clip the rectangle to the ancestor's content area.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> that corresponds to the element's position 
            within the given <paramref name="ancestor"/>.</returns>
        </member>
        <member name="P:C1.Framework.Element.ContentBounds">
            <summary>
            Client rectangle, in pixels.
            This discounts margins, borders, and padding.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Width">
            <summary>
            Element width. Set to -1 to let the element calculate it automatically.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Height">
            <summary>
            Element height. Set to -1 to let the element calculate it automatically.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Location">
            <summary>
            Gets or sets the location of the element within its parent.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Left">
            <summary>
            Gets or sets the horizontal position of the element within its parent.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Top">
            <summary>
            Gets or sets the vertical position of the element within its parent.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.Offset(System.Int32,System.Int32)">
            <summary>
            Adjusts the location of this element by the specified amount.
            </summary>
            <param name="x">Offset in the horizontal direction.</param>
            <param name="y">Offset in the vertical direction.</param>
        </member>
        <member name="P:C1.Framework.Element.IsDirty">
            <summary>
            Gets a value that indicates this element needs to be laid out.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.SetDirty(System.Boolean,System.Boolean)">
            <summary>
            Marks this element as dirty, forcing all parent and child elements to be laid out.
            </summary>
            <param name="dirty">Whether the element needs to be laid out.</param>
            <param name="layoutOnly">Whether <b>ContentElements</b> (e.g. elements without children, such as
            <see cref="T:C1.Framework.TextElement"/>, <see cref="T:C1.Framework.ImageElement"/>) also need to be laid out.</param>
        </member>
        <member name="M:C1.Framework.Element.SetDirty(System.Boolean)">
            <summary>
            Marks this element as dirty, forcing all parent and child elements to be laid out.
            </summary>
            <param name="dirty">Whether the element needs to be laid out.</param>
        </member>
        <member name="M:C1.Framework.Element.SetDirty">
            <summary>
            Marks this element as dirty, forcing all parent and child elements to be laid out.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.LineDescent">
            <summary>
            Gets the portion of the element that renders below the baseline.
            Usually non-zero only for text elements, depends on font.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.ForceLineBreak">
            <summary>
            Gets a <see cref="T:C1.Framework.Element.LineBreak"/> value that determines whether there should be
            line breaks before and/or after this <see cref="T:C1.Framework.Element"/> when it occurs in a paragraph.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.Children">
            <summary>
            Gets a list of child elements.
            </summary>
            <remarks>
            The base class always returns null; panel elements should be based on <see cref="T:C1.Framework.BasePanel"/>.
            </remarks>
        </member>
        <member name="P:C1.Framework.Element.HasChildren">
            <summary>
            Gets a value that indicates the element has a non-empty <see cref="P:C1.Framework.Element.Children"/> collection.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.HostedControl">
            <summary>
            Gets the <see cref="T:System.Windows.Forms.Control"/> that is hosted in this element.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.SuppressEvents">
            <summary>
            Gets or sets events supression.
            </summary>
            <remarks>
            Case 1:
            Enable this property when you want to disable raising all events for the element,
            such as when you have a large number of elements and you don't want them all to raise events.
            Case 2:
            Enable it when you need to overload base methods with their call, but with your own events.
            </remarks>
        </member>
        <member name="M:C1.Framework.Element.Clone">
            <summary>
            Returns a clone of this element.
            </summary>
            <returns>A clone of this element.</returns>
        </member>
        <member name="M:C1.Framework.Element.Layout(System.Drawing.Graphics)">
            <summary>
            Lays out this element based on its style and contents.
            </summary>
            <param name="g">Graphics object used to measure the element.</param>
        </member>
        <member name="M:C1.Framework.Element.Layout">
            <summary>
            Perform layout using host control's <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the element into a given rectangle. 
            </summary>
            <param name="g">Graphics object where the element will be rendered.</param>
            <param name="r">Rectangle where the element will be rendered.</param>
        </member>
        <member name="M:C1.Framework.Element.RenderChildren(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the child elements into a given rectangle. 
            </summary>
            <param name="g">Graphics object where the element will be rendered.</param>
            <param name="r">Rectangle where the child elements will be rendered.</param>
            <remarks>
            Derived elements may override this method in order to draw into the <see cref="T:System.Drawing.Graphics"/>
            after the background and borders have been rendered but before the child elements are 
            rendered.
            </remarks>
        </member>
        <member name="M:C1.Framework.Element.RenderContent(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Render this element's content (no children). 
            </summary>
            <param name="g">Graphics object where the element will be rendered.</param>
            <param name="r">Rectangle to render into.</param>
        </member>
        <member name="M:C1.Framework.Element.HitTest(System.Drawing.Point)">
            <summary>
            Returns the element at a given point.
            </summary>
            <param name="pt">Point to check.</param>
            <returns>The element at the point.</returns>
        </member>
        <member name="M:C1.Framework.Element.GetParentOfType(System.Type)">
            <summary>
            Navigates up the tree to find an ancestor of a given type.
            </summary>
            <param name="type">Type of element we're looking for.</param>
            <returns>A reference to the ancestor of the given type, null if not found.</returns>
        </member>
        <member name="M:C1.Framework.Element.GetParent``1">
            <summary>
            Navigates up the tree to find an ancestor of a given type.
            </summary>
            <returns>A reference to the ancestor of the given type, null if not found.</returns>
        </member>
        <member name="M:C1.Framework.Element.GetScrollOrigin">
            <summary>
            Returns the scroll origin (override to implement non-scrolling areas).
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.Element.IsChildOf(C1.Framework.Element)">
            <summary>
            Determines whether this element is a child of another element.
            </summary>
            <param name="parent">Parent element to investigate.</param>
            <returns>True if <paramref name="parent"/> contains this element.</returns>
        </member>
        <member name="P:C1.Framework.Element.HostView">
            <summary>
            Gets the <see cref="T:C1.Framework.IView"/> that is hosting this <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.HostControl">
            <summary>
            Gets the <see cref="T:System.Windows.Forms.Control"/> that is hosting this <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.Invalidate(System.Boolean)">
            <summary>
            Invalidates this <see cref="T:C1.Framework.Element"/> within the host control.
            </summary>
            <param name="update">Whether to repaint the host control immediately after invalidation.</param>
        </member>
        <member name="M:C1.Framework.Element.Invalidate">
            <summary>
            Invalidates this <see cref="T:C1.Framework.Element"/> within the host control.
            </summary>
        </member>
        <member name="E:C1.Framework.Element.VisibleChanged">
            <summary>
            Occurs when the visible property changed.
            </summary>
        </member>
        <member name="E:C1.Framework.Element.EnabledChanged">
            <summary>
            Occurs when the enabled property changed.
            </summary>
        </member>
        <member name="E:C1.Framework.Element.BoundsChanged">
            <summary>
            Occurs when the element bounds changed.
            </summary>
        </member>
        <member name="E:C1.Framework.Element.GotFocus">
            <summary>
            Occurs when the element got focus.
            </summary>
        </member>
        <member name="E:C1.Framework.Element.LostFocus">
            <summary>
            Occurs when the element lost focus.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.RescaleConstantsForDpi(System.Int32,System.Int32)">
            <summary>
            Provides constants for rescaling the <see cref="T:C1.Framework.Element"/> when a DPI change occurs.
            </summary>
            <param name="deviceDpiOld">The DPI value prior to the change.</param>
            <param name="deviceDpiNew">The DPI value after the change.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseEnter(System.EventArgs)">
            <summary>
            Called by the host control when the mouse enters this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseLeave(System.EventArgs)">
            <summary>
            Called by the host control when the mouse leaves this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseEnterHover(System.EventArgs)">
            <summary>
            Called by the host control when the mouse enters this <see cref="T:C1.Framework.Element"/>, 
            even if another element has captured the mouse.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseLeaveHover(System.EventArgs)">
            <summary>
            Called by the host control when the mouse leaves this <see cref="T:C1.Framework.Element"/>, 
            even if another element has captured the mouse.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user presses a mouse button over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles MouseWheel events.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
            <returns>True if the event was handled by this element, false otherwise.</returns>
        </member>
        <member name="M:C1.Framework.Element.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user releases a mouse button over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseLostCapture(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the user releases the left mouse button over a disabled <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the host control when the mouse moves over this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnClick(System.EventArgs)">
            <summary>
            Called by the host control when the user clicks this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnDoubleClick(System.EventArgs)">
            <summary>
            Called by the host control when the user double-clicks this <see cref="T:C1.Framework.Element"/>.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnGotFocus(System.EventArgs)">
            <summary>
            Called by the host control when this <see cref="T:C1.Framework.Element"/> receives the focus.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.RaiseGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Framework.Element.GotFocus"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnLostFocus(System.EventArgs)">
            <summary>
            Called by the host control when this <see cref="T:C1.Framework.Element"/> loses the focus.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.RaiseLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Framework.Element.LostFocus"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            Called by the host control when the element is about to lose focus.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Framework.Element.OnValidated(System.EventArgs)">
            <summary>
            Called by the host control after the element has been validated.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Framework.Element.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is a regular input key or a special key that requires preprocessing. 
            </summary>
            <param name="keyData">Key that was pressed and needs to be checked.</param>
            <returns><b>true</b> if the specified key is a regular input key; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:C1.Framework.Element.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called by the host control when the user presses a key and this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called by the host control when the user releases a key and this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Called by the host control when the user presses a character key and this <see cref="T:C1.Framework.Element"/> has the focus.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.Element.OnStateChanged(C1.Framework.Element.ElementFlags)">
            <summary>
            Called by the host control when the state of this <see cref="T:C1.Framework.Element"/> changes.
            </summary>
            <param name="oldFlags"><see cref="T:C1.Framework.Element.ElementFlags"/> that contains the state before the change.</param>
            <remarks>
            The state of an element is represented by a combination of <see cref="T:C1.Framework.Element.ElementFlags"/> values.
            Each individual flag is represented by a specific property, including <see cref="P:C1.Framework.Element.Visible"/>, <see cref="P:C1.Framework.Element.Enabled"/>,
            etc.
            </remarks>
        </member>
        <member name="M:C1.Framework.Element.FinalizeUI">
            <summary>
            Finalizes the user interface. This method is called when element is removed from UI.
            </summary>
            <remarks>Override this method if you need to release resources.</remarks>
        </member>
        <member name="M:C1.Framework.Element.OnBoundsChanged(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Called when Bounds changed.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:C1.Framework.Element.Measure(System.Drawing.Graphics,System.Object)">
            <summary>
            Provides the size, in pixels, of the specified content drawn on the specified <see cref="T:System.Drawing.Graphics"/> surface.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object to use for measuring.</param>
            <param name="value">The content to measure.</param>
            <returns>The desired <see cref="P:C1.Framework.Element.Size"/>, in pixels, of the content drawn in a single line with the current style settings in the specified device context.</returns>
        </member>
        <member name="M:C1.Framework.Element.Measure(C1.Framework.Style,System.Drawing.Graphics,System.Object)">
            <summary>
            Provides the size, in pixels, of the specified content drawn on the specified <see cref="T:System.Drawing.Graphics"/> surface with the specified style.
            </summary>
            <param name="s">The <see cref="P:C1.Framework.Element.Style"/> object to use.</param>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object to use for measuring.</param>
            <param name="value">The content to measure.</param>
            <returns>The desired <see cref="P:C1.Framework.Element.Size"/>, in pixels, of the content drawn in a single line with the specified style settings in the specified device context.</returns>
        </member>
        <member name="M:C1.Framework.Element.Measure(System.Drawing.Graphics,System.Object,System.Int32)">
            <summary>
            Provides the size, in pixels, of the specified content drawn on the specified <see cref="T:System.Drawing.Graphics"/> surface within the rectangle of the specified width.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object to use for measuring.</param>
            <param name="value">The content to measure.</param>
            <param name="width">The available width.</param>
            <returns>The desired <see cref="P:C1.Framework.Element.Size"/>, in pixels, of the content drawn in within the rectangle of the specified width with the current style settings in the specified device context.</returns>
        </member>
        <member name="M:C1.Framework.Element.Measure(C1.Framework.Style,System.Drawing.Graphics,System.Object,System.Int32)">
            <summary>
            Provides the size, in pixels, of the specified content drawn on the specified <see cref="T:System.Drawing.Graphics"/> surface within the rectangle of the specified width with the specified style settings.
            </summary>
            <param name="s">The <see cref="P:C1.Framework.Element.Style"/> object to use.</param>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object to use for measuring.</param>
            <param name="value">The content to measure.</param>
            <param name="width">The available width.</param>
            <returns>The desired <see cref="P:C1.Framework.Element.Size"/>, in pixels, of the content drawn in within the rectangle of the specified width with the specified style settings in the specified device context.</returns>
        </member>
        <member name="M:C1.Framework.Element.GetBorderPath(C1.Framework.Style,System.Drawing.Rectangle,C1.Framework.Thickness)">
            <summary>
            Gets a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> that covers only the borders (hollow, used to renders the borders).
            </summary>
            <param name="style">the <see cref="P:C1.Framework.Element.Style"/> of the rendered <see cref="T:C1.Framework.Element"/>.</param>
            <param name="bounds">the bounds of the rendered <see cref="T:C1.Framework.Element"/>.</param>
            <param name="broder">the border of the rendered <see cref="T:C1.Framework.Element"/>.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.Element.DrawText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Rectangle,C1.Framework.Style,C1.Framework.DynamicStyle)">
            <summary>
            Executes TextRenderer.DrawText. Do not use it in any way other than as protected.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.AutoSize">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value specifying whether element size is automatically determined by its style and contents.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.AutoWidth">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value specifying whether element width is automatically determined by its style and contents.
            </summary>
        </member>
        <member name="P:C1.Framework.Element.AutoHeight">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value specifying whether element height is automatically determined by its style and contents.
            </summary>
        </member>
        <member name="M:C1.Framework.Element.GetImageResource(System.String)">
            <summary>
            Gets an <see cref="T:System.Drawing.Image"/> from the application's embedded resources.
            </summary>
            <param name="name">Name of the embedded resource that contains the image.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> stored with the given name, or null if the image could not be found.</returns>
        </member>
        <member name="M:C1.Framework.Element.GetBitmapResource(System.String)">
            <summary>
            Gets a <see cref="T:System.Drawing.Bitmap"/> from the application's embedded resources.
            </summary>
            <param name="name">Name of the embedded resource that contains the bitmap.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> stored with the given name, or null if the image could not be found.</returns>
        </member>
        <member name="M:C1.Framework.Element.FindMnemonic(C1.Framework.Element,System.Char)">
            <summary>
            Finds the <see cref="T:C1.Framework.Element"/> that is represented by a given hot key.
            </summary>
            <param name="e"><see cref="T:C1.Framework.Element"/> to search (including all its children).</param>
            <param name="charCode">Hot key to search for.</param>
            <returns>The <see cref="T:C1.Framework.IMnemonicElement"/> that is represented by the given hot key.</returns>
        </member>
        <member name="M:C1.Framework.Element.PointToClient(System.Drawing.Point)">
            <summary>
             Computes the location of the specified screen point into client coordinates.
            </summary>
            <param name="p">The screen coordinate <see cref="T:System.Drawing.Point"/> to convert.</param>
            <returns> A <see cref="T:System.Drawing.Point"/> that represents the converted <see cref="T:System.Drawing.Point"/> in client coordinates.</returns>
        </member>
        <member name="M:C1.Framework.Element.PointToScreen(System.Drawing.Point)">
            <summary>
            Computes the location of the specified client point into screen coordinates.
            </summary>
            <param name="p">The client coordinate <see cref="T:System.Drawing.Point"/> to convert.</param>
            <returns>A <see cref="T:System.Drawing.Point"/> that represents the converted <see cref="T:System.Drawing.Point"/> in screen coordinates.</returns>
        </member>
        <member name="M:C1.Framework.Element.GetDeviceDPI">
            <summary>
            Gets the DPI value for the display device where the <see cref="P:C1.Framework.Element.HostControl"/> is currently being displayed.
            </summary>
            <remarks>
            Returns <see cref="F:C1.Win.Util.DpiHelper.DEFAULT_DPI"/> if has no <see cref="P:C1.Framework.Element.HostControl"/>.
            </remarks>
        </member>
        <member name="M:C1.Framework.Element.ScaleToDeviceDPI(C1.Framework.Style)">
            <summary>
            Scales the <see cref="T:C1.Framework.Style"/> instance uses the DeviceDpi value if this element has a <see cref="P:C1.Framework.Element.HostControl"/>.
            </summary>
            <param name="value">The style for scaling.</param>        
            <remarks>
            This method doen't scale the Font property.
            </remarks>
        </member>
        <member name="M:C1.Framework.Element.ScaleToDeviceDPI(System.Int32)">
            <summary>
            Scales a value uses the DeviceDpi value if this element has a <see cref="P:C1.Framework.Element.HostControl"/>.
            </summary>
            <param name="value">The value for scaling.</param>
            <returns>The scaled value.</returns>
        </member>
        <member name="M:C1.Framework.Element.ScaleToDeviceDPI(System.Drawing.Size)">
            <summary>
            Scales a value uses the DeviceDpi value if this element has a <see cref="P:C1.Framework.Element.HostControl"/>.
            </summary>
            <param name="value">The value for scaling.</param>
            <returns>The scaled value.</returns>
        </member>
        <member name="M:C1.Framework.Element.ScaleToDeviceDPI(C1.Framework.Thickness)">
            <summary>
            Scales a value uses the DeviceDpi value if this element has a <see cref="P:C1.Framework.Element.HostControl"/>.
            </summary>
            <param name="value">The value for scaling.</param>
            <returns>The scaled value.</returns>
        </member>
        <member name="P:C1.Framework.Element.UiaName">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Element.IsOffscreen">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Element.C1#Win#Accessibility#ISupportUia#Visible">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Element.C1#Win#Accessibility#ISupportUia#Enabled">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Element.C1#Win#Accessibility#ISupportUia#Parent">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Element.C1#Win#Accessibility#ISupportUia#Location">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.Element.C1#Win#Accessibility#ISupportUia#Size">
            <inheritdoc/>
        </member>
        <member name="E:C1.Framework.Element.C1#Win#Accessibility#ISupportUia#VisibleChanged">
            <inheritdoc/>
        </member>
        <member name="E:C1.Framework.Element.C1#Win#Accessibility#ISupportUia#EnabledChanged">
            <inheritdoc/>
        </member>
        <member name="E:C1.Framework.Element.C1#Win#Accessibility#ISupportUia#BoundsChanged">
            <inheritdoc/>
        </member>
        <member name="E:C1.Framework.Element.C1#Win#Accessibility#ISupportUia#GotFocus">
            <inheritdoc/>
        </member>
        <member name="E:C1.Framework.Element.C1#Win#Accessibility#ISupportUia#LostFocus">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.ElementList">
            <summary>
            Contains a list of Elements that belong to a parent element.
            </summary>
        </member>
        <member name="M:C1.Framework.ElementList.#ctor(C1.Framework.Element)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ElementList"/> class for the specified owning element.
            </summary>
            <param name="owner">The <see cref="T:C1.Framework.Element"/> which owns this list.</param>
        </member>
        <member name="P:C1.Framework.ElementList.Owner">
            <summary>
            Gets a reference to the <see cref="T:C1.Framework.Element"/> that owns this <see cref="T:C1.Framework.ElementList"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.ElementList.Offset(System.Int32,System.Int32)">
            <summary>
            Adjusts the location of all <see cref="T:C1.Framework.Element"/> objects in the list by the specified amount. 
            </summary>
            <param name="x">Horizontal offset in pixels.</param>
            <param name="y">Vertical offset in pixels.</param>
        </member>
        <member name="M:C1.Framework.ElementList.Offset(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adjusts the location of some <see cref="T:C1.Framework.Element"/> objects in the list by the specified amount. 
            </summary>
            <param name="x">Horizontal offset in pixels.</param>
            <param name="y">Vertical offset in pixels.</param>
            <param name="first">Index of the first <see cref="T:C1.Framework.Element"/> to be offset.</param>
            <param name="count">Number of elements to offset.</param>
        </member>
        <member name="M:C1.Framework.ElementList.OnListChanged">
            <summary>
            Called when elements are added or removed from the list.
            </summary>
        </member>
        <member name="P:C1.Framework.ElementList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.Element"/> at a specified index in the list.
            </summary>
            <param name="index">Index of the element to get or set.</param>.
            <returns>The <see cref="T:C1.Framework.Element"/> at the specified index.</returns>
        </member>
        <member name="M:C1.Framework.ElementList.Add(System.Object)">
            <summary>
            Adds an <see cref="T:C1.Framework.Element"/> to the list.
            </summary>
            <param name="value"><see cref="T:C1.Framework.Element"/> to add to the list.</param>
            <returns>The index of the new object in the list.</returns>
        </member>
        <member name="M:C1.Framework.ElementList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an <see cref="T:C1.Framework.Element"/> at a specified index.
            </summary>
            <param name="index">Index where the <see cref="T:C1.Framework.Element"/> will be inserted.</param>
            <param name="value"><see cref="T:C1.Framework.Element"/> to add to the list.</param>
        </member>
        <member name="M:C1.Framework.ElementList.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts the elements of a collection into the list at the specified index. 
            </summary>
            <param name="index">Index where the elements will be inserted.</param>
            <param name="c"><see cref="T:System.Collections.ICollection"/> whose elements will be inserted.</param>
        </member>
        <member name="M:C1.Framework.ElementList.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.Framework.Element"/> at the specified index from the list.
            </summary>
            <param name="index">The index of the <see cref="T:C1.Framework.Element"/> to remove.</param>
        </member>
        <member name="M:C1.Framework.ElementList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the list.
            </summary>
            <param name="index">Index of the first element to remove from the list.</param>
            <param name="count">Number of elements to remove.</param>
        </member>
        <member name="M:C1.Framework.ElementList.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the list or a portion of it. 
            </summary>
            <param name="index">Index where the reversal should start.</param>
            <param name="count">Number of elements to reverse.</param>
        </member>
        <member name="M:C1.Framework.ElementList.Reverse">
            <summary>
            Reverses the order of the elements in the list or a portion of it. 
            </summary>
        </member>
        <member name="M:C1.Framework.ElementList.Clear">
            <summary>
            Removes all elements from the list.
            </summary>
        </member>
        <member name="P:C1.Framework.ElementList.Last">
            <summary>
            Gets or sets the last <see cref="T:C1.Framework.Element"/> on the list.
            </summary>
        </member>
        <member name="T:C1.Framework.FlowPanel">
            <summary>
            Panel that stacks children horizontally or vertically.
            </summary>
        </member>
        <member name="M:C1.Framework.FlowPanel.#ctor(C1.Framework.Style,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.FlowPanel"/> with the specified style and orientation.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="horizontal">If True, creates panel of the horizontal orientation; if False, creates vertical panel.</param>
        </member>
        <member name="M:C1.Framework.FlowPanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.FlowPanel"/> with the specified style settings.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.FlowPanel.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.FlowPanel"/> of the specified orientation.
            </summary>
            <param name="horizontal">If True, creates panel of the horizontal orientation; if False, creates vertical panel.</param>
        </member>
        <member name="M:C1.Framework.FlowPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.FlowPanel"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.FlowPanel.Orientation">
            <summary>
            Specifies the <see cref="P:C1.Framework.FlowPanel.Orientation"/> value to use for layout children.
            </summary>
        </member>
        <member name="T:C1.Framework.DropDownFormBase">
            <summary>
            Represents a base drop down form for the drop down control.
            </summary>
        </member>
        <member name="F:C1.Framework.DropDownFormBase._topForm">
            <summary>
            The popup form on the top (if any exist).
            </summary>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.#ctor(C1.Framework.IDropDownOwner)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.DropDownFormBase"/> class.
            </summary>
            <param name="owner">The owner drop down control.</param>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:C1.Framework.DropDownFormBase"/> control.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; 
            false to release only unmanaged resources.</param>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.OpenForm">
            <inheritdoc cref="M:C1.Framework.IDropDownForm.OpenForm"/>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.CloseForm">
            <inheritdoc cref="M:C1.Framework.IDropDownForm.CloseForm"/>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.ApplyStyle(C1.Win.Themes.BaseStyle,System.Int32)">
            <inheritdoc cref="M:C1.Framework.IDropDownForm.ApplyStyle(C1.Win.Themes.BaseStyle,System.Int32)"/>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.AlwaysPostChanges">
            <summary>
            If this flag is set, the changes to the control Value can only be cancelled explicitly, 
            with Esc key or using the CloseForm method, and implicit cancellation 
            (when the form is closed because it loses focus) is disabled.
            </summary>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.ClosingUp">
            <summary>
            This flag is True when we should not close the popup Form from the Deactivate event.
            </summary>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.Focusable">
            <summary>
            Gets or sets a flag indicates that <see cref="T:C1.Framework.DropDownFormBase"/> can contain focus.
            </summary>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.HasShadow">
            <summary>
            Gets or sets a flag indicating if the drop down form has a shadow displayed.
            </summary>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.IgnoreNextDeactivate">
            <summary>
            This flag is set when the user clicks the drop-down button in menu while this drop-down is already open.
            </summary>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.InternalFocusMovement">
            <summary>
            Gets or sets a value indicating that all focus movements are internal and should not be processed as caused by user input.
            </summary>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.NoCancelOnEscape">
            <summary>
            If this flag is set, pressing the Esc key does not close the form.
            </summary>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.NoHideOnItemClick">
            <summary>
            If true, the form will not be closed when the user clicks some item on this form or on a child form.
            </summary>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.NoPostOnEnter">
            <summary>
            If this flag is set, pressing the Enter key does not close the form.
            </summary>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.Corners">
            <summary>
            Gets or sets the radii of the element corners.
            </summary>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.PlainBorders">
            <summary>
            Gets or sets a value indicating that the form draws a plain border, use this property with the <see cref="P:C1.Framework.DropDownFormBase.Corners"/> and <see cref="P:C1.Framework.DropDownFormBase.BorderColor"/> properties.
            </summary>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.BorderColor">
            <summary>
            Gets or sets the border color if a value of the <see cref="P:C1.Framework.DropDownFormBase.PlainBorders"/> property is true.
            </summary>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.FormSizingMode">
            <summary>
            Gets or sets the border sizing mode. This option works if the <see cref="P:C1.Framework.DropDownFormBase.PlainBorders"/> is true.
            </summary>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.Control">
            <summary>
            Gets or sets the control that hosted on this dropd down form.
            </summary>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.DropDownOwner">
            <summary>
            Gets the drop-down owner.
            </summary>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.OnOwnerDropDownOpened">
            <summary>
            Raises the DropDownOwner.DropDownOpened event.
            </summary>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.OnOwnerDropDownClosed">
            <summary>
            Raises the DropDownOwner.DropDownClosed event.
            </summary>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.PrepareDropDownLocation(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Drawing.Rectangle)">
            <summary>
            Prepares location of drop down form.
            </summary>
            <remarks>
            The overridden method may return 'true' to avoid further processing.
            </remarks>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.GetOwnerBounds">
            <summary>
            Returns the bounds of the view in which the dropdown form belongs.
            </summary>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.RefreshBounds">
            <summary>
            Refreshes bounds of the drop down form.
            </summary>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.GetContentSize">
            <summary>
            Returns the initial size for drop down form.
            </summary>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.GetBorderSize">
            <summary>
            Returns the size of the border.
            </summary>        
        </member>
        <member name="M:C1.Framework.DropDownFormBase.CheckHover">
            <summary>
            Checks the element under the mouse and updates the control state.
            </summary>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.CloseDropDown(System.Boolean)">
            <summary>
            Closes the drop down form.
            </summary>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.CloseAllForms">
            <summary>
            Closes this and all child dropdown forms.
            </summary>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.ItemClicked(C1.Framework.Element,System.Boolean,System.Boolean)">
            <summary>
            Handles a click on an item on a dropdown form.
            </summary>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.GetParentForm">
            <summary>
            Returns a parent form of the drop down control.
            </summary>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.ApplyDropDownAlign(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Drawing.Rectangle)">
            <summary>
            Applies the align to the dropdown form.
            </summary>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.CreateParams">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.CreateHandle">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.OnVisibleChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.WndProc(System.Windows.Forms.Message@)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.OnDeactivate(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.CloseAllFormsInt">
            <summary>
            Hides all the popped up forms till the specified parent form.
            </summary>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.CloseAllForms(System.Windows.Forms.Form)">
            <summary>
            Don't pass 'this' in the formToBeActivated parameter
            </summary>
        </member>
        <member name="E:C1.Framework.DropDownFormBase.BoundsChanged">
            <summary>
            Occurs when control bounds changed.
            </summary>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.C1#Win#Accessibility#ISupportUia#UiaName">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.C1#Win#Accessibility#ISupportUia#IsOffscreen">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.C1#Win#Accessibility#ISupportUia#Visible">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.C1#Win#Accessibility#ISupportUia#Enabled">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.C1#Win#Accessibility#ISupportUia#Parent">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.C1#Win#Accessibility#ISupportUia#Location">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.DropDownFormBase.C1#Win#Accessibility#ISupportUia#Size">
            <inheritdoc/>
        </member>
        <member name="E:C1.Framework.DropDownFormBase.C1#Win#Accessibility#ISupportUia#VisibleChanged">
            <inheritdoc/>
        </member>
        <member name="E:C1.Framework.DropDownFormBase.C1#Win#Accessibility#ISupportUia#EnabledChanged">
            <inheritdoc/>
        </member>
        <member name="E:C1.Framework.DropDownFormBase.C1#Win#Accessibility#ISupportUia#BoundsChanged">
            <inheritdoc/>
        </member>
        <member name="E:C1.Framework.DropDownFormBase.C1#Win#Accessibility#ISupportUia#GotFocus">
            <inheritdoc/>
        </member>
        <member name="E:C1.Framework.DropDownFormBase.C1#Win#Accessibility#ISupportUia#LostFocus">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.C1#Win#Accessibility#ISupportUiaContainer#GetInnerItems(C1.Win.Accessibility.UiaItem)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.DropDownFormBase.GetInnerItems(C1.Win.Accessibility.UiaItem)">
            <summary>
            Gets a collection of inner Uia items.
            </summary>
        </member>
        <member name="T:C1.Framework.IDropDownForm">
            <summary>
            Represents the methods, events and properties of drop down from.
            </summary>
        </member>
        <member name="P:C1.Framework.IDropDownForm.Visible">
            <summary>
            Gets or sets a value indicating whether the form are displayed.
            </summary>
        </member>
        <member name="P:C1.Framework.IDropDownForm.Focusable">
            <summary>
            Gets or sets a value indicating that form can contain focus.
            </summary>
        </member>
        <member name="P:C1.Framework.IDropDownForm.InternalFocusMovement">
            <summary>
            Gets or sets a value indicating that all focus movements are internal and should not be processed as caused by user input.
            </summary>
        </member>
        <member name="P:C1.Framework.IDropDownForm.IsDisposed">
            <summary>
            Gets a value indicating whether the form has been disposed of.
            </summary>
        </member>
        <member name="M:C1.Framework.IDropDownForm.ApplyStyle(C1.Win.Themes.BaseStyle,System.Int32)">
            <summary>
            Applies the style to drop down form.
            </summary>
            <param name="style">Style of drop down form.</param>
            <param name="dpi">DPI of parent control.</param>
        </member>
        <member name="M:C1.Framework.IDropDownForm.Close">
            <summary>
            Closes the form.
            </summary>
        </member>
        <member name="M:C1.Framework.IDropDownForm.CloseForm">
            <summary>
            Closes the drop down form and activates the parent form.
            </summary>
        </member>
        <member name="M:C1.Framework.IDropDownForm.OpenForm">
            <summary>
            Opens the drop down form at the top of other windows.
            </summary>
        </member>
        <member name="T:C1.Framework.IDropDownOwner">
            <summary>
            Represents the methods and properties of the owner of the drop-down list.
            </summary>
        </member>
        <member name="P:C1.Framework.IDropDownOwner.DropDownAlign">
            <summary>
            Gets a value that determines the alignment of the drop down form.
            </summary>
        </member>
        <member name="P:C1.Framework.IDropDownOwner.GapHeight">
            <summary>
            Gets a distance in pixels between the control edge and the dropdown.
            </summary>
        </member>
        <member name="P:C1.Framework.IDropDownOwner.HostControl">
            <summary>
            Gets the <see cref="T:System.Windows.Forms.Control"/> that is hosting this <see cref="T:C1.Framework.IDropDownOwner"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.IDropDownOwner.IsRightToLeft">
            <summary>
            Gets the right-to-left mode value for the owner dropdown.
            </summary>
        </member>
        <member name="P:C1.Framework.IDropDownOwner.IsClosing">
            <summary>
            Gets a value indicating that the dropdown form closes itself and all child forms.
            </summary>
        </member>
        <member name="P:C1.Framework.IDropDownOwner.DropDownForm">
            <summary>
            Gets the dropdown form.
            </summary>
        </member>
        <member name="P:C1.Framework.IDropDownOwner.StickDropDownToSideBorder">
            <summary>
            Gets a value indicating whether to stick the drop-down form to the side border.
            </summary>
        </member>
        <member name="M:C1.Framework.IDropDownOwner.CloseForm">
            <summary>
            Closes the <see cref="P:C1.Framework.IDropDownOwner.DropDownForm"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.IDropDownOwner.GetFocusableControl">
            <summary>
            Returns the <see cref="T:System.Windows.Forms.Control"/> that has input focus then the <see cref="P:C1.Framework.DropDownFormBase.Focusable"/> is true.
            </summary>
        </member>
        <member name="M:C1.Framework.IDropDownOwner.HandleDropDownClosed">
            <summary>
            Handles the DropDownClosed event.
            </summary>
        </member>
        <member name="M:C1.Framework.IDropDownOwner.HandleDropDownOpened">
            <summary>
            Handles the DropDownOpened event.
            </summary>
        </member>
        <member name="M:C1.Framework.IDropDownOwner.OnPostChanges(C1.Framework.Element)">
            <summary>
            Fires when item was clicked on dropdown form.
            </summary>
        </member>
        <member name="T:C1.Framework.IDropDownOwnerExtended">
            <summary>
            Represents extended the methods and properties of the owner of the drop-down list.
            </summary>
        </member>
        <member name="P:C1.Framework.IDropDownOwnerExtended.ContentElement">
            <summary>
            Gets the view in which the dropdown form belongs.
            </summary>
        </member>
        <member name="T:C1.Framework.DropDownAlignment">
            <summary>
            Alignment of the drop-down portion of the drop down control.
            </summary>
        </member>
        <member name="F:C1.Framework.DropDownAlignment.Default">
            <summary>
            Use the default alignment rules.
            </summary>
        </member>
        <member name="F:C1.Framework.DropDownAlignment.Left">
            <summary>
            The dropdown form is aligned by its left side.
            </summary>
        </member>
        <member name="F:C1.Framework.DropDownAlignment.Center">
            <summary>
            The drop down form is centered.
            </summary>
        </member>
        <member name="F:C1.Framework.DropDownAlignment.Right">
            <summary>
            The dropdown form is aligned by its right side.
            </summary>
        </member>
        <member name="T:C1.Framework.GridCell">
            <summary>
            This class is an accessor for getting and setting elements at intersections
            of grid rows and columns. The actual elements are stored in the rows.
            </summary>
        </member>
        <member name="M:C1.Framework.GridCell.#ctor(C1.Framework.GridPanel,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.GridCell"/> object.
            </summary>
            <param name="grid">The owning <see cref="T:C1.Framework.GridPanel"/> element.</param>
            <param name="row">The number of grid row this cell should appear in.</param>
            <param name="column">The number of grid column this cell should appear in.</param>
        </member>
        <member name="M:C1.Framework.GridCell.#ctor(C1.Framework.GridRow,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.GridCell"/> object.
            </summary>
            <param name="row">The number of grid row this cell should appear in.</param>
            <param name="column">The number of grid column this cell should appear in.</param>
        </member>
        <member name="P:C1.Framework.GridCell.Element">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.GridCell.Element"/> displayed in this grid cell.
            </summary>
        </member>
        <member name="P:C1.Framework.GridCell.RowSpan">
            <summary>
            Gets or sets a value that indicates the total number of rows that cell spans within a grid.
            </summary>
        </member>
        <member name="P:C1.Framework.GridCell.ColSpan">
            <summary>
            Gets or sets a value that indicates the total number of columns that cell spans within a grid.
            </summary>
        </member>
        <member name="T:C1.Framework.GridColumn">
            <summary>
            Keeps track of column widths and positions
            </summary>
        </member>
        <member name="P:C1.Framework.GridColumn.Width">
            <summary>
            Element width. Set to -1 to let the element calculate it automatically.
            </summary>
        </member>
        <member name="P:C1.Framework.GridColumn.MinWidth">
            <summary>Gets or sets the minimal width of this column.</summary>
        </member>
        <member name="T:C1.Framework.GridColumnCollection">
            <summary>
            GridColumn collection. Just an ElementList typed to get and set GridColumn objects.
            </summary>
        </member>
        <member name="M:C1.Framework.GridColumnCollection.#ctor(C1.Framework.GridPanel)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.GridColumnCollection"/> class.
            </summary>
            <param name="grid">The owning <see cref="T:C1.Framework.GridPanel"/> element.</param>
        </member>
        <member name="P:C1.Framework.GridColumnCollection.Grid">
            <summary>
            Return the reference to the owning grid.
            </summary>
        </member>
        <member name="P:C1.Framework.GridColumnCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.GridColumn"/> at a specified index in the list.
            </summary>
            <param name="index">Index of the grid column to get or set.</param>.
            <returns>The <see cref="T:C1.Framework.GridColumn"/> at the specified index.</returns>
        </member>
        <member name="M:C1.Framework.GridColumnCollection.Add(C1.Framework.GridColumn)">
            <summary>
            Adds an <see cref="T:C1.Framework.GridColumn"/> to the list.
            </summary>
            <param name="value"><see cref="T:C1.Framework.GridColumn"/> to add to the list.</param>
            <returns>The index of the new grid column in the list.</returns>
        </member>
        <member name="M:C1.Framework.GridColumnCollection.Add">
            <summary>
            Adds an <see cref="T:C1.Framework.GridColumn"/> to the list.
            </summary>
            <returns>The index of the new grid column in the list.</returns>
        </member>
        <member name="T:C1.Framework.GridPanel">
            <summary>
            Inherits from BasePanel and provides a grid with rows and columns.
            At each intersection there is a cell object that contains an element.
            Cells may span rows and columns.
            </summary>
        </member>
        <member name="M:C1.Framework.GridPanel.#ctor(C1.Framework.Style,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.GridPanel"/> element with the specified number of rows and columns and style settings.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="rows">The number of rows to create.</param>
            <param name="cols">The number of columns to create.</param>
        </member>
        <member name="M:C1.Framework.GridPanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.GridPanel"/> element with the specified style.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.GridPanel.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.GridPanel"/> element with the specified number of rows and columns.
            </summary>
            <param name="rows">The number of rows to create.</param>
            <param name="columns">The number of columns to create.</param>
        </member>
        <member name="M:C1.Framework.GridPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.GridPanel"/> element.
            </summary>
        </member>
        <member name="P:C1.Framework.GridPanel.Item(System.Int32,System.Int32)">
            <summary>
            Returns the <see cref="T:C1.Framework.GridCell"/> object displayed in the specified row and column.
            </summary>
            <param name="row">The row number.</param>
            <param name="col">The column number.</param>
            <returns>The <see cref="T:C1.Framework.GridCell"/> object.</returns>
            <remarks>If the <see cref="T:C1.Framework.GridCell"/> object with specified row and column numbers doesn't exist when this property is called, it is created. 
            Also this property call migh create missing rows and columns if required.</remarks>
        </member>
        <member name="P:C1.Framework.GridPanel.Rows">
            <summary>
            Returns the <see cref="T:C1.Framework.GridRowCollection"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.GridPanel.Columns">
            <summary>
            Returns the <see cref="T:C1.Framework.GridColumnCollection"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.GridPanel.CellSpacing">
            <summary>
            Gets or sets the <see cref="T:System.Int32"/> value, specifying size in pixels of empty space between adjucent grid cells.
            </summary>
        </member>
        <member name="P:C1.Framework.GridPanel.UniformColumnWidths">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value determining whether all columns should have the same width.
            </summary>
        </member>
        <member name="P:C1.Framework.GridPanel.UniformRowHeights">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value determining whether all rows should have the same height.
            </summary>
        </member>
        <member name="T:C1.Framework.GridRow">
            <summary>
            Keeps track of row heights and positions, stores cells in Children member.
            </summary>
        </member>
        <member name="P:C1.Framework.GridRow.Grid">
            <summary>
            Returns the reference to the owning <see cref="T:C1.Framework.GridPanel"/> element.
            </summary>
        </member>
        <member name="P:C1.Framework.GridRow.Item(System.Int32)">
            <summary>
            Creates the <see cref="T:C1.Framework.GridCell"/> object with the specified column index.
            </summary>
            <param name="col">The column number.</param>
            <returns></returns>
        </member>
        <member name="P:C1.Framework.GridRow.Index">
            <summary>
            Returns the <see cref="T:System.Int32"/> value specifying the index of this row in the owning grid.
            </summary>
        </member>
        <member name="T:C1.Framework.GridRowCollection">
            <summary>
            GridRow collection. Just an ElementList typed to get and set GridRow objects.
            </summary>
        </member>
        <member name="M:C1.Framework.GridRowCollection.#ctor(C1.Framework.GridPanel)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.GridRowCollection"/> class.
            </summary>
            <param name="grid">The owning <see cref="T:C1.Framework.GridPanel"/> element.</param>
        </member>
        <member name="P:C1.Framework.GridRowCollection.Grid">
            <summary>
            Returns the reference to the owning <see cref="T:C1.Framework.GridPanel"/> element.
            </summary>
        </member>
        <member name="P:C1.Framework.GridRowCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.Framework.GridRow"/> at a specified index in the list.
            </summary>
            <param name="index">Index of the row to get or set.</param>.
            <returns>The <see cref="T:C1.Framework.GridRow"/> at the specified index.</returns>
        </member>
        <member name="M:C1.Framework.GridRowCollection.Add(C1.Framework.GridRow)">
            <summary>
            Adds a <see cref="T:C1.Framework.GridRow"/> to the list.
            </summary>
            <param name="value">The <see cref="T:C1.Framework.GridRow"/> to add to the list.</param>
            <returns>The index of the new row in the list.</returns>
        </member>
        <member name="M:C1.Framework.GridRowCollection.Add">
            <summary>
            Adds a new <see cref="T:C1.Framework.GridRow"/> to the list.
            </summary>
            <returns>The index of the new row in the list.</returns>
        </member>
        <member name="T:C1.Framework.CellSpanInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Framework.ImageElement">
            <summary>
            <para>Element that displays an <see cref="P:C1.Framework.ImageElement.Image"/>.</para>
            
            <para>Alignment and scaling are controlled by the element's <see cref="T:C1.Framework.Style"/>.</para>
            </summary>
        </member>
        <member name="M:C1.Framework.ImageElement.#ctor(C1.Framework.Style,System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ImageElement"/> class with the specified image and style options.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="image">The image to show.</param>
        </member>
        <member name="M:C1.Framework.ImageElement.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ImageElement"/> class with the specified image.
            </summary>
            <param name="image">The image to show.</param>
        </member>
        <member name="M:C1.Framework.ImageElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ImageElement"/> class with the specified style options.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.ImageElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ImageElement"/> class.
            </summary>
        </member>
        <member name="P:C1.Framework.ImageElement.Image">
            <summary>
            Gets or sets the reference to the <see cref="P:C1.Framework.ImageElement.Image"/> object to show.
            </summary>
        </member>
        <member name="M:C1.Framework.ImageElement.GetValue">
            <summary>
            The content of this element is the image.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Framework.ImageElement.LineDescent">
            <summary>
            No descent for images.
            </summary>
        </member>
        <member name="T:C1.Framework.ParagraphElement">
            <summary>
            <see cref="T:C1.Framework.BasePanel"/> that displays paragraphs.
            </summary>
            <remarks>
            This class is a panel that wraps and aligns its child elements.
            </remarks>
        </member>
        <member name="M:C1.Framework.ParagraphElement.#ctor(C1.Framework.Style,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ParagraphElement"/> class with the specified text and style settings.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="text">The text to display.</param>
        </member>
        <member name="M:C1.Framework.ParagraphElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ParagraphElement"/> class with the specified style settings.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.ParagraphElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ParagraphElement"/> class with the specified text.
            </summary>
            <param name="text">The text to display.</param>
        </member>
        <member name="M:C1.Framework.ParagraphElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ParagraphElement"/> class.
            </summary>
        </member>
        <member name="P:C1.Framework.ParagraphElement.MinWidth">
            <summary>Gets or sets the minimal width of this column.</summary>
        </member>
        <member name="M:C1.Framework.ParagraphElement.BreakBefore(C1.Framework.Element,System.Int32,System.Int32)">
            <summary>
            Gets a value that determines whether a line break should be inserted before
            a given element.
            </summary>
            <param name="e">Element to test for a line break.</param>
            <param name="lineEnd">Position of the line end if no breaks are added.</param>
            <param name="width">Width available for rendering the paragraph.</param>
            <returns>True if a line break should be inserted before the given element.</returns>
        </member>
        <member name="M:C1.Framework.ParagraphElement.BreakBeforeRtl(C1.Framework.Element,System.Int32,System.Int32)">
            <summary>
            Gets a value that determines whether a line break should be inserted before
            a given element.
            </summary>
            <param name="e">Element to test for a line break.</param>
            <param name="lineStart">Position of the line start if no breaks are added.</param>
            <param name="start">Text start position.</param>
            <returns>True if a line break should be inserted before the given element.</returns>
        </member>
        <member name="M:C1.Framework.ParagraphElement.ItemTextElement.Layout(System.Drawing.Graphics)">
            <summary>
            Layout this element based on its style and contents.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object used to measure the <see cref="T:C1.Framework.Element"/>.</param>
        </member>
        <member name="T:C1.Framework.StackPanel">
            <summary>
            Panel that stacks children horizontally or vertically into a single line.
            </summary>
        </member>
        <member name="M:C1.Framework.StackPanel.#ctor(C1.Framework.Style,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.StackPanel"/> element with specified orientation and style options.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="horizontal">True for horizontal and False for vertical orientation.</param>
        </member>
        <member name="M:C1.Framework.StackPanel.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.StackPanel"/> element with specified orientation.
            </summary>
            <param name="horizontal">True for horizontal and False for vertical orientation.</param>
        </member>
        <member name="M:C1.Framework.StackPanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.StackPanel"/> element with specified style options.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.StackPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.StackPanel"/> element.
            </summary>
        </member>
        <member name="P:C1.Framework.StackPanel.Orientation">
            <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
        </member>
        <member name="T:C1.Framework.RowPanel">
            <summary>
            <para>Panel that stacks children horizontally.</para>
            </summary>
        </member>
        <member name="M:C1.Framework.RowPanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.RowPanel"/> element with specified style options.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.RowPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.RowPanel"/> element.
            </summary>
        </member>
        <member name="T:C1.Framework.ColumnPanel">
            <summary>
            <para>Panel that stacks children vertically.</para>
            </summary>
        </member>
        <member name="M:C1.Framework.ColumnPanel.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ColumnPanel"/> element with specified style options.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
        </member>
        <member name="M:C1.Framework.ColumnPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ColumnPanel"/> element.
            </summary>
        </member>
        <member name="T:C1.Framework.IBrushProvider">
            <summary>
            Encapsulates a Brush for painting background.
            </summary>
        </member>
        <member name="P:C1.Framework.IBrushProvider.DisposeBrushAfterUse">
            <summary>
            Gets a value indicating if the brush obtained from the <see cref="M:C1.Framework.IBrushProvider.GetBrush(System.Drawing.Rectangle)"/> method should be disposed after use.
            </summary>
        </member>
        <member name="M:C1.Framework.IBrushProvider.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Returns a brush for the specified rectangle.
            </summary>
        </member>
        <member name="M:C1.Framework.IBrushProvider.GetBrushColor">
            <summary>
            Returns a background color for hosted controls that don't support gradients.
            </summary>
        </member>
        <member name="T:C1.Framework.BackgroundBrushProvider">
            <summary>
            Class that encapsulates <see cref="P:C1.Framework.BackgroundBrushProvider.Brush"/> objects used to paint element backgrounds.
            It exposes properties that can be used to create and serialize <see cref="T:System.Drawing.SolidBrush"/>, 
            <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/>, and <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> objects.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.GradientMode">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.BackgroundBrushProvider.GradientMode"/> for this <see cref="T:C1.Framework.BackgroundBrushProvider"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.GammaCorrection">
            <summary>
            Gets or sets whether gamma correction is applied to the gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.BackColor">
            <summary>
            Gets or sets the main color (used when <see cref="P:C1.Framework.BackgroundBrushProvider.GradientMode"/> is set to <b>None</b>).
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.GradientColor">
            <summary>
            Gets or sets the secondary color (used when <see cref="P:C1.Framework.BackgroundBrushProvider.GradientMode"/> is set to a value other than <b>None</b>).
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.Blend">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.BackgroundBrushProvider.Blend"/> used to create the gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.InterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines a multicolor gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.Center">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.PointF"/> that represents the center of a radial gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.Brush">
            <summary>
            Gets or sets a <see cref="P:C1.Framework.BackgroundBrushProvider.Brush"/> object that may be something other than a <see cref="T:System.Drawing.SolidBrush"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.BackgroundBrushProvider.DisposeBrushAfterUse">
            <summary>
            Gets a value indicating if the brush should be disposed after use.
            </summary>
        </member>
        <member name="M:C1.Framework.BackgroundBrushProvider.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Gets an updated <see cref="P:C1.Framework.BackgroundBrushProvider.Brush"/> that can be used to fill a given <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <param name="rc">Rectangle used to build the gradient brush if the <see cref="P:C1.Framework.BackgroundBrushProvider.GradientMode"/> 
            property is set to a value other than <b>None</b>.</param>
            <returns>A <see cref="P:C1.Framework.BackgroundBrushProvider.Brush"/> that can be used to paint an element's background.</returns>
        </member>
        <member name="M:C1.Framework.BackgroundBrushProvider.GetBrushColor">
            <summary>
            Returns a background color for hosted controls that don't support gradients.
            </summary>
        </member>
        <member name="M:C1.Framework.BackgroundBrushProvider.Clone">
            <summary>
            Gets a clone of this <see cref="T:C1.Framework.BackgroundBrushProvider"/>.
            </summary>
            <returns>A clone of this <see cref="T:C1.Framework.BackgroundBrushProvider"/>.</returns>
        </member>
        <member name="T:C1.Framework.BlendConverter">
            <summary>
            <see cref="T:System.ComponentModel.TypeConverter"/> that converts <see cref="T:System.Drawing.Drawing2D.Blend"/> objects to and from strings.
            </summary>
            <remarks>
            <para>The <see cref="T:System.Drawing.Drawing2D.Blend"/> object is converted to a string with the following format:</para>
            <para>[p1],[f1];[p2],[f2];...;[pn],[fn]</para>
            <para>Where the 'pi' are positions between 0 and 1 along the blend line and
            'fi' are factors between 0 and 1 that correspond to the amount of the 
            secondary color in the blend.</para>
            <para>The positions must be increasing, and the last one must be 1.</para>
            <para>This converter allows persisting <see cref="T:System.Drawing.Drawing2D.Blend"/> objects to Xml.</para>
            </remarks>
            <example>
            These are some simple blend strings:
            <para>"0,0;1,1": default blend, starting with color1 (0,0) and finishing with color2 (1,1).</para>
            <para>"0,1;1,0": reverse blend, starting with color2 (1,0) and finishing with color1 (0,1).</para>
            <para>"0,0;.5,1;1,0": starts with color1, switches to color2 halfway, then back to color1.</para>
            <para>"0,0;.1,1;.9,1;1,0": starts with color1, switches to color2 at 10%, continues with color2 up to 90%, then switches back to color1.</para>
            </example>
        </member>
        <member name="T:C1.Framework.ColorBlendConverter">
            <summary>
            <see cref="T:System.ComponentModel.TypeConverter"/> that converts <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> objects to and from strings.
            </summary>
        </member>
        <member name="T:C1.Framework.BorderEdges">
            <summary>
            Class that stores colors for individual border edges.
            </summary>
            <remarks>
            <para>In most cases, borders have a single color and this class is not used at all.</para>
            <para>If the members of this class are set to non-transparent colors, then the specified
            colors are used to paint over specific edges.</para>
            <para>This class paints the borders with a bevel so they line up at the corners, but
            it does not handle corners at all, so only rectangular elements can have multi-colored
            borders.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.BorderEdges.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.BorderEdges"/>.
            </summary>
            <param name="style"><see cref="P:C1.Framework.BorderEdges.Style"/> that owns the new instance.</param>
        </member>
        <member name="M:C1.Framework.BorderEdges.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.BorderEdges"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.Left">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the left edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.Top">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the top edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.Right">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the right edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.Bottom">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the bottom edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.BorderEdges.IsEmpty">
            <summary>
            Gets a value that determines if colors have been specified for any of the edges.
            </summary>
        </member>
        <member name="M:C1.Framework.BorderEdges.Clone">
            <summary>
            Gets a clone of this <see cref="T:C1.Framework.BorderEdges"/> object.
            </summary>
            <returns>A clone of this <see cref="T:C1.Framework.BorderEdges"/> object.</returns>
        </member>
        <member name="M:C1.Framework.BorderEdges.Equals(System.Object)">
            <summary>
            Returns true if the colors are the same for all edges.
            </summary>
            <remarks>
            This is important when handling persistence and comparing to the default value.
            </remarks>
            <param name="obj"><see cref="T:C1.Framework.BorderEdges"/> to compare to this object.</param>
            <returns>True if the colors are the same for all edges.</returns>
        </member>
        <member name="M:C1.Framework.BorderEdges.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:C1.Framework.BorderEdges"/> object.
            </summary>
            <returns>An integer that serves as a hash function for a <see cref="T:C1.Framework.BorderEdges"/> object.</returns>
        </member>
        <member name="M:C1.Framework.BorderEdges.Render(System.Drawing.Graphics,System.Drawing.Rectangle,C1.Framework.Corners,C1.Framework.Thickness)">
            <summary>
            Renders a border with edges of different colors.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the border will be drawn.</param>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> within which the border will be drawn.</param>
            <param name="c"><see cref="T:C1.Framework.Corners"/> object that specifies which corners are rounded; 
            edges adjacent to rounded corners are not drawn by the <see cref="T:C1.Framework.BorderEdges"/> class.</param>
            <param name="t"><see cref="T:C1.Framework.Thickness"/> object that specifies the thickness of each edge.</param>
        </member>
        <member name="M:C1.Framework.BorderEdges.Render(System.Drawing.Graphics,System.Drawing.Rectangle,C1.Framework.Corners,C1.Framework.Thickness,System.Boolean)">
            <summary>
            Renders a border with edges of different colors.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the border will be drawn.</param>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> within which the border will be drawn.</param>
            <param name="c"><see cref="T:C1.Framework.Corners"/> object that specifies which corners are rounded; 
            edges adjacent to rounded corners are not drawn by the <see cref="T:C1.Framework.BorderEdges"/> class.</param>
            <param name="t"><see cref="T:C1.Framework.Thickness"/> object that specifies the thickness of each edge.</param>
            <param name="rtl"><see cref="T:System.Boolean"/> specifies whether to apply RightToLeft layout.</param>
        </member>
        <member name="M:C1.Framework.BorderEdges.Render(System.Drawing.Graphics,System.Drawing.Rectangle,C1.Framework.Corners,C1.Framework.Thickness,System.Drawing.Brush,System.Drawing.Brush,System.Drawing.Brush,System.Drawing.Brush,System.Boolean)">
            <summary>
            Renders a border with edges of different colors.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the border will be drawn.</param>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> within which the border will be drawn.</param>
            <param name="c"><see cref="T:C1.Framework.Corners"/> object that specifies which corners are rounded; 
            edges adjacent to rounded corners are not drawn by the <see cref="T:C1.Framework.BorderEdges"/> class.</param>
            <param name="t"><see cref="T:C1.Framework.Thickness"/> border thickness.</param>
            <param name="left"><see cref="T:System.Drawing.Brush"/> brush which should be used for left border.</param>
            <param name="right"><see cref="T:System.Drawing.Brush"/> brush which should be used for right border.</param>
            <param name="top"><see cref="T:System.Drawing.Brush"/> brush which should be used for top border.</param>
            <param name="bottom"><see cref="T:System.Drawing.Brush"/> brush which should be used for bottom border.</param>
            <param name="rtl"><see cref="T:System.Boolean"/> specifies whether to apply RightToLeft layout.</param>
        </member>
        <member name="P:C1.Framework.BorderEdges.Style">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.BorderEdges.Style"/> that owns this <see cref="T:C1.Framework.BorderEdges"/> object.
            </summary>
        </member>
        <member name="M:C1.Framework.BorderEdges.OnPropertyChanged">
            <summary>
            Notifies the owner <see cref="P:C1.Framework.BorderEdges.Style"/> that this object has changed.
            </summary>
        </member>
        <member name="T:C1.Framework.BorderEdgesConverter">
            <summary>
            <see cref="T:System.ComponentModel.ExpandableObjectConverter"/> that converts <see cref="T:C1.Framework.BorderEdges"/> objects to and from strings.
            </summary>
            <remarks>
            This converter allows persisting <see cref="T:C1.Framework.BorderEdges"/> objects to Xml.
            </remarks>
        </member>
        <member name="T:C1.Framework.Corners">
            <summary>
            Represents corners associated with a user interface (UI) element.
            </summary>
        </member>
        <member name="M:C1.Framework.Corners.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Corners"/> object. 
            </summary>
            <param name="leftTop">Radius of the left top corner, in pixels.</param>
            <param name="rightTop">Radius of the right top corner, in pixels.</param>
            <param name="leftBottom">Radius of the left bottom corner, in pixels.</param>
            <param name="rightBottom">Radius of the right bottom corner, in pixels.</param>
        </member>
        <member name="M:C1.Framework.Corners.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Corners"/> object.
            </summary>
            <param name="radius">Radius of all corners, in pixels.</param>
        </member>
        <member name="P:C1.Framework.Corners.Empty">
            <summary>
            Provides a <see cref="T:C1.Framework.Corners"/> object with no thickness.
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.LeftTop">
            <summary>
            Gets or sets the radius for the left top corner. 
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.RightTop">
            <summary>
            Gets or sets the radius for the right top corner. 
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.LeftBottom">
            <summary>
            Gets or sets the radius for the left bottom corner. 
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.RightBottom">
            <summary>
            Gets or sets the radius for the right bottom corner. 
            </summary>
        </member>
        <member name="P:C1.Framework.Corners.IsEmpty">
            <summary>
            Returns true if the <see cref="T:C1.Framework.Corners"/> object is empty. 
            </summary>
        </member>
        <member name="M:C1.Framework.Corners.op_Implicit(System.Int32)~C1.Framework.Corners">
            <summary>
            Converts an <see cref="T:System.Int32"/> into a <see cref="T:C1.Framework.Corners"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Corners.SwapLeftRight">
            <summary>
            Swaps corners for RightToLeft layout.
            </summary>
        </member>
        <member name="M:C1.Framework.Corners.SwapTopBottom">
            <summary>
            Swaps top and bottom corners.
            </summary>
        </member>
        <member name="M:C1.Framework.Corners.GetHashCode">
            <summary>
            Generates a hash code for the current <see cref="T:C1.Framework.Corners"/>. 
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:C1.Framework.Corners.Equals(System.Object)">
            <summary>
            Determines whether the value of the specified object is equivalent 
            to the current <see cref="T:C1.Framework.Corners"/>. 
            </summary>
            <param name="obj">The object to compare to the current <see cref="T:C1.Framework.Corners"/>.</param>
            <returns>true if the two <see cref="T:C1.Framework.Corners"/> objects are equal; 
            otherwise, false. </returns>
        </member>
        <member name="M:C1.Framework.Corners.op_Equality(C1.Framework.Corners,C1.Framework.Corners)">
            <summary>
            Tests whether two specified <see cref="T:C1.Framework.Corners"/> objects are equivalent. 
            </summary>
            <param name="c1">A <see cref="T:C1.Framework.Corners"/> to test.</param>
            <param name="c2">A <see cref="T:C1.Framework.Corners"/> to test.</param>
            <returns>true if the two <see cref="T:C1.Framework.Corners"/> objects are equal; 
            otherwise, false. </returns>
        </member>
        <member name="M:C1.Framework.Corners.op_Inequality(C1.Framework.Corners,C1.Framework.Corners)">
            <summary>
            Tests whether two specified <see cref="T:C1.Framework.Corners"/> objects are not equivalent. 
            </summary>
            <param name="c1">A <see cref="T:C1.Framework.Corners"/> to test.</param>
            <param name="c2">A <see cref="T:C1.Framework.Corners"/> to test.</param>
            <returns>True if the two <see cref="T:C1.Framework.Corners"/> objects are different; 
            otherwise, false. </returns>
        </member>
        <member name="M:C1.Framework.Corners.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:C1.Framework.Corners"/>.
            </summary>
            <returns>A String that represents the current <see cref="T:C1.Framework.Corners"/>.</returns>
        </member>
        <member name="T:C1.Framework.CornersConverter">
            <summary>
            Provides a type converter to convert <see cref="T:C1.Framework.Corners"/> values 
            to and from various other representations. 
            </summary>
        </member>
        <member name="M:C1.Framework.CornersConverter.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.CornersConverter"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.CornersConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type from which to convert.</param>
            <returns>True if the conversion can be performed; false otherwise.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type to convert to.</param>
            <returns>True if the conversion can be performed; false otherwise.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> into which <paramref name="value"/> will be converted.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates a <see cref="T:C1.Framework.Corners"/> object given a set of property values for the object. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">A contains a series of name-value pairs with the new property values.</param>
            <returns>The newly created object, or null if the object could not be created.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object requires a call to 
            the <see cref="M:C1.Framework.CornersConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)"/> method to create a new value.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>True if the <see cref="M:C1.Framework.CornersConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)"/> method should be called when a change is made to one or more properties of this object.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type.</returns>
        </member>
        <member name="M:C1.Framework.CornersConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="T:C1.Framework.Alignment">
            <summary>
            Specifies the text alignment.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.NotSet">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.Near">
            <summary>
            Near.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.Far">
            <summary>
            Far.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:C1.Framework.Alignment.Spread">
            <summary>
            Spread.
            </summary>
        </member>
        <member name="T:C1.Framework.ImageAlignment">
            <summary>
            Specifies the image alignment.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.LeftTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.CenterTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.RightTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.LeftCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.CenterCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned at the center. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.RightCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.LeftBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the left. 		
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.CenterBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageAlignment.RightBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="T:C1.Framework.ImageScaling">
            <summary>
            Specifies the image scaling.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Clip">
            <summary>
            Use the image's original size, clipping it to the display area if necessary.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Stretch">
            <summary>
            Stretch the image to fill the display area. 
            This mode will usually change the image's aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Scale">
            <summary>
            Scale the image to fit the display area. 
            This mode may increase or reduce the size of the image 
            while maintaining its aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Tile">
            <summary>
            Tile the image to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.TileStretch">
            <summary>
            Tile the image into the 3x3 matrix and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.TileStretchHorizontal">
            <summary>
            Tile the image into the row of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.TileStretchVertical">
            <summary>
            Tile the image into the column of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Framework.ImageScaling.Hide">
            <summary>
            Hide the image.
            </summary>
        </member>
        <member name="T:C1.Framework.GradientMode">
            <summary>
            Specifies the background gradient mode.
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.None">
            <summary>
            No gradient.
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.Horizontal">
            <summary>
            Horizontal gradient (left to right).
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.Vertical">
            <summary>
            Vertical gradient (top to bottom).
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.DiagonalDown">
            <summary>
            Diagonal gradient (left-top to right-bottom).
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.DiagonalUp">
            <summary>
            Diagonal gradient (left-bottom to right-top).
            </summary>
        </member>
        <member name="F:C1.Framework.GradientMode.Radial">
            <summary>
            Radial gradient.
            </summary>
        </member>
        <member name="T:C1.Framework.TextDirection">
            <summary>
            Specifies the text direction (horizontal or vertical).
            </summary>
        </member>
        <member name="F:C1.Framework.TextDirection.Normal">
            <summary>
            Text is drawn in the horizontal direction, left to right.
            </summary>
        </member>
        <member name="F:C1.Framework.TextDirection.Up">
            <summary>
            Text is draw vertically, from the bottom up.
            </summary>
        </member>
        <member name="F:C1.Framework.TextDirection.Down">
            <summary>
            Text is draw vertically, from the top down.
            </summary>
        </member>
        <member name="T:C1.Framework.StyleFlags">
            <summary>
            Specifies flags for the style.
            </summary>
        </member>
        <member name="F:C1.Framework.StyleFlags.None">
            <summary>
            No special flags.
            </summary>
        </member>
        <member name="F:C1.Framework.StyleFlags.PageBreakBefore">
            <summary>
            Add a page break before this element.
            </summary>
        </member>
        <member name="F:C1.Framework.StyleFlags.PageBreakAfter">
            <summary>
            Add a page break after this element.
            </summary>
        </member>
        <member name="T:C1.Framework.TextDecoration">
            <summary>
            Enables or disables the text font decorations, such as Underline or Strikeout.
            </summary>
        </member>
        <member name="F:C1.Framework.TextDecoration.Default">
            <summary>
            No changes to font style.
            </summary>
        </member>
        <member name="F:C1.Framework.TextDecoration.Strikeout">
            <summary>
            Enables the Strikeout effect.
            </summary>
        </member>
        <member name="F:C1.Framework.TextDecoration.NoStrikeout">
            <summary>
            Disables the Strikeout effect.
            </summary>
        </member>
        <member name="F:C1.Framework.TextDecoration.Underline">
            <summary>
            Enables the Underline effect.
            </summary>
        </member>
        <member name="F:C1.Framework.TextDecoration.NoUnderline">
            <summary>
            Disables the Underline effect.
            </summary>
        </member>
        <member name="T:C1.Framework.DynamicStyle">
            <summary>
            Provides data for a dynamic style.
            </summary>
        </member>
        <member name="F:C1.Framework.DynamicStyle.Empty">
            <summary>
            The default empty dynamic style.
            </summary>
        </member>
        <member name="M:C1.Framework.DynamicStyle.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new <see cref="T:C1.Framework.DynamicStyle"/> object.
            </summary>
            <param name="style">The parent style object.</param>
        </member>
        <member name="P:C1.Framework.DynamicStyle.Name">
            <summary>
            Gets the name of the style.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.Owner">
            <summary>
            Gets the style owner object, such as XStyleSet.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.RightToLeft">
            <summary>
            Gets a value indicating whether the right-to-left mode is on.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.TextDecoration">
            <summary>
            Gets or sets whether the Underline or Strikeout effects should be used or not used when drawing the text.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.ForeColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to draw the text.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.BackBrushProvider">
            <summary>
            Gets or sets the brush provider used to render the element background.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.BorderBrush">
            <summary>
            Gets or sets the brush used to paint the borders around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.BorderLeft">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Brush"/> used to paint the left edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.BorderTop">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Brush"/> used to paint the top edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.BorderRight">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Brush"/> used to paint the right edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.BorderBottom">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Brush"/> used to paint the bottom edge of the border.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.Border">
            <summary>
            Gets or sets the thickness of the border around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.DynamicStyle.BackImage">
            <summary>
            Gets or sets the background image for the element.
            </summary>
        </member>
        <member name="T:C1.Framework.Style">
            <summary>
            <para>The <see cref="T:C1.Framework.Style"/> class contains display attributes that 
            determine the appearance of content on the screen/printer. 
            It includes most elements found in Css styles.</para>
            <para>The <see cref="T:C1.Framework.Style"/> class also contains methods for rendering 
            and measuring content (strings and images) based on the style settings 
            (fonts, margins, etc).</para>
            <para>The <see cref="T:C1.Framework.Style"/> objects are not hierarchical in the sense 
            that they don't have parent styles and don't inherit attributes 
            from the parent style. To create a new style based on an existing one, 
            you would clone the original style, then apply whatever attributes 
            you want to the new style.</para>
            <para>The <see cref="T:C1.Framework.Style"/> objects are hierarchical in the sense that 
            two style attributes (<see cref="P:C1.Framework.Style.Font"/> and <see cref="P:C1.Framework.Style.ForeBrush"/>) don't 
            need to be set. If these attributes are not set, they are inherited, 
            but not from a parent <see cref="T:C1.Framework.Style"/> object. Rather, these attributes 
            are inherited from the parent UI object.</para>
            <para>This type of inheritance make it easy to define a font on 
            a <see cref="T:C1.Framework.Style"/> associated with a parent UI object and have that 
            font be automatically applied to all UI objects contained in the parent. 
            By contrast, a <see cref="P:C1.Framework.Style.BackBrush"/> attribute is not explicitly inherited. 
            Instead, the parent UI object paints its client area with a brush, 
            and child UI objects have a transparent background by default,
            so the parent background shows through by default. Other attributes such
            as alignment, margins, padding, etc are also not inherited.</para>
            </summary>
        </member>
        <member name="F:C1.Framework.Style.SHADOW_SIZE">
            <summary>
            The size of shadow.
            </summary>
        </member>
        <member name="M:C1.Framework.Style.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Style"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Style.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Style"/>.
            </summary>
            <param name="name">The name of the new <see cref="T:C1.Framework.Style"/> object.</param>
        </member>
        <member name="M:C1.Framework.Style.#ctor(System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Style"/>.
            </summary>
            <param name="owner">The owner object for the new <see cref="T:C1.Framework.Style"/>.</param>
        </member>
        <member name="P:C1.Framework.Style.Name">
            <summary>
            Gets or sets the style name.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Locked">
            <summary>
            Gets or sets whether the style is locked and cannot be modified.
            </summary>
            <remarks>
            This property is useful when you want to prevent code from accidentally 
            modifying 'stock' styles.
            </remarks>
        </member>
        <member name="P:C1.Framework.Style.Font">
            <summary>
            Gets or sets the font used to paint text within the element.
            </summary>
            <remarks>
            If this property is set to null, the text will be painted using the font
            specified by the parent element's font.
            </remarks>
        </member>
        <member name="P:C1.Framework.Style.FontDescent">
            <summary>
            Gets the part of the font below the baseline.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackBrush">
            <summary>
            Gets or sets the brush used to render the element background.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackImage">
            <summary>
            Gets or sets the background image for the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackImageAlignment">
            <summary>
            Gets or sets the alignment used to render the background image.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackImageScaling">
            <summary>
            Gets or sets the scaling used to render the background image.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ForeBrush">
            <summary>
            Gets or sets the brush used to paint the text within the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BorderBrush">
            <summary>
            Gets or sets the brush used to paint the borders around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Padding">
            <summary>
            Gets or sets the thickness of the padding between the element edges and its content.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.PaddingRtl">
            <summary>
            Returns padding which honors current RightToLeft settings.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Border">
            <summary>
            Gets or sets the thickness of the border around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BorderRtl">
            <summary>
            Returns padding which honors current RightToLeft settings.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BorderColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to draw the border around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BorderEdges">
            <summary>
            Gets <see cref="P:C1.Framework.Style.BorderEdges"/> object that defines the colors used to paint each edge of the borders.
            </summary>
            <remarks>
            <para>Normally, this property is empty, and the border is drawn using the color specified by the <see cref="P:C1.Framework.Style.BorderColor"/>
            property.</para>
            <para>If any of the members of this property are set to non-transparent colors, then the specified color
            is used to paint the specific border.</para>
            <para>This property is only applicable if the <see cref="P:C1.Framework.Style.Corners"/> are set to zero.</para>
            </remarks>
        </member>
        <member name="P:C1.Framework.Style.Corners">
            <summary>
            Gets or sets the radii of the element corners.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Margins">
            <summary>
            Gets or sets the thickness of the margins around the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.MarginsRtl">
            <summary>
            Returns margins which honor current RightToLeft settings.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Clip">
            <summary>
            Gets or sets whether text content should be clipped to the element area.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.FontPadding">
            <summary>
            Gets or sets whether text bounding rectangle should include padding.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.HorizontalAlignment">
            <summary>
            Gets or sets how elements should be aligned in the horizontal direction.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.VerticalAlignment">
            <summary>
            Gets or sets how elements should be aligned in the vertical direction.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ImageAlignment">
            <summary>
            Gets or sets how images should be aligned within the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ImageScaling">
            <summary>
            Gets or sets how images should be scaled within the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.WordWrap">
            <summary>
            Gets or sets whether text should be allowed to wrap within the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Trimming">
            <summary>
            Gets or sets how to trim characters that do not fit in the space available.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Format">
            <summary>
            Gets or sets the format string used to convert the element value into a string.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Indent">
            <summary>
            Gets or sets the indentation for the first text element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ChildSpacing">
            <summary>
            Gets or sets the amount of space between child elements.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Width">
            <summary>
            Gets or sets the style width (set to -1 to use the default width).
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Height">
            <summary>
            Gets or sets the style height (set to -1 to use the default height).
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Cursor">
            <summary>
            Gets or sets the cursor that should be displayed when the mouse is over elements with this style.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.HotkeyPrefix">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.Style.HotkeyPrefix"/> value determining how to display hot keys. 
            </summary>
        </member>
        <member name="P:C1.Framework.Style.TextDirection">
            <summary>
            Gets or sets the direction in which text is rendered.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.RightToLeft">
            <summary>
            Gets or sets whether text should be rendered from right to left, such as in Arabic or Hebrew.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.EnforceRtl">
            <summary>
            Gets or sets a value indicating if the value of Style.RightToLeft property must be applied to Element.
            </summary>
            <remarks>This property can be set when reading css styles from dir attribute.</remarks>
        </member>
        <member name="P:C1.Framework.Style.Hot">
            <summary>
            Gets or sets the style to be used when the element is hot.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Pressed">
            <summary>
            Gets or sets the style to be used when the element is pressed.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.HotPressed">
            <summary>
            Gets or sets the style to be used when the element is hot and pressed.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.DisplayBlock">
            <summary>
            Gets or sets the display as block or inline of the element.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Disabled">
            <summary>
            Gets or sets the style to be used when the element is disabled.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Shadow">
            <summary>
            Gets or sets whether the style includes a shadow.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.DefaultStyle">
            <summary>
            Gets a reference to the default style.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ForeColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the text.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackColor">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> used to paint the background.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.GradientMode">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.Style.GradientMode"/> used to paint the background.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.GradientBlend">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.Blend"/> used to paint the background gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.GradientInterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines a multicolor gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.GradientCenter">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.PointF"/> that represents the center of a radial gradient background in percentage units.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackColor2">
            <summary>
            Gets or sets the secondary color used to build the background gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.GammaCorrection">
            <summary>
            Gets or sets whether to apply gamma correction to the background gradient.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Flags">
            <summary>
            Gets or sets the style flags.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.SFormatFlags">
            <summary>
            Gets or sets string rendering options (DrawString).
            </summary>
        </member>
        <member name="P:C1.Framework.Style.TFormatFlags">
            <summary>
            Gets or sets string rendering options (TextRenderer).
            </summary>
        </member>
        <member name="M:C1.Framework.Style.Freeze(C1.Framework.DynamicStyle)">
            <summary>
            Forces the dynamic style to freeze.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.FrozenDS">
            <summary>
            "Frozen" dynamic style.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Owner">
            <summary>
            Gets the owner object, such an XStyleSet.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackImageAllowFlip">
            <summary>
            Gets or sets whether the background image can be flipped for RTL mode.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.ImageAllowFlip">
            <summary>
            Gets or sets whether the image should be flipped horizontally for RTL mode.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackImagePadding">
            <summary>
            Gets or sets the thickness of the padding between the element edges and its content.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.BackImagePaddingRtl">
            <summary>
            Returns back image padding which honors current RightToLeft settings.
            </summary>
        </member>
        <member name="P:C1.Framework.Style.Ellipse">
            <summary>
            Gets or sets whether the element border is an ellipse (for the dynamic styles only).
            </summary>
        </member>
        <member name="M:C1.Framework.Style.Inflate(System.Drawing.Rectangle)">
            <summary>
            Inflates the specified <see cref="T:System.Drawing.Rectangle"/> by the values of
            the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to inflate.</param>
            <returns>The resulting <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Style.Inflate(System.Drawing.Size)">
            <summary>
            Inflates the specified <see cref="T:System.Drawing.Size"/> by the values of
            the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="size">A <see cref="T:System.Drawing.Size"/> to inflate.</param>
            <returns>The resulting <see cref="T:System.Drawing.Size"/>.</returns>
        </member>
        <member name="M:C1.Framework.Style.Inflate(System.Int32,System.Int32)">
            <summary>
            Inflates the specified width and height by the values of
            the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="width">A width to inflate.</param>
            <param name="height">A height to inflate.</param>
            <returns>The resulting <see cref="T:System.Drawing.Size"/>.</returns>
        </member>
        <member name="M:C1.Framework.Style.InflateWidth(System.Int32)">
            <summary>
            Inflates the specified width by the values of the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="width">A width to inflate.</param>
            <returns>The resulting width.</returns>
        </member>
        <member name="M:C1.Framework.Style.InflateHeight(System.Int32)">
            <summary>
            Inflates the specified height by the values of the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="height">A height to inflate.</param>
            <returns>The resulting height.</returns>
        </member>
        <member name="M:C1.Framework.Style.Deflate(System.Drawing.Rectangle)">
            <summary>
            Deflates the specified <see cref="T:System.Drawing.Rectangle"/> by the values of
            the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to deflate.</param>
            <returns>The resulting <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Style.Deflate(System.Drawing.Size)">
            <summary>
            Deflates the specified <see cref="T:System.Drawing.Size"/> by the values of
            the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="size">A <see cref="T:System.Drawing.Size"/> to deflate.</param>
            <returns>The resulting <see cref="T:System.Drawing.Size"/>.</returns>
        </member>
        <member name="M:C1.Framework.Style.Deflate(System.Int32,System.Int32)">
            <summary>
            Deflates the specified width and height by the values of
            the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="width">A width to deflate.</param>
            <param name="height">A height to deflate.</param>
            <returns>The resulting <see cref="T:System.Drawing.Size"/>.</returns>
        </member>
        <member name="M:C1.Framework.Style.DeflateWidth(System.Int32)">
            <summary>
            Deflates the specified width by the values of the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="width">A width to deflate.</param>
            <returns>The resulting width.</returns>
        </member>
        <member name="M:C1.Framework.Style.DeflateHeight(System.Int32)">
            <summary>
            Deflates the specified height by the values of the current <see cref="T:C1.Framework.Style"/> margins, padding and border.
            </summary>
            <param name="height">A height to deflate.</param>
            <returns>The resulting height.</returns>
        </member>
        <member name="M:C1.Framework.Style.Clone">
            <summary>
            Creates an instance of the <see cref="T:C1.Framework.Style"/> class that is identical 
            to the current <see cref="T:C1.Framework.Style"/> (except for the <see cref="P:C1.Framework.Style.Locked"/> property,
            which is always false for clones).
            </summary>
            <returns>The copy of the current <see cref="T:C1.Framework.Style"/>.</returns>
        </member>
        <member name="M:C1.Framework.Style.Copy(C1.Framework.Style)">
            <summary>
            Copies all attributes from another <see cref="T:C1.Framework.Style"/> object.
            </summary>
            <param name="source"><see cref="T:C1.Framework.Style"/> object that contains the attributes to copy.</param>
            <remarks>
            The difference between this method and <see cref="M:C1.Framework.Style.Clone"/> is that <b>Clone</b> returns a new
            object, while <b>Copy</b> modifies the attributes in an existing style.
            </remarks>
        </member>
        <member name="M:C1.Framework.Style.Merge(C1.Framework.Style)">
            <summary>
            Copies attributes set to non-default values from another <see cref="T:C1.Framework.Style"/> object.
            </summary>
            <param name="source"><see cref="T:C1.Framework.Style"/> object that contains the attributes to copy.</param>
            <remarks>
            The difference between <see cref="M:C1.Framework.Style.Copy(C1.Framework.Style)"/> and <b>Merge</b> is that <b>Merge</b> will not copy
            attributes that are set to their default values in the <paramref name="source"/> <see cref="T:C1.Framework.Style"/>.
            </remarks>
        </member>
        <member name="M:C1.Framework.Style.FormatValue(System.Object)">
            <summary>
            Converts value to string according to <see cref="P:C1.Framework.Style.Format"/> property value.
            </summary>
            <param name="value">A value to convert.</param>
            <returns>The string value of the current instance.</returns>
        </member>
        <member name="M:C1.Framework.Style.Dispose">
            <summary>
            Releases all resources.
            </summary>
        </member>
        <member name="E:C1.Framework.Style.StyleChanged">
            <summary>
            Fires when any elements of the <see cref="T:C1.Framework.Style"/> change.
            </summary>
        </member>
        <member name="M:C1.Framework.Style.OnStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Framework.Style.StyleChanged"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:C1.Framework.Style.BackBrushProvider">
            <summary>
            Gets or sets the brush provider used to render the element background.
            </summary>
        </member>
        <member name="M:C1.Framework.Style.HasShadow">
            <summary>
            Gets whether this style or any of its sub-styles has a shadow.
            </summary>
            <returns>True if style or its sub-styles have shadow; False otherwise.</returns>
        </member>
        <member name="M:C1.Framework.Style.ColorFromBrush(System.Drawing.Brush)">
            <summary>
            Returns <see cref="P:System.Drawing.SolidBrush.Color"/> if specified brush is a <see cref="T:System.Drawing.SolidBrush"/> or <see cref="P:System.Drawing.Color.Transparent"/> otherwise.
            </summary>
            <param name="brush"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.Style.BrushFromColor(System.Drawing.Color)">
            <summary>
            Returns new <see cref="T:System.Drawing.SolidBrush"/> if specified color is not <see cref="P:System.Drawing.Color.Transparent"/> or null otherwise.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Framework.Theme">
            <summary>
            Class that contains a keyed collection of <see cref="T:C1.Framework.Style"/> objects and methods 
            to serialize the styles into Xml files and streams.
            </summary>
            <remarks>
            <para>The Theme class is a named/keyed collection of <see cref="T:C1.Framework.Style"/> objects.</para>
            <para>The class is designed to be used as a base class for components that need
            to add custom elements to themes in addition to a style collection.</para>
            <para>Inheritors should override the following methods:</para>
            <code>
            // specify the name of the component that will use this theme
            protected virtual string ComponentType
            
            // save component-specific elements to xml
            protected virtual void WriteCustomData(XmlWriter writer)
            
            // load component-specific elements from xml
            protected virtual void ReadCustomData(XmlNode node)
            </code>
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Theme"/>.
            </summary>
            <param name="name">Name of the new theme.</param>
        </member>
        <member name="M:C1.Framework.Theme.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Theme"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.Theme.Name">
            <summary>
            Gets or sets the theme name (e.g. "RedMoon");
            </summary>
        </member>
        <member name="M:C1.Framework.Theme.SaveThemes(C1.Framework.Theme[],System.String)">
            <summary>
            Saves a collection of themes into an Xml file.
            </summary>
            <param name="themes">Array containing <see cref="T:C1.Framework.Theme"/> objects.</param>
            <param name="fileName">Name of the Xml file where the themes will be saved.</param>
            <remarks>
            Use the <see cref="M:C1.Framework.Theme.LoadThemes(System.String)"/> method to load the saved themes.
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.LoadThemes(System.String)">
            <summary>
            Loads a collection of themes from an Xml file.
            </summary>
            <param name="fileName">Name of the Xml file that contains the themes.</param>
            <returns>An array containing the themes loaded from the file.</returns>
            <remarks>
            Use this method to load themes saved with the <see cref="M:C1.Framework.Theme.SaveThemes(C1.Framework.Theme[],System.String)"/> method.
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes this <see cref="T:C1.Framework.Theme"/> into an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that will receive the theme definition.</param>
        </member>
        <member name="M:C1.Framework.Theme.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads this <see cref="T:C1.Framework.Theme"/> from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> that contains the theme definition.</param>
        </member>
        <member name="M:C1.Framework.Theme.WriteXml(System.String)">
            <summary>
            Writes this <see cref="T:C1.Framework.Theme"/> into an Xml file.
            </summary>
            <param name="fileName">Name of the file where the theme will be saved.</param>
        </member>
        <member name="M:C1.Framework.Theme.WriteXml(System.IO.Stream)">
            <summary>
            Writes this <see cref="T:C1.Framework.Theme"/> into an Xml <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> where the theme will be saved.</param>
        </member>
        <member name="M:C1.Framework.Theme.ReadXml(System.String)">
            <summary>
            Reads this <see cref="T:C1.Framework.Theme"/> from an Xml file.
            </summary>
            <param name="fileName">File that contains the theme data.</param>
        </member>
        <member name="M:C1.Framework.Theme.ReadXml(System.IO.Stream)">
            <summary>
            Reads this <see cref="T:C1.Framework.Theme"/> from an Xml <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the theme data in Xml format.</param>
        </member>
        <member name="M:C1.Framework.Theme.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads this <see cref="T:C1.Framework.Theme"/> from an <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the theme data.</param>
        </member>
        <member name="M:C1.Framework.Theme.ReadXmlString(System.String)">
            <summary>
            Reads this <see cref="T:C1.Framework.Theme"/> from an Xml string.
            </summary>
            <param name="xmlString">String that contains the theme data in Xml format.</param>
        </member>
        <member name="P:C1.Framework.Theme.ComponentType">
            <summary>
            Gets or sets the name of the component that owns the theme
            (e.g., "C1Schedule", "C1Calendar" or "C1Ribbon"). 
            </summary>
        </member>
        <member name="M:C1.Framework.Theme.WriteCustomData(System.Xml.XmlWriter)">
            <summary>
            Writes component-specific data into the theme.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> where custom theme data is saved.</param>
            <remarks>
            Derived classes should override this method to save any custom data their themes may need 
            (anything other than the <see cref="T:C1.Framework.Style"/> collection).
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.ReadCustomData(System.Xml.XmlNode)">
            <summary>
            Reads component-specific theme data.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the theme data.</param>
            <remarks>
            Derived classes should override this method to read any custom data their themes may need 
            (anything other than the <see cref="T:C1.Framework.Style"/> collection).
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.SaveImage(System.Xml.XmlWriter,System.String,System.Drawing.Image)">
            <summary>
            Saves an image into the Xml output stream.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that contains the theme definition.</param>
            <param name="propertyName">Name of the node where the image will be stored.</param>
            <param name="image"><see cref="T:System.Drawing.Image"/> that will be saved in the stream.</param>
            <remarks>
            <para>The default implementation keeps a list of the images that have been saved. If any
            images are saved more than once, only the index is stored for the repeated instances.</para>
            <para>For example:</para>
            <code>
            SaveImage(writer, "MyImageProperty", img);
            SaveImage(writer, "MyImagePropertyAgain", img);
            SaveImage(writer, "MyImagePropertyAndAgain", img);
            
            [MyImageProperty]base64data[/MyImageProperty]
            [MyImagePropertyAgain index="0"/]
            [MyImagePropertyAndAgain index="0"/]
            </code>
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.LoadImage(System.Xml.XmlNode)">
            <summary>
            Loads an image from the Xml stream.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the image information.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> object.</returns>
            <remarks>
            <para>The first instance of each image is stored as node data (base 64-encoded). When this
            instance is loaded for the first time, the image is stored in an internal image list.</para>
            <para>Subsequent instances of the same image are not stored in the node as binary data;
            an "index" attribute is used instead that specifies the index of the image in the
            internal image collection.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.GetKeyForItem(C1.Framework.Style)">
            <summary>
            Styles are indexed by style name.
            </summary>
            <param name="style">Collection member.</param>
            <returns>Style name (must be unique within collection).</returns>
        </member>
        <member name="M:C1.Framework.Theme.WriteStyle(System.Xml.XmlWriter,C1.Framework.Style,System.Collections.Generic.List{System.Drawing.Image},C1.Framework.Style)">
            <summary>
            Saves a <see cref="T:C1.Framework.Style"/> into an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> that will receive the style data.</param>
            <param name="style"><see cref="T:C1.Framework.Style"/> that will be saved.</param>
            <param name="images">List of images whose indices will be saved.</param>
            <param name="parentStyle">Base <see cref="T:C1.Framework.Style"/> that 'owns' the style being saved.</param>
            <remarks>
            <para>To save space, the following rules apply:</para>
            <para>Properties of the main style are saved only if they are set to values different from the default.</para>
            <para>Properties of substyles (hot, pressed, etc) are saved only if they are different from the main style.</para>
            <para>Images are saved in a separate list, and only references are saved in the styles.</para>
            </remarks>
        </member>
        <member name="M:C1.Framework.Theme.ReadStyle(System.Xml.XmlNode,System.Collections.Generic.List{System.Drawing.Image},C1.Framework.Style)">
            <summary>
            Loads a <see cref="T:C1.Framework.Style"/> from an <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> that contains the style data.</param>
            <param name="images">List of images whose indices were saved.</param>
            <param name="parentStyle">Base <see cref="T:C1.Framework.Style"/> that 'owns' the style being loaded.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Framework.Thickness">
            <summary>
            Represents padding, border or margin information associated with a 
            user interface (UI) element.
            </summary>
        </member>
        <member name="M:C1.Framework.Thickness.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Thickness"/>. 
            </summary>
            <param name="left">Thickness of the left edge, in pixels.</param>
            <param name="top">Thickness of the top edge, in pixels.</param>
            <param name="right">Thickness of the right edge, in pixels.</param>
            <param name="bottom">Thickness of the bottom edge, in pixels.</param>
        </member>
        <member name="M:C1.Framework.Thickness.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Thickness"/>.
            </summary>
            <param name="leftRight">Thickness of the left and right edges, in pixels.</param>
            <param name="topBottom">Thickness of the top and bottom edges, in pixels.</param>
        </member>
        <member name="M:C1.Framework.Thickness.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.Thickness"/>.
            </summary>
            <param name="width">Thickness of all edges, in pixels.</param>
        </member>
        <member name="P:C1.Framework.Thickness.Empty">
            <summary>
            Provides a <see cref="T:C1.Framework.Thickness"/> object with no thickness.
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Left">
            <summary>
            Gets or sets the thickness value for the left edge. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Top">
            <summary>
            Gets or sets the thickness value for the top edge. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Right">
            <summary>
            Gets or sets the thickness value for the right edge. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Bottom">
            <summary>
            Gets or sets the thickness value for the bottom edge. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.IsEmpty">
            <summary>
            Returns true if the <see cref="T:C1.Framework.Thickness"/> object is empty. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Height">
            <summary>
            Gets the combined thickness for the top and bottom edges. 
            </summary>
        </member>
        <member name="P:C1.Framework.Thickness.Width">
            <summary>
            Gets the combined thickness for the right and left edges. 
            </summary>
        </member>
        <member name="M:C1.Framework.Thickness.Inflate(System.Int32,System.Int32)">
            <summary>
            Inflates the current <see cref="T:C1.Framework.Thickness"/> by the specified values.
            </summary>
            <param name="width">The inflate size for vertical edges.</param>
            <param name="height">The inflate size for horizontal edges.</param>
            <returns>The new <see cref="T:C1.Framework.Thickness"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.Inflate(System.Int32)">
            <summary>
            Inflates the current <see cref="T:C1.Framework.Thickness"/> by the specified size.
            </summary>
            <param name="size">The size.</param>
            <returns>The new <see cref="T:C1.Framework.Thickness"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.Inflate(System.Drawing.Rectangle)">
            <summary>
            Inflates the specified <see cref="T:System.Drawing.Rectangle"/> by the current <see cref="T:C1.Framework.Thickness"/>.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to deflate.</param>
            <returns>The inflated <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.InflateRtl(System.Drawing.Rectangle)">
            <summary>
            Inflates the specified <see cref="T:System.Drawing.Rectangle"/> by the current <see cref="T:C1.Framework.Thickness"/> with RightToLeft layout.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to deflate.</param>
            <returns>The inflated <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.Deflate(System.Drawing.Rectangle)">
            <summary>
            Deflates the specified <see cref="T:System.Drawing.Rectangle"/> by the current <see cref="T:C1.Framework.Thickness"/>.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to deflate.</param>
            <returns>The deflated <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.DeflateRtl(System.Drawing.Rectangle)">
            <summary>
            Deflates the specified <see cref="T:System.Drawing.Rectangle"/> by the current <see cref="T:C1.Framework.Thickness"/> with RightToLeft layout.
            </summary>
            <param name="r">A <see cref="T:System.Drawing.Rectangle"/> to deflate.</param>
            <returns>The deflated <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.SwapLeftRight">
            <summary>
            Swaps the values of the Left and Right properties.
            </summary>
        </member>
        <member name="M:C1.Framework.Thickness.op_Implicit(System.Int32)~C1.Framework.Thickness">
            <summary>
            Converts an <see cref="T:System.Int32"/> into a <see cref="T:C1.Framework.Thickness"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Thickness.op_Implicit(C1.Framework.Thickness)~System.Windows.Forms.Padding">
            <summary>
            Converts an <see cref="T:C1.Framework.Thickness"/> into a <see cref="T:System.Windows.Forms.Padding"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Thickness.op_Implicit(System.Windows.Forms.Padding)~C1.Framework.Thickness">
            <summary>
            Converts an <see cref="T:C1.Framework.Thickness"/> into a <see cref="T:System.Windows.Forms.Padding"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Thickness.GetHashCode">
            <summary>
            Generates a hash code for the current <see cref="T:C1.Framework.Thickness"/>. 
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:C1.Framework.Thickness.Equals(System.Object)">
            <summary>
            Determines whether the value of the specified object is equivalent 
            to the current <see cref="T:C1.Framework.Thickness"/>. 
            </summary>
            <param name="obj">The object to compare to the current <see cref="T:C1.Framework.Thickness"/>.</param>
            <returns>true if the two <see cref="T:C1.Framework.Thickness"/> objects are equal; 
            otherwise, false. </returns>
        </member>
        <member name="M:C1.Framework.Thickness.op_Equality(C1.Framework.Thickness,C1.Framework.Thickness)">
            <summary>
            Tests whether two specified <see cref="T:C1.Framework.Thickness"/> objects are equivalent. 
            </summary>
            <param name="t1">A <see cref="T:C1.Framework.Thickness"/> to test.</param>
            <param name="t2">A <see cref="T:C1.Framework.Thickness"/> to test.</param>
            <returns>true if the two <see cref="T:C1.Framework.Thickness"/> objects are equal; 
            otherwise, false. </returns>
        </member>
        <member name="M:C1.Framework.Thickness.op_Inequality(C1.Framework.Thickness,C1.Framework.Thickness)">
            <summary>
            Tests whether two specified <see cref="T:C1.Framework.Thickness"/> objects are not equivalent. 
            </summary>
            <param name="t1">A <see cref="T:C1.Framework.Thickness"/> to test.</param>
            <param name="t2">A <see cref="T:C1.Framework.Thickness"/> to test.</param>
            <returns>True if the two <see cref="T:C1.Framework.Thickness"/> objects are different; 
            otherwise, false. </returns>
        </member>
        <member name="M:C1.Framework.Thickness.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:C1.Framework.Thickness"/>.
            </summary>
            <returns>A String that represents the current <see cref="T:C1.Framework.Thickness"/>.</returns>
        </member>
        <member name="T:C1.Framework.ThicknessConverter">
            <summary>
            Provides a type converter to convert <see cref="T:C1.Framework.Thickness"/> values 
            to and from various other representations. 
            </summary>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.ThicknessConverter"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type from which to convert.</param>
            <returns>True if the conversion can be performed; false otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type to convert to.</param>
            <returns>True if the conversion can be performed; false otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> into which <paramref name="value"/> will be converted.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates a <see cref="T:C1.Framework.Thickness"/> object given a set of property values for the object. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="propertyValues">A contains a series of name-value pairs with the new property values.</param>
            <returns>The newly created object, or null if the object could not be created.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object requires a call to 
            the <see cref="M:C1.Framework.ThicknessConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)"/> method to create a new value.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>True if the <see cref="M:C1.Framework.ThicknessConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)"/> method should be called when a change is made to one or more properties of this object.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type.</returns>
        </member>
        <member name="M:C1.Framework.ThicknessConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="T:C1.Framework.TextElement">
            <summary>
            <para>Element that displays a string.</para>
            
            <para>Alignment and formatting are controlled by the element's <see cref="T:C1.Framework.Style"/>.</para>
            </summary>
        </member>
        <member name="M:C1.Framework.TextElement.#ctor(C1.Framework.Style,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.TextElement"/> with a given style and contents.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> used to measure and render the <see cref="T:C1.Framework.TextElement"/>,</param>
            <param name="text">String displayed in the <see cref="T:C1.Framework.TextElement"/>,</param>
        </member>
        <member name="M:C1.Framework.TextElement.#ctor(C1.Framework.Style)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.TextElement"/> with a given style.
            </summary>
            <param name="style"><see cref="T:C1.Framework.Style"/> used to measure and render the <see cref="T:C1.Framework.TextElement"/>,</param>
        </member>
        <member name="M:C1.Framework.TextElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Framework.TextElement"/> with a given text.
            </summary>
            <param name="text">String displayed in the <see cref="T:C1.Framework.TextElement"/>,</param>
        </member>
        <member name="M:C1.Framework.TextElement.#ctor">
            <summary>
            Initializes a new instance of an empty <see cref="T:C1.Framework.TextElement"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.TextElement.Text">
            <summary>
            Gets or sets the string displayed by this <see cref="T:C1.Framework.TextElement"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.TextElement.GetValue">
            <summary>
            Gets the string represented by this <see cref="T:C1.Framework.TextElement"/>.
            </summary>
            <returns>The string represented by this <see cref="T:C1.Framework.TextElement"/>.</returns>
        </member>
        <member name="P:C1.Framework.TextElement.ForceLineBreak">
            <summary>
            Gets a <see cref="T:C1.Framework.Element.LineBreak"/> value that determines whether there should be
            line breaks before and/or after this <see cref="T:C1.Framework.TextElement"/> when it occurs in a paragraph.
            </summary>
        </member>
        <member name="T:C1.Framework.ResourceLoader">
            <summary>
            Class with static methods used for enumerating and retrieving application
            resources.
            </summary>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetImages">
            <summary>
            Returns all images from the entry assembly. 
            </summary>
            <returns>A collection of name/image pairs.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetImages(System.Reflection.Assembly)">
            <summary>
            Returns all images from the specified assembly. 
            </summary>
            <param name="a">An <see cref="T:System.Reflection.Assembly"/> to load images from.</param>
            <returns>A collection of name/image pairs.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetImage(System.String)">
            <summary>
            Loads an image from the entry assembly. 
            </summary>
            <param name="name">The case-insensitive name of the requested image.</param>
            <returns>The <see cref="T:System.Drawing.Image"/> if it is found; null otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetImage(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an image from the specified assembly. 
            </summary>
            <param name="a">An <see cref="T:System.Reflection.Assembly"/> to load image from.</param>
            <param name="name">The case-insensitive name of the requested image.</param>
            <returns>The <see cref="T:System.Drawing.Image"/> if it is found; null otherwise.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetStream(System.String)">
            <summary>
            Loads the specified manifest resource from the entry assembly. 
            </summary>
            <param name="name">The case-insensitive name of the manifest resource being requested.</param>
            <returns>A <see cref="T:System.IO.Stream"/> representing this manifest resource.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.GetStream(System.Reflection.Assembly,System.String)">
            <summary>
            Loads the specified manifest resource from the specified assembly. 
            </summary>
            <param name="a">An <see cref="T:System.Reflection.Assembly"/> to load resource from.</param>
            <param name="name">The case-insensitive name of the manifest resource being requested.</param>
            <returns>A <see cref="T:System.IO.Stream"/> representing this manifest resource.</returns>
        </member>
        <member name="M:C1.Framework.ResourceLoader.DecodeImage(System.String)">
            <summary>
            Decodes an image from a base-64-encoded string.
            </summary>
            <param name="data">String that contains the encoded image data.</param>
            <returns>The <see cref="T:System.Drawing.Image"/> encoded in the string.</returns>
        </member>
        <member name="T:C1.Framework.ValueElement">
            <summary>
            <para>Element that displays a simple value (numbers, dates, etc).</para>
            
            <para>The element's <see cref="T:C1.Framework.Style"/> is responsible for formatting the value 
            (with <see cref="T:System.IFormattable"/>).</para>
            </summary>
        </member>
        <member name="M:C1.Framework.ValueElement.#ctor(C1.Framework.Style,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ValueElement"/> class with the specified value and style settings.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="value">The value to display.</param>
        </member>
        <member name="M:C1.Framework.ValueElement.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ValueElement"/> class with the specified value.
            </summary>
            <param name="value">The value to display.</param>
        </member>
        <member name="M:C1.Framework.ValueElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.ValueElement"/> class.
            </summary>
        </member>
        <member name="P:C1.Framework.ValueElement.Value">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="T:C1.Framework.ScaleMode">
            <summary>
            Specifies how to scale (or flow) the element to fit the pages.
            </summary>
        </member>
        <member name="F:C1.Framework.ScaleMode.ActualSize">
            <summary>
            Render element as it appears on the screen.
            </summary>
        </member>
        <member name="F:C1.Framework.ScaleMode.ScaleToPageWidth">
            <summary>
            Scale element so its width fits on a page.
            </summary>
        </member>
        <member name="F:C1.Framework.ScaleMode.ScaleToPageSize">
            <summary>
            Scale element to fit on a single page.
            </summary>
        </member>
        <member name="F:C1.Framework.ScaleMode.FlowToPageWidth">
            <summary>
            Flow element to fit the available page width.
            </summary>
        </member>
        <member name="T:C1.Framework.ElementPrintDocument">
            <summary>
            Class that extends <see cref="T:System.Drawing.Printing.PrintDocument"/> to print <see cref="T:C1.Framework.Element"/> objects.
            </summary>
        </member>
        <member name="T:C1.Framework.IView">
            <summary>
            Represents the methods and properties of host control for C1Framwork elements.
            </summary>
        </member>
        <member name="P:C1.Framework.IView.DeviceDpi">
            <summary>
            Gets the DPI value for the display device where the control is currently being displayed.
            </summary>
        </member>
        <member name="P:C1.Framework.IView.HandleElementFocus">
            <summary>
            Gets or sets whether the control should handle the focus within contained elements.
            </summary>
        </member>
        <member name="P:C1.Framework.IView.FocusedElement">
            <summary>
            Gets the element that has the focus.
            </summary>
        </member>
        <member name="P:C1.Framework.IView.Focused">
            <summary>
            Gets a value indicating whether the control has input focus.
            </summary>
        </member>
        <member name="M:C1.Framework.IView.Focus(C1.Framework.Element)">
            <summary>
            Set the focus to a given element.
            </summary>
            <param name="e">Element to receive the focus.</param>
            <returns>True if the focus was set to the given element.</returns>
        </member>
        <member name="P:C1.Framework.IView.Element">
            <summary>
            Gets or sets the element hosted by this <see cref="T:C1.Framework.IView"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.IView.GetBounds(C1.Framework.Element)">
            <summary>
            Gets the rectangle that contains a given element.
            </summary>
            <param name="e"><see cref="P:C1.Framework.IView.Element"/> to locate.</param>
            <returns>Bounds of element <paramref name="e"/>, in client coordinates.</returns>
        </member>
        <member name="M:C1.Framework.IView.GetBounds(C1.Framework.Element,System.Boolean,System.Boolean)">
            <summary>
            Gets the rectangle that contains a given element.
            </summary>
            <param name="e"><see cref="P:C1.Framework.IView.Element"/> to locate.</param>
            <param name="contentArea">Whether to get the bounds of the whole element or just the content area.</param>
            <param name="clip">Whether to clip the rectangle based on ancestor elements.</param>
            <returns>Bounds of element <paramref name="e"/>, in client coordinates.</returns>
            <remarks>This method is similar to the <see cref="M:C1.Framework.Element.GetBounds(C1.Framework.Element)"/> method in the
            <see cref="P:C1.Framework.IView.Element"/> class, except this one takes the current <see cref="P:C1.Framework.ScrollableControl.ScrollPosition"/>
            into account.
            </remarks>
        </member>
        <member name="M:C1.Framework.IView.CheckHover">
            <summary>
             Checks the element under the mouse and updates the control state.
            </summary>
        </member>
        <member name="M:C1.Framework.IView.ResetDisabledElement">
            <summary>
            Resets the hovered and entered state when this element are disabled.
            </summary>
        </member>
        <member name="M:C1.Framework.IView.IsInputKey(System.Windows.Forms.Control,System.Windows.Forms.Keys)">
            <summary>
            Internal version of IsInputKey that should be called by hosted controls in order to
            allow the view to handle tab keys, arrows, etc.
            </summary>
            <param name="ctl">Control that received the key.</param>
            <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys"/> values.</param>
            <returns>True if the specified key is a regular input key; otherwise, false.</returns>
        </member>
        <member name="M:C1.Framework.IView.HitTest">
            <summary>
            Gets the hit-testable element under the mouse.
            </summary>
            <returns>Element under the mouse.</returns>
        </member>
        <member name="M:C1.Framework.IView.Invalidate(C1.Framework.Element)">
            <summary>
            Invalidates the contained element.
            </summary>
        </member>
        <member name="M:C1.Framework.IView.Update">
            <summary>
            Causes the control to redraw the invalidated regions within its client area.
            </summary>
        </member>
        <member name="M:C1.Framework.IView.LogicalToDeviceUnits(System.Int32)">
            <summary>
            Converts a Logical DPI value to its equivalent DeviceUnit DPI value.
            </summary>
            <param name="value">The Logical value to convert.</param>
            <returns>The resulting DeviceUnit value.</returns>
        </member>
        <member name="M:C1.Framework.IView.GetUiaItem(System.Boolean,C1.Win.Accessibility.UiaItem)">
            <summary>
            Gets UI Automation object of this control.
            </summary>
            <param name="create">Indicates that this UiaItem must be created if needed.</param>
            <param name="uiaParent">The parent of this UiaItem.</param>        
        </member>
        <member name="M:C1.Framework.IView.RefreshInnerUiaItems(System.Object)">
            <summary>
            Refreshes inner items in cached UIA container.
            </summary>
            <param name="cachedObject">Source item in the cache.</param>
            <remarks>
            if the cachedObject is null this method will use root UIA item.
            </remarks>
        </member>
        <member name="T:C1.Framework.ScrollableControl">
            <summary>
            Defines an abstract base class for controls that support auto-scrolling behavior. 
            </summary>
        </member>
        <member name="M:C1.Framework.ScrollableControl.#ctor">
            <summary>
            Initializes the <see cref="T:C1.Framework.ScrollableControl"/> properties.
            </summary>
        </member>
        <member name="E:C1.Framework.ScrollableControl.ScrollBarsChanged">
            <summary>
            Occurs when the ScrollBars property changed.
            </summary>
        </member>
        <member name="E:C1.Framework.ScrollableControl.ScrollSizeChanged">
            <summary>
            Occurs when the ScrollSize property changed.
            </summary>
        </member>
        <member name="E:C1.Framework.ScrollableControl.Scroll">
            <summary>
            Occurs when the user or code scrolls through the client area.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.ThemeScrollBars">
            <summary>
            Gets or sets the theme scroll bars.
            </summary>
            <value>
            The theme scroll bars.
            </value>
        </member>
        <member name="P:C1.Framework.ScrollableControl.Text">
            <summary>
            Gets or sets the text associated with the control.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.ScrollBars">
            <summary>
            Gets or sets which scroll bars should appear on the control.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.ScrollPosition">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Point"/> value determining the current scroll position.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.ScrollSize">
            <summary>
            Gets or sets the size of the document.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.ScrollTrack">
            <summary>
            Gets or sets whether the control should scroll as the user drags the scrollbar thumb.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.BorderStyle">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.ScrollableControl.BorderStyle"/> value determining 
            the type of border around the control.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.Cursor">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.ScrollableControl.Cursor"/> that appears when 
            the mouse moves over the control.
            </summary>
        </member>
        <member name="M:C1.Framework.ScrollableControl.OnScroll(System.Windows.Forms.ScrollBars)">
            <summary>
            Override this method to get notifications when the control scrolls.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.OnScrollSizeChanged">
            <summary>
            Raises the <see cref="E:C1.Framework.ScrollableControl.ScrollSizeChanged"/> event.
            </summary>
        </member>
        <member name="M:C1.Framework.ScrollableControl.OnScrollBarsChanged">
            <summary>
            Raises the <see cref="E:C1.Framework.ScrollableControl.ScrollBarsChanged"/> event.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.ScrollableRectangle">
            <summary>
            This property is used to set the scroll page size.
            Override it to customize the scrolling behavior.
            </summary>
        </member>
        <member name="M:C1.Framework.ScrollableControl.BuildScrollableRectangle(System.Int32,System.Int32)">
            <summary>
            This method is used to set the scroll rectangle.
            Override it to customize the scrolling behavior.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.ScrollableControl.HandleScrollMessage(System.Windows.Forms.Message)">
            <summary>
            Handles scroll messages.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.ScrollVertical(System.Boolean,System.Boolean)">
            <summary>
            Scrolls vertically for changes.
            </summary>
            <param name="IsUp">true if should be scrolled up; otherwise, false.</param>
            <param name="isSmallStep">true if should be scrolled small step; otherwise, false.</param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.PercentScrollVertical(System.Double)">
            <summary>
            Scrolls vertically for percent.
            </summary>
            <param name="percent">Percent value to be scrolled</param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.SetClientSizeCore(System.Int32,System.Int32)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)"/>.
            Override this method to account for scrollbars size.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.OnSizeChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Framework.ScrollableControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:C1.Framework.ScrollableControl.CreateParams">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.CreateParams"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.ScrollableControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>.
            </summary>
            <param name="m"></param>
        </member>
        <member name="P:C1.Framework.ScrollableControl.IsRtlScroll">
            <summary>
            Gets or sets a value indicating whether th Control supported rtl scroll or not.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.IsRtlScrollingSupported">
            <summary>
            Gets a value determining behavior of scroll in rtl mode.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.VerticalScrollBarIsVisible">
            <summary>
            Gets the state of vertical scrollbar.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.SettingScrollSize">
            <summary>
            Gets the state of scrolling.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.BorderColor">
            <summary>
            Gets or sets the color of the control border.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.SmallChange">
            <summary>
            Gets or sets the distance to move a scroll bar in response to 
            a small scroll command.
            </summary>
        </member>
        <member name="P:C1.Framework.ScrollableControl.UseScrollWindow">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value determining whether control shows scroll bars.
            </summary>
        </member>
        <member name="M:C1.Framework.ScrollableControl.GetScrollSize(System.Int32)">
            <summary>
            Retrieves the specified scroll bar range.
            </summary>
            <param name="nBar"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.ScrollableControl.GetScrollPos(System.Int32)">
            <summary>
            Gets the scroll position of the specified scroll bar.
            </summary>
            <param name="nBar">The int value of scroll bar</param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.ScrollableControl.GetTrackPos(System.Int32)">
            <summary>
            Gets the immediate position of the specified scroll box that the user is dragging.
            </summary>
            <param name="nBar"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.ScrollableControl.SetScrollPos(System.Int32,System.Int32)">
            <summary>
            Sets the position of the specified scroll bar.
            </summary>
            <param name="nBar"></param>
            <param name="pos">Specifies the new position of the scroll box. 
            The position must be within the scrolling range. </param>
            <returns>The previous position of the scroll box indicates success. 
            Zero indicates failure</returns>
        </member>
        <member name="M:C1.Framework.ScrollableControl.UpdateScrollPosition(System.Int32,System.Int32)">
            <summary>
            Changes horizontal scroll position if needed. Uses for support RTL.
            </summary>
        </member>
        <member name="M:C1.Framework.ScrollableControl.GetScrollPercent(System.IntPtr,System.Int32)">
            <summary>
            Gets percent of scrolled.
            </summary>
            <param name="handle">A <see cref="T:System.IntPtr"/> indicates the handle of ScrollableControl</param>
            <param name="nBar">The int value of scroll bar</param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.ScrollableControl.GetScrollOnePercent(System.IntPtr,System.Int32)">
            <summary>
            Gets size of one percent of scroll.
            </summary>
            <param name="handle">A <see cref="T:System.IntPtr"/> indicates the handle of ScrollableControl</param>
            <param name="nBar">The int value of scroll bar</param>
            <returns></returns>
        </member>
        <member name="T:C1.Framework.AutoSizeElement">
            <summary>
            Specifies how the XView control should size the element it contains.
            </summary>
        </member>
        <member name="F:C1.Framework.AutoSizeElement.None">
            <summary>
            No autosizing.
            </summary>
        </member>
        <member name="F:C1.Framework.AutoSizeElement.Width">
            <summary>
            Auto size element by client area width.
            </summary>
        </member>
        <member name="F:C1.Framework.AutoSizeElement.Height">
            <summary>
            Auto size element by client area height.
            </summary>
        </member>
        <member name="F:C1.Framework.AutoSizeElement.Both">
            <summary>
            Auto size element by client area size.
            </summary>
        </member>
        <member name="T:C1.Framework.XView">
            <summary>
            <para>Control that hosts X elements.</para>
            
            <para>The control has an <see cref="P:C1.Framework.XView.Element"/> property that gets or
            sets the element to be displayed.</para>
            
            <para>The control is responsible for displaying the element, providing
            scrolling, and routing mouse and keyboard events to the hosted element.</para>
            </summary>
        </member>
        <member name="M:C1.Framework.XView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.XView"/> control.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.Element">
            <summary>
            Element hosted by this <see cref="T:C1.Framework.XView"/>.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.AutoSizeElement">
            <summary>
            Gets or sets how the <see cref="T:C1.Framework.XView"/> should resize the hosted element to match its size.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.ShowFocusRectangle">
            <summary>
            Gets or sets whether the <see cref="T:C1.Framework.XView"/> should show draw a focus rectangle around 
            the element with focus.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.SmoothingMode">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.XView.SmoothingMode"/> value that controls anti-aliasing.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.TextRenderingHint">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.XView.TextRenderingHint"/> that controls text rendering quality.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.CreateGraphics">
            <summary>
            Creates a <see cref="T:System.Drawing.Graphics"/> object for the control.
            </summary>
            <returns>A <see cref="T:System.Drawing.Graphics"/> object for the control.</returns>
            <remarks>
            The <see cref="T:System.Drawing.Graphics"/> object returned by this method reflects the current
            settings for the <see cref="P:C1.Framework.XView.SmoothingMode"/> and <see cref="P:C1.Framework.XView.TextRenderingHint"/>
            properties.
            </remarks>
        </member>
        <member name="M:C1.Framework.XView.Invalidate(C1.Framework.Element)">
            <summary>
            Invalidates the contained element.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.BeginUpdate">
            <summary>
            Suspends painting during long update operations.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.EndUpdate">
            <summary>
            Restores painting after long update operations.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.GetBounds(C1.Framework.Element)">
            <summary>
            Gets the rectangle that contains a given element.
            </summary>
            <param name="e"><see cref="P:C1.Framework.XView.Element"/> to locate.</param>
            <returns>Bounds of element <paramref name="e"/>, in client coordinates.</returns>
        </member>
        <member name="M:C1.Framework.XView.GetBounds(C1.Framework.Element,System.Boolean,System.Boolean)">
            <summary>
            Gets the rectangle that contains a given element.
            </summary>
            <param name="e"><see cref="P:C1.Framework.XView.Element"/> to locate.</param>
            <param name="contentArea">Whether to get the bounds of the whole element or just the content area.</param>
            <param name="clip">Whether to clip the rectangle based on ancestor elements.</param>
            <returns>Bounds of element <paramref name="e"/>, in client coordinates.</returns>
            <remarks>This method is similar to the <see cref="M:C1.Framework.Element.GetBounds(C1.Framework.Element)"/> method in the
            <see cref="P:C1.Framework.XView.Element"/> class, except this one takes the current <see cref="P:C1.Framework.ScrollableControl.ScrollPosition"/>
            into account.
            </remarks>
        </member>
        <member name="M:C1.Framework.XView.GetIsScrollable(C1.Framework.Element)">
            <summary>
            Checks whether a given element is in the main element's scrolling area.
            </summary>
            <param name="e"><see cref="P:C1.Framework.XView.Element"/> to check.</param>
            <returns>True if the whole element is within the main element's scrolling area.</returns>
            <remarks>
            The main element's scrolling area is the area below and to the right of the point
            returned by the <see cref="M:C1.Framework.Element.GetScrollOrigin"/> method.</remarks>
        </member>
        <member name="M:C1.Framework.XView.Focus(C1.Framework.Element)">
            <summary>
            Set the focus to a given element.
            </summary>
            <param name="e">Element to receive the focus.</param>
            <returns>True if the focus was set to the given element.</returns>
        </member>
        <member name="P:C1.Framework.XView.FocusedElement">
            <summary>
            Gets the element that has the focus.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.HitTest">
            <summary>
            Gets the hit-testable element under the mouse.
            </summary>
            <returns>Element under the mouse.</returns>
        </member>
        <member name="M:C1.Framework.XView.HitTest(System.Drawing.Point)">
            <summary>
            Gets the hit-testable element at a given position.
            </summary>
            <param name="pt">Position to test.</param>
            <returns>Element at the given position.</returns>
        </member>
        <member name="M:C1.Framework.XView.ScrollIntoView(C1.Framework.Element)">
            <summary>
            Scrolls a given element into view.
            </summary>
            <param name="e">Element to scroll into view.</param>
        </member>
        <member name="M:C1.Framework.XView.ScrollIntoView(System.Drawing.Point)">
            <summary>
            Scrolls a given point into view.
            </summary>
            <param name="pt">Point to scroll into view.</param>
        </member>
        <member name="M:C1.Framework.XView.ScrollIntoView(System.Drawing.Rectangle)">
            <summary>
            Scrolls a given rectangle into view.
            </summary>
            <param name="r">Rectangle to scroll into view.</param>
        </member>
        <member name="P:C1.Framework.XView.C1#Framework#IView#DeviceDpi">
            <summary>
            Gets the DPI value for the display device where the control is currently being displayed.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.GetDeviceDpi">
            <summary>
            Gets the DPI value for the display device where the control is currently being displayed.
            </summary>
            <remarks>
            Returns system DPI for .Net 4.5.2 and Control.DeviceDpi for .Net 5 or highest.
            </remarks>
        </member>
        <member name="M:C1.Framework.XView.LogicalToDeviceUnits(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Transforms a <see cref="T:C1.Framework.Thickness"/> from logical to device units by scaling it for the current DPI and rounding down to the nearest integer value for left, right, top and bottom.
            </summary>
            <param name="left">The left to be scaled.</param>
            <param name="top">The top to be scaled.</param>
            <param name="right">The right to be scaled.</param>
            <param name="bottom">The bottom to be scaled.</param>
            <returns>The scaled <see cref="T:C1.Framework.Thickness"/>.</returns>
        </member>
        <member name="M:C1.Framework.XView.LogicalToDeviceThickness(C1.Framework.Thickness)">
            <summary>
            Transforms a <see cref="T:C1.Framework.Thickness"/> from logical to device units by scaling it for the current DPI and rounding down to the nearest integer value for left, right, top and bottom.
            </summary>
            <param name="value">The <see cref="T:C1.Framework.Thickness"/> to be scaled.</param>
            <returns>The scaled <see cref="T:C1.Framework.Thickness"/>.</returns>
        </member>
        <member name="P:C1.Framework.XView.SuperTooltip">
            <summary>
            Gets or sets the external instance of C1SuperTooltip class used to display tooltips for inner elements.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.ResubscribeTooltip(C1.Win.SuperTooltip.C1SuperTooltipBase,C1.Win.SuperTooltip.C1SuperTooltipBase)">
            <summary>
            Occurs when an external C1SuperTooltip is attached or detached.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.InnerTooltip">
            <summary>
            Gets the internal instance of the <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> component.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.EffectiveTooltip">
            <summary>
            Gets the <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> component used to display tooltips for hovered elements.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.ShowToolTips">
            <summary>
            Gets or sets whether the <see cref="T:C1.Framework.XView"/> should display tooltips for elements that 
            implement the <see cref="T:C1.Framework.IToolTipElement"/> interface.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.SetToolTip(System.Windows.Forms.Control,System.String)">
            <summary>
            Associates a rich tooltip with a control.
            </summary>
            <param name="control"><b>Control</b> that will be associated with the rich tooltip.</param>
            <param name="text">String containing Html text to be displayed in the tooltip.</param>
            <remarks>
            Use the <see cref="T:C1.Framework.XView"/> built-in tooltip instead of the regular <see cref="T:System.Windows.Forms.ToolTip"/>
            component in order to provide a consistent look between the tooltips associated with XView
            elements and other controls on your form.
            </remarks>
        </member>
        <member name="M:C1.Framework.XView.GetToolTip(System.Windows.Forms.Control)">
            <summary>
            Retrieves the rich tooltip text associated with the specified control.
            </summary>
            <param name="control">The <b>Control</b> for which to retrieve the tooltip text.</param>
            <returns>The tooltip text for the specified control.</returns>
        </member>
        <member name="M:C1.Framework.XView.UpdateToolTip">
            <summary>
            Updates the tooltip for the hovered element.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.HideToolTip">
            <summary>
            Hides tooltip if it is currently visible.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.Components">
            <summary>
            Gets a collection of public components contained in this control.
            This is used by the XViewDesigner designer.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.CustomGetScrollPercent(System.IntPtr,System.Int32)">
            <summary>
            Gets percent of scrolled.
            </summary>
            <param name="handle">A <see cref="T:System.IntPtr"/> indicates the handle of ScrollableControl</param>
            <param name="nBar">The int value of scroll bar</param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.XView.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the control. 
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:C1.Framework.XView.HandleElementFocus">
            <summary>
            Gets or sets whether the control should handle the focus within contained elements.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is a regular input key or 
            a special key that requires preprocessing.
            </summary>
            <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys"/> values.</param>
            <returns>True if the specified key is a regular input key; otherwise, false.</returns>
        </member>
        <member name="M:C1.Framework.XView.GetNextElement(C1.Framework.Element,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the next <see cref="P:C1.Framework.XView.Element"/> given a start <see cref="P:C1.Framework.XView.Element"/>.
            </summary>
            <param name="e"><see cref="P:C1.Framework.XView.Element"/> where to start.</param>
            <param name="forward"><b>true</b> to move forward in the tab order; <b>false</b> to move backward in the tab order.</param>
            <param name="tabStopOnly"><b>true</b> to ignore elements with the TabStop property set to <b>false</b>; otherwise, <b>false</b>.</param>
            <param name="nested"><b>true</b> to include nested (children of child elements) child elements; otherwise, <b>false.</b></param>
            <param name="wrap"><b>true</b> to continue searching from the first element in the tab order after the last element has been reached; otherwise, <b>false</b>.</param>
            <returns>The next (or previous) <see cref="P:C1.Framework.XView.Element"/> in the tab order, or null if no element was found.</returns>
        </member>
        <member name="M:C1.Framework.XView.IsInputKey(System.Windows.Forms.Control,System.Windows.Forms.Keys)">
            <summary>
            Internal version of IsInputKey that should be called by hosted controls in order to
            allow the view to handle tab keys, arrows, etc.
            </summary>
            <param name="ctl">Control that received the key.</param>
            <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys"/> values.</param>
            <returns>True if the specified key is a regular input key; otherwise, false.</returns>
        </member>
        <member name="M:C1.Framework.XView.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.GotFocus"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Leave"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Validating"/> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnValidated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Validated"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.KeyEventArgs"/> 
            that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyUp"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.KeyEventArgs"/> 
            that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyPress"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.KeyPressEventArgs"/> 
            that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel"/> event. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Framework.XView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> 
            that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Click"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnDoubleClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.DoubleClick"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseUp"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseEnter"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.IsMouseInsideXView">
            <summary>
            Returns True if the mouse pointer is inside the XView control.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.CapturedElement">
            <summary>
            Gets or sets the element that receives all mouse events.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.HoveredElement">
            <summary>
            Gets the element currently under the mouse.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.HostedElement">
            <summary>
            Gets the element that hosted the <see cref="P:C1.Framework.XView.Element"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.ResetDisabledElement">
            <summary>
            Resets the hovered and entered state when this element are disabled.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.UpdateElementBounds">
            <summary>
            Update contained element size when the control is resized.
            </summary>
        </member>
        <member name="M:C1.Framework.XView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.RenderArea(System.Drawing.Rectangle,System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point,System.Drawing.Region)">
            <summary>
            Renders scrollable and non-scrollable area.
            </summary>
            <param name="r">Element bound.</param>
            <param name="g">Reference to the GDI+ drawing surface.</param>
            <param name="clip">render area.</param>
            <param name="scrollPosition">Scrolling offset.</param>
            <param name="originPoint">Scroll origin (used to implement scrolling with fixed row/column headers).</param>
            <param name="originClip">Region to restore origin clipping.</param>
        </member>
        <member name="M:C1.Framework.XView.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
            <summary>
            Remove hosted controls that belong to elements which became invisible or
            belong to a different control now.
            </summary>
            <remarks>
            <para>The host element is responsible for restoring the control's Parent property
            when it updates its position.</para>
            <para>Note: <see cref="T:C1.Framework.XView"/> determines that a <see cref="T:System.Windows.Forms.Control"/>belongs to an 
            <see cref="P:C1.Framework.XView.Element"/> if the control's <see cref="P:System.Windows.Forms.Control.Tag"/> property contains 
            a reference to a <see cref="T:System.Windows.Forms.Control"/> object.</para>
            </remarks>
            <param name="e"><see cref="T:System.Windows.Forms.InvalidateEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.OnHandleDestroyed(System.EventArgs)">
            <summary>
            Remove hosted controls before disposing of the parent control.
            </summary>
            <remarks>
            <para>This allows the host element to remain valid even if their parent view is disposed.
            To dispose of the hosted control, call Dispose on the hosted control directly.</para>
            <para>Note: <see cref="T:C1.Framework.XView"/> determines that a <see cref="T:System.Windows.Forms.Control"/>belongs to an 
            <see cref="P:C1.Framework.XView.Element"/> if the control's <see cref="P:System.Windows.Forms.Control.Tag"/> property contains 
            a reference to a <see cref="T:System.Windows.Forms.Control"/> object.</para>
            </remarks>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XView.BuildScrollableRectangle(System.Int32,System.Int32)">
            <summary>
             Sets the scroll rectangle.
            </summary>
            <param name="dx">Amount to scroll in the x direction, in pixels.</param>
            <param name="dy">Amount to scroll in the y direction, in pixels.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Framework.XView.RescaleConstantsForDpi(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.XView.WndProc(System.Windows.Forms.Message@)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.XView.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <inheritdoc/>
        </member>
        <member name="E:C1.Framework.XView.BoundsChanged">
            <summary>
            Occurs when control bounds changed.
            </summary>
        </member>
        <member name="P:C1.Framework.XView.C1#Win#Accessibility#ISupportUia#IsOffscreen">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.XView.C1#Win#Accessibility#ISupportUia#Parent">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.XView.C1#Win#Accessibility#ISupportUia#UiaName">
            <inheritdoc/>
        </member>
        <member name="E:C1.Framework.XView.C1#Win#Accessibility#ISupportUia#BoundsChanged">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.XView.C1#Win#Accessibility#ISupportUia#SetFocus">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.XView.GetUiaItem(System.Boolean,C1.Win.Accessibility.UiaItem)">
            <summary>
            Gets UI Automation object of this control.
            </summary>
            <param name="create">Indicates that this UiaItem must be created if needed.</param>
            <param name="uiaParent">The parent of this UiaItem.</param>
        </member>
        <member name="M:C1.Framework.XView.CreateUiaItem(C1.Win.Accessibility.UiaItem)">
            <summary>
            Creates UI Automation object of this control.
            </summary>
            <param name="uiaParent">The parent of this UiaItem.</param>
        </member>
        <member name="M:C1.Framework.XView.RefreshInnerUiaItems(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.HostedElement">
            <summary>
            Element that serves as an interface between the host IXView control and the content elements.
            </summary>
        </member>
        <member name="M:C1.Framework.HostedElement.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.HostedElement"/> control.
            </summary>
        </member>
        <member name="P:C1.Framework.HostedElement.Element">
            <summary>
            Element hosted by this <see cref="T:C1.Framework.HostedElement"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.HostedElement.RescaleForDpi(System.Int32,System.Int32)">
            <summary>
            Calls methods to rescale of the element tree when a DPI change occurs.
            </summary>
            <param name="deviceDpiOld">The DPI value prior to the change.</param>
            <param name="deviceDpiNew">The DPI value after the change.</param>
        </member>
        <member name="T:C1.Framework.XViewHost">
            <summary>
            Control that hosts <see cref="T:C1.Framework.XView"/> control.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewHost.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Indicates whether the method call comes from a Dispose method or from a finalizer.</param>
        </member>
        <member name="P:C1.Framework.XViewHost.XView">
            <summary>
            Gets the <see cref="P:C1.Framework.XViewHost.XView"/> that this control is hosting.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewHost.InitializeComponent(C1.Framework.XView)">
            <summary>
            Initializes the <see cref="P:C1.Framework.XViewHost.XView"/> hosted in this control.
            </summary>
            <param name="xview">Uses to override the default <see cref="P:C1.Framework.XViewHost.XView"/>.</param>
        </member>
        <member name="M:C1.Framework.XViewHost.IsInputKeyHost(System.Windows.Forms.Keys)">
            Uses to override IsInputKey(Control, Keys) when this control uses as children of other control.
        </member>
        <member name="M:C1.Framework.XViewHost.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
             Determines whether the specified key is a regular input key or a special key that requires preprocessing.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewHost.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.GotFocus event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="T:C1.Framework.XViewLight">
            <summary>
            Control that hosts X elements.
            </summary>    
        </member>
        <member name="M:C1.Framework.XViewLight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.XViewLight"/> control.
            </summary>
        </member>
        <member name="P:C1.Framework.XViewLight.Element">
            <summary>
            Element hosted by this <see cref="T:C1.Framework.XViewLight"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.Invalidate(C1.Framework.Element)">
            <summary>
            Invalidates the contained element.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.BeginUpdate">
            <summary>
            Suspends painting during long update operations.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.EndUpdate">
            <summary>
            Restores painting after long update operations.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.UpdateHostedControls">
            <summary>
            Update bounds of hosted controls.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.CleanHostedControls">
            <summary>
            Remove all controls that belong to elements which have either become invisible or now belong to a different owner from the Controls collection.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:C1.Framework.XViewLight"/> control.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; 
            false to release only unmanaged resources.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
            <summary>
            Remove hosted controls that belong to elements which became invisible or
            belong to a different control now.
            </summary>
            <remarks>
            <para>The host element is responsible for restoring the control's Parent property
            when it updates its position.</para>
            <para>Note: <see cref="T:C1.Framework.XViewLight"/> determines that a <see cref="T:System.Windows.Forms.Control"/>belongs to an 
            <see cref="P:C1.Framework.XViewLight.Element"/> if the control's <see cref="P:System.Windows.Forms.Control.Tag"/> property contains 
            a reference to a <see cref="T:System.Windows.Forms.Control"/> object.</para>
            </remarks>
            <param name="e"><see cref="T:System.Windows.Forms.InvalidateEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.OnHandleDestroyed(System.EventArgs)">
            <summary>
            Remove hosted controls before disposing of the parent control.
            </summary>
            <remarks>
            <para>This allows the host element to remain valid even if their parent view is disposed.
            To dispose of the hosted control, call Dispose on the hosted control directly.</para>
            <para>Note: <see cref="T:C1.Framework.XViewLight"/> determines that a <see cref="T:System.Windows.Forms.Control"/>belongs to an 
            <see cref="P:C1.Framework.XViewLight.Element"/> if the control's <see cref="P:System.Windows.Forms.Control.Tag"/> property contains 
            a reference to a <see cref="T:System.Windows.Forms.Control"/> object.</para>
            </remarks>
            <param name="e"><see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged"/> event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.RightToLeftChanged"/> event. 
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.RescaleConstantsForDpi(System.Int32,System.Int32)">
            <summary>
            Provides constants for rescaling the control when a DPI change occurs.
            </summary>
            <param name="deviceDpiOld">The DPI value prior to the change.</param>
            <param name="deviceDpiNew">The DPI value after the change.</param>
        </member>
        <member name="P:C1.Framework.XViewLight.C1#Framework#IView#DeviceDpi">
            <summary>
            Gets the DPI value for the display device where the control is currently being displayed.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.GetDeviceDpi">
            <summary>
            Gets the DPI value for the display device where the control is currently being displayed.
            </summary>
            <remarks>
            Returns system DPI for .Net 4.5.2 and Control.DeviceDpi for .Net 5 or highest.
            </remarks>
        </member>
        <member name="P:C1.Framework.XViewLight.FocusedElement">
            <summary>
            Gets the element that has the focus.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.Focus(C1.Framework.Element)">
            <summary>
            Set the focus to a given element.
            </summary>
            <param name="e">Element to receive the focus.</param>
            <returns>True if the focus was set to the given element.</returns>
        </member>
        <member name="P:C1.Framework.XViewLight.HandleElementFocus">
            <summary>
            Gets or sets whether the control should handle the focus within contained elements.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.GotFocus"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.OnLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Leave"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Validating"/> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.OnValidated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Validated"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.KeyEventArgs"/> 
            that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyUp"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.KeyEventArgs"/> 
            that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyPress"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.KeyPressEventArgs"/> 
            that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is a regular input key or a special key that requires preprocessing.
            </summary>
            <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys"/> values.</param>
            <returns>True if the specified key is a regular input key; otherwise, false.</returns>
        </member>
        <member name="M:C1.Framework.XViewLight.HandleTabKey(System.Boolean)">
            <summary>
            Handle the tab key by moving the focus to the next focusable element.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.GetNextElement(C1.Framework.Element,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the next <see cref="P:C1.Framework.XViewLight.Element"/> given a start <see cref="P:C1.Framework.XViewLight.Element"/>.
            </summary>
            <param name="e"><see cref="P:C1.Framework.XViewLight.Element"/> where to start.</param>
            <param name="forward"><b>true</b> to move forward in the tab order; <b>false</b> to move backward in the tab order.</param>
            <param name="tabStopOnly"><b>true</b> to ignore elements with the TabStop property set to <b>false</b>; otherwise, <b>false</b>.</param>
            <param name="nested"><b>true</b> to include nested (children of child elements) child elements; otherwise, <b>false.</b></param>
            <param name="wrap"><b>true</b> to continue searching from the first element in the tab order after the last element has been reached; otherwise, <b>false</b>.</param>
            <returns>The next (or previous) <see cref="P:C1.Framework.XViewLight.Element"/> in the tab order, or null if no element was found.</returns>
        </member>
        <member name="P:C1.Framework.XViewLight.CapturedElement">
            <summary>
            Gets or sets the element that receives all mouse events.
            </summary>
        </member>
        <member name="P:C1.Framework.XViewLight.HoveredElement">
            <summary>
            Gets the element currently under the mouse.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel"/> event. 
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> 
            that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Click"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.OnDoubleClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.DoubleClick"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseUp"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseEnter"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.CheckHover">
            <summary>
            checks the element under the mouse and updates the control state.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event. 
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.RenderArea(System.Drawing.Rectangle,System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point,System.Drawing.Region)">
            <summary>
            Renders scrollable and non-scrollable area.
            </summary>
            <param name="r">Element bound.</param>
            <param name="g">Reference to the GDI+ drawing surface.</param>
            <param name="clip">Render area.</param>
            <param name="scrollPosition">Scrolling offset.</param>
            <param name="originPoint">Scroll origin (used to implement scrolling with fixed row/column headers).</param>
            <param name="originClip">Region to restore origin clipping.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.GetBounds(C1.Framework.Element,System.Boolean,System.Boolean)">
            <summary>
            Gets the rectangle that contains a given element.
            </summary>
            <param name="e"><see cref="P:C1.Framework.XViewLight.Element"/> to locate.</param>
            <param name="contentArea">Whether to get the bounds of the whole element or just the content area.</param>
            <param name="clip">Whether to clip the rectangle based on ancestor elements.</param>
            <returns>Bounds of element <paramref name="e"/>, in client coordinates.</returns>
            <remarks>This method is similar to the <see cref="M:C1.Framework.Element.GetBounds(C1.Framework.Element)"/> method in the
            <see cref="P:C1.Framework.XViewLight.Element"/> class.
            </remarks>
        </member>
        <member name="M:C1.Framework.XViewLight.UpdateElementBounds">
            <summary>
            Update contained element size when the control is resized.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.GetScrollOrigin">
            <summary>
            Gets scroll origin (used to implement scrolling with fixed row/column headers).
            </summary>        
        </member>
        <member name="M:C1.Framework.XViewLight.HitTest">
            <summary>
            Gets the hit-testable element under the mouse.
            </summary>
            <returns>Element under the mouse.</returns>
        </member>
        <member name="M:C1.Framework.XViewLight.HitTest(System.Drawing.Point)">
            <summary>
            Gets the hit-testable element at a given position.
            </summary>
            <param name="pt">Position to test.</param>
            <returns>Element at the given position.</returns>
        </member>
        <member name="P:C1.Framework.XViewLight.Cursor">
            <summary>
            Gets or sets the <see cref="P:C1.Framework.XViewLight.Cursor"/> that appears when the mouse moves over the control.
            </summary>
        </member>
        <member name="P:C1.Framework.XViewLight.SuperTooltip">
            <summary>
            Gets or sets the external instance of C1SuperTooltip class used to display tooltips for inner elements.
            </summary>
        </member>
        <member name="P:C1.Framework.XViewLight.InnerTooltip">
            <summary>
            Gets the internal instance of the <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> component.
            </summary>
        </member>
        <member name="P:C1.Framework.XViewLight.EffectiveTooltip">
            <summary>
            Gets the <see cref="T:C1.Win.SuperTooltip.C1SuperTooltipBase"/> component used to display tooltips for hovered elements.
            </summary>
        </member>
        <member name="P:C1.Framework.XViewLight.ShowToolTips">
            <summary>
            Gets or sets whether the <see cref="T:C1.Framework.XView"/> should display tooltips for elements that 
            implement the <see cref="T:C1.Framework.IToolTipElement"/> interface.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.SetToolTip(System.Windows.Forms.Control,System.String)">
            <summary>
            Associates a rich tooltip with a control.
            </summary>
            <param name="control"><b>Control</b> that will be associated with the rich tooltip.</param>
            <param name="text">String containing Html text to be displayed in the tooltip.</param>
            <remarks>
            Use the <see cref="T:C1.Framework.XView"/> built-in tooltip instead of the regular <see cref="T:System.Windows.Forms.ToolTip"/>
            component in order to provide a consistent look between the tooltips associated with XView
            elements and other controls on your form.
            </remarks>
        </member>
        <member name="M:C1.Framework.XViewLight.GetToolTip(System.Windows.Forms.Control)">
            <summary>
            Retrieves the rich tooltip text associated with the specified control.
            </summary>
            <param name="control">The <b>Control</b> for which to retrieve the tooltip text.</param>
            <returns>The tooltip text for the specified control.</returns>
        </member>
        <member name="M:C1.Framework.XViewLight.UpdateToolTip">
            <summary>
            Updates the tooltip for the hovered element.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.HideToolTip">
            <summary>
            Hides tooltip if it is currently visible.
            </summary>
        </member>
        <member name="P:C1.Framework.XViewLight.C1#Framework#IView#HandleElementFocus">
            <summary>
            Gets or sets whether the control should handle the focus within contained elements.
            </summary>
        </member>
        <member name="P:C1.Framework.XViewLight.C1#Framework#IView#FocusedElement">
            <summary>
            Gets the element that has the focus.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.C1#Framework#IView#Focus(C1.Framework.Element)">
            <summary>
            Set the focus to a given element.
            </summary>
            <param name="e">Element to receive the focus.</param>
            <returns>True if the focus was set to the given element.</returns>
        </member>
        <member name="P:C1.Framework.XViewLight.C1#Framework#IView#Element">
            <summary>
            Element hosted by this <see cref="T:C1.Framework.XViewLight"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.C1#Framework#IView#GetBounds(C1.Framework.Element)">
            <summary>
            Gets the rectangle that contains a given element.
            </summary>
            <param name="e"><see cref="P:C1.Framework.XViewLight.Element"/> to locate.</param>
            <returns>Bounds of element <paramref name="e"/>, in client coordinates.</returns>
        </member>
        <member name="M:C1.Framework.XViewLight.C1#Framework#IView#GetBounds(C1.Framework.Element,System.Boolean,System.Boolean)">
            <summary>
            Gets the rectangle that contains a given element.
            </summary>
            <param name="e"><see cref="P:C1.Framework.XViewLight.Element"/> to locate.</param>
            <param name="contentArea">Whether to get the bounds of the whole element or just the content area.</param>
            <param name="clip">Whether to clip the rectangle based on ancestor elements.</param>
            <returns>Bounds of element <paramref name="e"/>, in client coordinates.</returns>
            <remarks>This method is similar to the <see cref="M:C1.Framework.Element.GetBounds(C1.Framework.Element)"/> method in the
            <see cref="P:C1.Framework.XViewLight.Element"/> class.
            </remarks>
        </member>
        <member name="M:C1.Framework.XViewLight.C1#Framework#IView#CheckHover">
            <summary>
            checks the element under the mouse and updates the control state.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.C1#Framework#IView#ResetDisabledElement">
            <summary>
            Resets the hovered and entered state when this element are disabled.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.C1#Framework#IView#IsInputKey(System.Windows.Forms.Control,System.Windows.Forms.Keys)">
            <summary>
            Internal version of IsInputKey that should be called by hosted controls in order to
            allow the view to handle tab keys, arrows, etc.
            </summary>
            <param name="ctl">Control that received the key.</param>
            <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys"/> values.</param>
            <returns>True if the specified key is a regular input key; otherwise, false.</returns>
        </member>
        <member name="M:C1.Framework.XViewLight.C1#Framework#IView#HitTest">
            <summary>
            Gets the hit-testable element under the mouse.
            </summary>
            <returns>Element under the mouse.</returns>
        </member>
        <member name="M:C1.Framework.XViewLight.C1#Framework#IView#Invalidate(C1.Framework.Element)">
            <summary>
            Invalidates the contained element.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewLight.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <inheritdoc/>
        </member>
        <member name="E:C1.Framework.XViewLight.BoundsChanged">
            <summary>
            Occurs when control bounds changed.
            </summary>
        </member>
        <member name="P:C1.Framework.XViewLight.C1#Win#Accessibility#ISupportUia#IsOffscreen">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.XViewLight.C1#Win#Accessibility#ISupportUia#Parent">
            <inheritdoc/>
        </member>
        <member name="P:C1.Framework.XViewLight.C1#Win#Accessibility#ISupportUia#UiaName">
            <inheritdoc/>
        </member>
        <member name="E:C1.Framework.XViewLight.C1#Win#Accessibility#ISupportUia#BoundsChanged">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.XViewLight.C1#Win#Accessibility#ISupportUia#SetFocus">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.XViewLight.GetUiaItem(System.Boolean,C1.Win.Accessibility.UiaItem)">
            <summary>
            Gets UI Automation object of this control.
            </summary>
            <param name="create">Indicates that this UiaItem must be created if needed.</param>
            <param name="uiaParent">The parent of this UiaItem.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.WndProc(System.Windows.Forms.Message@)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Framework.XViewLight.CreateUiaItem(C1.Win.Accessibility.UiaItem)">
            <summary>
            Creates UI Automation object of this control.
            </summary>
            <param name="uiaParent">The parent of this UiaItem.</param>
        </member>
        <member name="M:C1.Framework.XViewLight.RefreshInnerUiaItems(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Framework.XViewPopup">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Framework.XViewPopup.XViewPopupMessageFilter">
            <summary>
            Message filter to detect mouse events while the popUp is shown and 
            close the form when a mouse click outside the popUp occurs.
            </summary>
        </member>
        <member name="M:C1.Framework.XViewPopup.XViewPopupMessageFilter.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Checks the message loop for mouse messages while the popUp is displayed.
            If one is detected the position is checked to see if it is outside the form, 
            in which case the owner is notified.
            </summary>
        </member>
        <member name="F:C1.Framework.Html.Css.WordBreak.Normal">
            <summary>
            The default word-break rules are used. Words usually are not break or are break only in places 
            where the break is explicitly specified (for example, using the &lt;br&gt; tag).
            </summary>
        </member>
        <member name="F:C1.Framework.Html.Css.WordBreak.BreakAll">
            <summary>
            Line wrap is added automatically so that the word fits within the specified block width.
            The value does not work for Chinese, Korean, Japanese or Arabic text.
            </summary>
        </member>
        <member name="F:C1.Framework.Html.Css.WordBreak.KeepAll">
            <summary>
            Does not allow word-break in Chinese, Korean, or Japanese. 
            For other languages, it acts as 'Normal'.
            </summary>
        </member>
        <member name="M:C1.Framework.Html.Css.ParseAttribute(System.Collections.Hashtable,System.String,System.String,System.Single)">
            <summary>
            Adds a StyleAttribute to a table based on a name and value.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlDiv">
            <summary>
            Class that represents Html DIV tags.
            </summary>
        </member>
        <member name="P:C1.Framework.Html.HtmlDiv.GeneratePdfTags">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value specifying whether element should generate pdf tags.
            </summary>
        </member>
        <member name="M:C1.Framework.Html.HtmlDiv.BreakBefore(C1.Framework.Element,System.Int32,System.Int32)">
            <summary>
            Gets a value that determines whether a line break should be inserted before
            a given element.
            </summary>
            <param name="e">Element to test for a line break.</param>
            <param name="lineEnd">Position of the line end if no breaks are added.</param>
            <param name="width">Width available for rendering the paragraph.</param>
            <returns>True if a line break should be inserted before the given element.</returns>
        </member>
        <member name="M:C1.Framework.Html.HtmlDiv.BreakBeforeRtl(C1.Framework.Element,System.Int32,System.Int32)">
            <summary>
            Gets a value that determines whether a line break should be inserted before
            a given element.
            </summary>
            <param name="e">Element to test for a line break.</param>
            <param name="lineStart">Position of the line start if no breaks are added.</param>
            <param name="start">Text start position.</param>
            <returns>True if a line break should be inserted before the given element.</returns>
        </member>
        <member name="M:C1.Framework.Html.HtmlDiv.BreakAfter(C1.Framework.Element)">
            <summary>
            Gets a value that determines whether a line break should be inserted after
            a given element.
            </summary>
            <param name="e">Element to test for a line break.</param>
            <returns>True if a line break should be inserted after the given element.</returns>
        </member>
        <member name="M:C1.Framework.Html.HtmlDiv.GetExtraSpacing(C1.Framework.Element,C1.Framework.Element)">
            <summary>
            Gets the amount of space, in pixels, to be added between two elements.
            </summary>
            <param name="above">Element above the space.</param>
            <param name="below">Element below the space.</param>
            <returns>Amount of space, in pixels, to be added between the two elements.</returns>
        </member>
        <member name="M:C1.Framework.Html.HtmlDiv.AddTextElement(C1.Framework.Style,System.String,System.Boolean)">
            <summary>
            Adds a string with a given style to this paragraph.
            </summary>
            <param name="s"><see cref="T:C1.Framework.Style"/> used to render the new string.</param>
            <param name="text">String to add to this paragraph.</param>
            <param name="wrappable">Indicates if the text element can be wrapped to new line.</param>
        </member>
        <member name="M:C1.Framework.Html.HtmlDiv.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the element into a given rectangle. 
            </summary>
            <param name="g">Graphics object where the element will be rendered.</param>
            <param name="r">Rectangle where the element will be rendered.</param>
        </member>
        <member name="M:C1.Framework.Html.HtmlDiv.RenderChildren(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the child elements into a given rectangle. 
            </summary>
            <param name="g">Graphics object where the element will be rendered.</param>
            <param name="r">Rectangle where the child elements will be rendered.</param>
            <remarks>
            Derived elements may override this method in order to draw into the <see cref="T:System.Drawing.Graphics"/>
            after the background and borders have been rendered but before the child elements are 
            rendered.
            </remarks>
        </member>
        <member name="T:C1.Framework.Html.HtmlDiv.BaseLineTextElement">
            <summary>
            Like a <see cref="T:C1.Framework.TextElement"/>, but with an adjustable base line offset 
            (for implementing sub/super scripts)
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlElement">
            <summary>
            Class that represents a generic Html <see cref="T:C1.Framework.Element"/>.
            </summary>
        </member>
        <member name="M:C1.Framework.Html.HtmlElement.#ctor(C1.Framework.Style,System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.Html.HtmlElement"/> class with the specified htm content and style options.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="html">The <see cref="T:System.String"/> value with html content.</param>
            <param name="rtl">True to use right-to-left flow direction.</param>
            <param name="width">The <see cref="T:System.Int32"/> value of the width of html content.</param>
        </member>
        <member name="M:C1.Framework.Html.HtmlElement.#ctor(C1.Framework.Style,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.Html.HtmlElement"/> class with the specified htm content and style options.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="html">The <see cref="T:System.String"/> value with html content.</param>
            <param name="rtl">True to use right-to-left flow direction.</param>
        </member>
        <member name="M:C1.Framework.Html.HtmlElement.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.Html.HtmlElement"/> class with the specified htm content.
            </summary>
            <param name="html">The <see cref="T:System.String"/> value with html content.</param>
            <param name="rtl">True to use right-to-left flow direction.</param>
        </member>
        <member name="M:C1.Framework.Html.HtmlElement.#ctor(C1.Framework.Style,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.Html.HtmlElement"/> class with the specified style options.
            </summary>
            <param name="style">The <see cref="T:C1.Framework.Style"/> object to use.</param>
            <param name="rtl">True to use right-to-left flow direction.</param>
        </member>
        <member name="M:C1.Framework.Html.HtmlElement.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Framework.Html.HtmlElement"/> class.
            </summary>
            <param name="rtl">True to use right-to-left flow direction.</param>
        </member>
        <member name="P:C1.Framework.Html.HtmlElement.Url">
            <summary>
            Gets or sets the <see cref="T:System.String"/> value determining location of the html content to show.
            </summary>
        </member>
        <member name="P:C1.Framework.Html.HtmlElement.Html">
            <summary>
            Gets or sets the html content to display.
            </summary>
        </member>
        <member name="M:C1.Framework.Html.HtmlElement.Clear">
            <summary>
            Clears all content.
            </summary>
        </member>
        <member name="P:C1.Framework.Html.HtmlElement.ShowHotKeys">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value determining whether to show hotkey prefix.
            </summary>
        </member>
        <member name="P:C1.Framework.Html.HtmlElement.Connected">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value determining whether content should be downloaded at runtime.
            </summary>
        </member>
        <member name="P:C1.Framework.Html.HtmlElement.ImageDictionary">
            <summary>
            Gets or sets the <see cref="T:System.Collections.IDictionary"/> containing image cache.
            </summary>
        </member>
        <member name="P:C1.Framework.Html.HtmlElement.HasAnimatedImages">
            <summary>
            Get the <see cref="T:System.Boolean"/> value specifying whether the current element contains animated images.
            </summary>
        </member>
        <member name="M:C1.Framework.Html.HtmlElement.AnimateImages(System.Int32)">
            <summary>
            Selects the image frame with the specified index.
            </summary>
            <param name="frameIndex">The frame index.</param>
        </member>
        <member name="T:C1.Framework.Html.HtmlFont">
            <summary>
            Class that represents HTML 'FONT' tags.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlHr">
            <summary>
            Extends Element to provide a horizontal rule across the document.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlHyperlink">
            <summary>
            Class that represents HTML 'A' tags.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HyperlinkElement">
            <summary>
            Invisible elements inserted in the HTML stream to delimit hyperlinks.
            To use this, the viewer should handle the MouseDown event, use HitTest to 
            find the element clicked, then scan the Children collection to determine
            whether the click was on a link and what the link parameters are.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlImage">
            <summary>
            Represents an HTML 'img' tag.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlList">
            <summary>
            REVIEW: Replace with 2-column table?
            The current setup works but makes the document dirty when it renders...
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlListItem">
            <summary>
            Class that represents an item in an ordered or unordered list.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlLoader">
            <summary>
            Utility class with static methods used for loading (and caching)
            text and images from the web, from disk, or from app resources.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlParagraph">
            <summary>
            Class that represents an HTML paragraph.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlRawParagraph">
            <summary>
            Class that represents an HTML paragraph.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlForm">
            <summary>
            Class that represents an HTML form.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlInputType">
            <summary>
            Input types.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlInput">
            <summary>
            Class that represents an HTML input (form part).
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlTextArea">
            <summary>
            Class that represents an HTML text area (form part).
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlSelect">
            <summary>
            Class that represents an HTML select (form part).
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlSelectOption">
            <summary>
            Class that represents an HTML paragraph.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlParser">
            <summary>
            Class used to parse that HTML into tags and text.
            </summary>
            <remarks>
            The main method in this class is <see cref="M:C1.Framework.Html.HtmlParser.Read"/>, which advances a pointer and 
            sets the <see cref="P:C1.Framework.Html.HtmlParser.Tag"/> and <see cref="P:C1.Framework.Html.HtmlParser.Text"/> properties.
            </remarks>
        </member>
        <member name="T:C1.Framework.Html.HtmlReader">
            <summary>
            <para>Class used to parse that HTML into tags and text.</para>
            
            <para>The main method is <see cref="M:C1.Framework.Html.HtmlReader.Read"/>, which advances a pointer and 
            sets the <see cref="P:C1.Framework.Html.HtmlReader.Tag"/> and <see cref="P:C1.Framework.Html.HtmlReader.Text"/> properties.</para>
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlRenderer">
            <summary>
            Helper class used for measuring and rendering HTML.
            </summary>
        </member>
        <member name="P:C1.Framework.Html.HtmlRenderer.Rtl">
            <summary>
            Gsts or sets a right-to-left layout.
            </summary>
        </member>
        <member name="P:C1.Framework.Html.HtmlRenderer.GeneratePdfTags">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value specifying whether element should generate pdf tags.
            </summary>
        </member>
        <member name="M:C1.Framework.Html.HtmlRenderer.Layout(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single)">
            <summary>
            Create or update this HtmlElement with the provided info.
            </summary>
            <param name="text">The text for create or update in the HTML element.</param>
            <param name="font">The font of the text.</param>
            <param name="brush">The text brush.</param>
            <param name="width">The width in points.</param>
        </member>
        <member name="M:C1.Framework.Html.HtmlRenderer.LayoutInPixels(System.String,System.Drawing.Font,System.Drawing.Brush,System.Int32)">
            <summary>
            Create or update this HtmlElement with the provided info.
            </summary>
            <param name="text">The text for create or update in the HTML element.</param>
            <param name="font">The font of the text.</param>
            <param name="brush">The text brush.</param>
            <param name="width">The width in pixels.</param>
        </member>
        <member name="M:C1.Framework.Html.HtmlRenderer.Layout(System.IntPtr,System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Boolean)">
            <summary>
            Create or update this HtmlElement with the provided info.
            </summary>
            <param name="hdc">The graphics device context handler.</param>
            <param name="text">The text for create or update in the HTML element.</param>
            <param name="font">The font of the text.</param>
            <param name="brush">The text brush.</param>
            <param name="width">The width in points.</param>
            <param name="rtl">The right-to-left layout.</param>
        </member>
        <member name="P:C1.Framework.Html.HtmlRenderer.Width">
            <summary>
            Gets element width in pixels.
            </summary>
        </member>
        <member name="P:C1.Framework.Html.HtmlRenderer.Height">
            <summary>
            Gets element height in pixels.
            </summary>
        </member>
        <member name="M:C1.Framework.Html.HtmlRenderer.GetImage(System.Drawing.RectangleF,System.Int32,System.Int32@)">
            <summary>
            Gets a metafile image of a piece of the document.
            </summary>
            <param name="rc">The rectangle of a image.</param>
            <param name="offset">The offset of the frame.</param>
            <param name="frameBottom">The frame bottom calculated value.</param>
            <returns>The metafile image of a piece of the document.</returns>
        </member>
        <member name="T:C1.Framework.Html.HtmlSpan">
            <summary>
            Represents an HTML span.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlBlock">
            <summary>
            Class that represents some spans.
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlTable">
            <summary>
            <para>HtmlTable derives from HtmlDiv and contains a single GridPanel, exposed by
            the <see cref="P:C1.Framework.Html.HtmlTable.Table"/> property.</para>
            <para>HtmlTable does not derive directly from GridPanel for two reasons:</para>
            <para>1) To allow horizontal alignment of the table within the paragraph, and</para>
            <para>2) Because this is simpler than using an interface and different parent classes.</para>
            </summary>
        </member>
        <member name="T:C1.Framework.Html.HtmlCell">
            <summary>
            Represents a cell in a table.
            </summary>
        </member>
        <member name="T:C1.Framework.XmlUtil">
            <summary>
            Utility class for reading/writing XML.
            </summary>
        </member>
        <member name="T:C1.Framework.C1IconConverter">
            <summary>
            Provides a type converter to convert C1Icon objects to and from various other representations.
            </summary>
            <remarks>The <see cref="T:C1.Framework.C1IconConverter"/> allows to initialize new elements of 
            the <see cref="T:C1.Framework.C1BitmapIcon"/>, <see cref="T:C1.Framework.C1FontIcon"/>, <see cref="T:C1.Framework.C1PathIcon"/> types.</remarks>
        </member>
        <member name="T:C1.Framework.C1IconCollectionEditor">
            <summary>
            Provides a user interface that can edit collection of <see cref="T:C1.Framework.C1Icon"/> elements at design time.
            </summary>
            <remarks>The <see cref="T:C1.Framework.C1IconCollectionEditor"/> allows to add new elements of 
            the <see cref="T:C1.Framework.C1BitmapIcon"/>, <see cref="T:C1.Framework.C1FontIcon"/>, <see cref="T:C1.Framework.C1PathIcon"/> types.</remarks>
        </member>
        <member name="M:C1.Framework.C1IconCollectionEditor.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:C1.Framework.C1IconCollectionEditor"/> class using the specified collection type.
            </summary>
            <param name="type">The type of the collection for this editor to edit.</param>
        </member>
        <member name="M:C1.Svg.SvgParser.Parse(System.String)">
            <summary>
            Parses the specified string into a collection of path segments.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing path data.</param>
        </member>
        <member name="M:C1.Svg.SvgParser.ToAbsolute(System.Double,System.Double,C1.Svg.SvgPathSegmentList,System.Boolean)">
            <summary>
            Creates point with absolute coordinates.
            </summary>
            <param name="x">Raw X-coordinate value.</param>
            <param name="y">Raw Y-coordinate value.</param>
            <param name="segments">Current path segments.</param>
            <param name="isRelativeBoth"><b>true</b> if <paramref name="x"/> and <paramref name="y"/> contains relative coordinate values, otherwise <b>false</b>.</param>
            <returns><see cref="T:System.Drawing.PointF"/> that contains absolute coordinates.</returns>
        </member>
        <member name="M:C1.Svg.SvgParser.ToAbsolute(System.Double,System.Double,C1.Svg.SvgPathSegmentList,System.Boolean,System.Boolean)">
            <summary>
            Creates point with absolute coordinates.
            </summary>
            <param name="x">Raw X-coordinate value.</param>
            <param name="y">Raw Y-coordinate value.</param>
            <param name="segments">Current path segments.</param>
            <param name="isRelativeX"><b>true</b> if <paramref name="x"/> contains relative coordinate value, otherwise <b>false</b>.</param>
            <param name="isRelativeY"><b>true</b> if <paramref name="y"/> contains relative coordinate value, otherwise <b>false</b>.</param>
            <returns><see cref="T:System.Drawing.PointF"/> that contains absolute coordinates.</returns>
        </member>
        <member name="M:System.Drawing.BrushExtension.IsTransformable(System.Drawing.Brush)">
            <summary>
            Returns a value indicating whether there is an opportunity to transform the brush.
            </summary>
            <param name="brush">specified brush.</param>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.BrushExtension.TransformBrush(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Transformation the brush.
            </summary>
            <param name="brush">specified brush to transform.</param>
            <param name="newRect">new brush rectangle.</param>
            <param name="angle">the angle of rotation.</param>
            <param name="mirrorX">whether the brush should be mirrored horizontally.</param>
            <param name="mirrorY">whether the brush should be mirrored vertically.</param>
        </member>
    </members>
</doc>
